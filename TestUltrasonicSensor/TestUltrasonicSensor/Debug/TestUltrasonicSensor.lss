
TestUltrasonicSensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00802000  000029ee  00002a82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000031c  00802018  00802018  00002a9a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002a9a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000478  00000000  00000000  00002b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000fca8  00000000  00000000  00002fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004e50  00000000  00000000  00012c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000858e  00000000  00000000  00017aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001674  00000000  00000000  0002003c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00033936  00000000  00000000  000216b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007745  00000000  00000000  00054fe6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000570  00000000  00000000  0005c72b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c19b  00000000  00000000  0005cc9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c2       	rjmp	.+1182   	; 0x4d0 <__bad_interrupt>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	62 c5       	rjmp	.+2756   	; 0xafe <__vector_14>
      3a:	00 00       	nop
      3c:	8d c5       	rjmp	.+2842   	; 0xb58 <__vector_15>
      3e:	00 00       	nop
      40:	b8 c5       	rjmp	.+2928   	; 0xbb2 <__vector_16>
      42:	00 00       	nop
      44:	e3 c5       	rjmp	.+3014   	; 0xc0c <__vector_17>
      46:	00 00       	nop
      48:	0e c6       	rjmp	.+3100   	; 0xc66 <__vector_18>
      4a:	00 00       	nop
      4c:	39 c6       	rjmp	.+3186   	; 0xcc0 <__vector_19>
      4e:	00 00       	nop
      50:	64 c6       	rjmp	.+3272   	; 0xd1a <__vector_20>
      52:	00 00       	nop
      54:	8f c6       	rjmp	.+3358   	; 0xd74 <__vector_21>
      56:	00 00       	nop
      58:	ba c6       	rjmp	.+3444   	; 0xdce <__vector_22>
      5a:	00 00       	nop
      5c:	e5 c6       	rjmp	.+3530   	; 0xe28 <__vector_23>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c2       	rjmp	.+1130   	; 0x4d0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c2       	rjmp	.+1126   	; 0x4d0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c2       	rjmp	.+1086   	; 0x4d0 <__bad_interrupt>
      92:	00 00       	nop
      94:	1d c2       	rjmp	.+1082   	; 0x4d0 <__bad_interrupt>
      96:	00 00       	nop
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	19 c2       	rjmp	.+1074   	; 0x4d0 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 03 09 	jmp	0x1206	; 0x1206 <__vector_47>
      c0:	0c 94 30 09 	jmp	0x1260	; 0x1260 <__vector_48>
      c4:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__vector_49>
      c8:	0c 94 8a 09 	jmp	0x1314	; 0x1314 <__vector_50>
      cc:	0c 94 b7 09 	jmp	0x136e	; 0x136e <__vector_51>
      d0:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_52>
      d4:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__vector_53>
      d8:	0c 94 3e 0a 	jmp	0x147c	; 0x147c <__vector_54>
      dc:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <__vector_55>
      e0:	0c 94 98 0a 	jmp	0x1530	; 0x1530 <__vector_56>
      e4:	f5 c1       	rjmp	.+1002   	; 0x4d0 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f3 c1       	rjmp	.+998    	; 0x4d0 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f1 c1       	rjmp	.+994    	; 0x4d0 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ef c1       	rjmp	.+990    	; 0x4d0 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ed c1       	rjmp	.+986    	; 0x4d0 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	eb c1       	rjmp	.+982    	; 0x4d0 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e9 c1       	rjmp	.+978    	; 0x4d0 <__bad_interrupt>
      fe:	00 00       	nop
     100:	e7 c1       	rjmp	.+974    	; 0x4d0 <__bad_interrupt>
     102:	00 00       	nop
     104:	e5 c1       	rjmp	.+970    	; 0x4d0 <__bad_interrupt>
     106:	00 00       	nop
     108:	e3 c1       	rjmp	.+966    	; 0x4d0 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e1 c1       	rjmp	.+962    	; 0x4d0 <__bad_interrupt>
     10e:	00 00       	nop
     110:	df c1       	rjmp	.+958    	; 0x4d0 <__bad_interrupt>
     112:	00 00       	nop
     114:	dd c1       	rjmp	.+954    	; 0x4d0 <__bad_interrupt>
     116:	00 00       	nop
     118:	db c1       	rjmp	.+950    	; 0x4d0 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d9 c1       	rjmp	.+946    	; 0x4d0 <__bad_interrupt>
     11e:	00 00       	nop
     120:	d7 c1       	rjmp	.+942    	; 0x4d0 <__bad_interrupt>
     122:	00 00       	nop
     124:	d5 c1       	rjmp	.+938    	; 0x4d0 <__bad_interrupt>
     126:	00 00       	nop
     128:	d3 c1       	rjmp	.+934    	; 0x4d0 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d1 c1       	rjmp	.+930    	; 0x4d0 <__bad_interrupt>
     12e:	00 00       	nop
     130:	cf c1       	rjmp	.+926    	; 0x4d0 <__bad_interrupt>
     132:	00 00       	nop
     134:	a6 c6       	rjmp	.+3404   	; 0xe82 <__vector_77>
     136:	00 00       	nop
     138:	d1 c6       	rjmp	.+3490   	; 0xedc <__vector_78>
     13a:	00 00       	nop
     13c:	fc c6       	rjmp	.+3576   	; 0xf36 <__vector_79>
     13e:	00 00       	nop
     140:	27 c7       	rjmp	.+3662   	; 0xf90 <__vector_80>
     142:	00 00       	nop
     144:	52 c7       	rjmp	.+3748   	; 0xfea <__vector_81>
     146:	00 00       	nop
     148:	7d c7       	rjmp	.+3834   	; 0x1044 <__vector_82>
     14a:	00 00       	nop
     14c:	a8 c7       	rjmp	.+3920   	; 0x109e <__vector_83>
     14e:	00 00       	nop
     150:	d3 c7       	rjmp	.+4006   	; 0x10f8 <__vector_84>
     152:	00 00       	nop
     154:	fe c7       	rjmp	.+4092   	; 0x1152 <__vector_85>
     156:	00 00       	nop
     158:	0c 94 d6 08 	jmp	0x11ac	; 0x11ac <__vector_86>
     15c:	b9 c1       	rjmp	.+882    	; 0x4d0 <__bad_interrupt>
     15e:	00 00       	nop
     160:	b7 c1       	rjmp	.+878    	; 0x4d0 <__bad_interrupt>
     162:	00 00       	nop
     164:	b5 c1       	rjmp	.+874    	; 0x4d0 <__bad_interrupt>
     166:	00 00       	nop
     168:	b3 c1       	rjmp	.+870    	; 0x4d0 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b1 c1       	rjmp	.+866    	; 0x4d0 <__bad_interrupt>
     16e:	00 00       	nop
     170:	af c1       	rjmp	.+862    	; 0x4d0 <__bad_interrupt>
     172:	00 00       	nop
     174:	ad c1       	rjmp	.+858    	; 0x4d0 <__bad_interrupt>
     176:	00 00       	nop
     178:	ab c1       	rjmp	.+854    	; 0x4d0 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a9 c1       	rjmp	.+850    	; 0x4d0 <__bad_interrupt>
     17e:	00 00       	nop
     180:	a7 c1       	rjmp	.+846    	; 0x4d0 <__bad_interrupt>
     182:	00 00       	nop
     184:	a5 c1       	rjmp	.+842    	; 0x4d0 <__bad_interrupt>
     186:	00 00       	nop
     188:	a3 c1       	rjmp	.+838    	; 0x4d0 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a1 c1       	rjmp	.+834    	; 0x4d0 <__bad_interrupt>
     18e:	00 00       	nop
     190:	9f c1       	rjmp	.+830    	; 0x4d0 <__bad_interrupt>
     192:	00 00       	nop
     194:	9d c1       	rjmp	.+826    	; 0x4d0 <__bad_interrupt>
     196:	00 00       	nop
     198:	9b c1       	rjmp	.+822    	; 0x4d0 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	99 c1       	rjmp	.+818    	; 0x4d0 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	97 c1       	rjmp	.+814    	; 0x4d0 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	95 c1       	rjmp	.+810    	; 0x4d0 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	93 c1       	rjmp	.+806    	; 0x4d0 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	91 c1       	rjmp	.+802    	; 0x4d0 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__vector_108>
     1b4:	0c 94 f2 0a 	jmp	0x15e4	; 0x15e4 <__vector_109>
     1b8:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__vector_110>
     1bc:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__vector_111>
     1c0:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_112>
     1c4:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <__vector_113>
     1c8:	83 c1       	rjmp	.+774    	; 0x4d0 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	81 c1       	rjmp	.+770    	; 0x4d0 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7f c1       	rjmp	.+766    	; 0x4d0 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7d c1       	rjmp	.+762    	; 0x4d0 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7b c1       	rjmp	.+758    	; 0x4d0 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	79 c1       	rjmp	.+754    	; 0x4d0 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	77 c1       	rjmp	.+750    	; 0x4d0 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	75 c1       	rjmp	.+746    	; 0x4d0 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	73 c1       	rjmp	.+742    	; 0x4d0 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	71 c1       	rjmp	.+738    	; 0x4d0 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6f c1       	rjmp	.+734    	; 0x4d0 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6d c1       	rjmp	.+730    	; 0x4d0 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6b c1       	rjmp	.+726    	; 0x4d0 <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0	; 0x8040a0 <__bss_end+0x1d6c>
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8	; 0x8010f8 <__TEXT_REGION_LENGTH__+0x7010f8>
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888	; 0x808888 <__bss_end+0x6554>
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860	; 0x808860 <__bss_end+0x652c>
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888	; 0x807888 <__bss_end+0x5554>
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060	; 0x804060 <__bss_end+0x1d2c>
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	10 e2       	ldi	r17, 0x20	; 32
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	ee ee       	ldi	r30, 0xEE	; 238
     4a6:	f9 e2       	ldi	r31, 0x29	; 41
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a8 31       	cpi	r26, 0x18	; 24
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	23 e2       	ldi	r18, 0x23	; 35
     4ba:	a8 e1       	ldi	r26, 0x18	; 24
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a4 33       	cpi	r26, 0x34	; 52
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 51 11 	call	0x22a2	; 0x22a2 <main>
     4cc:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     4d2:	04 c0       	rjmp	.+8      	; 0x4dc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     4d4:	61 50       	subi	r22, 0x01	; 1
     4d6:	71 09       	sbc	r23, r1
     4d8:	81 09       	sbc	r24, r1
     4da:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     4dc:	61 15       	cp	r22, r1
     4de:	71 05       	cpc	r23, r1
     4e0:	81 05       	cpc	r24, r1
     4e2:	91 05       	cpc	r25, r1
     4e4:	b9 f7       	brne	.-18     	; 0x4d4 <__portable_avr_delay_cycles+0x2>
     4e6:	08 95       	ret

000004e8 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     4e8:	bf 92       	push	r11
     4ea:	cf 92       	push	r12
     4ec:	df 92       	push	r13
     4ee:	ef 92       	push	r14
     4f0:	ff 92       	push	r15
     4f2:	0f 93       	push	r16
     4f4:	1f 93       	push	r17
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	1f 92       	push	r1
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	16 e0       	ldi	r17, 0x06	; 6
     504:	68 94       	set
     506:	ff 24       	eor	r15, r15
     508:	f3 f8       	bld	r15, 3
     50a:	f8 01       	movw	r30, r16
     50c:	f6 82       	std	Z+6, r15	; 0x06
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ioport_set_pin_low(ST7565R_RESET_PIN);
	delay_us(10);
     50e:	64 e0       	ldi	r22, 0x04	; 4
     510:	70 e0       	ldi	r23, 0x00	; 0
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	dd df       	rcall	.-70     	; 0x4d2 <__portable_avr_delay_cycles>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     518:	f8 01       	movw	r30, r16
     51a:	f5 82       	std	Z+5, r15	; 0x05
	ioport_set_pin_high(ST7565R_RESET_PIN);
	delay_us(10);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	d6 df       	rcall	.-84     	; 0x4d2 <__portable_avr_delay_cycles>
	spi_flags_t spi_flags = SPI_MODE_3;
	board_spi_select_id_t spi_select_id = 0;
#endif

#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {
     526:	0f 2e       	mov	r0, r31
     528:	fb e2       	ldi	r31, 0x2B	; 43
     52a:	bf 2e       	mov	r11, r31
     52c:	f0 2d       	mov	r31, r0
     52e:	b9 82       	std	Y+1, r11	; 0x01
		.id = ST7565R_CS_PIN,
	};
	usart_spi_init(ST7565R_USART_SPI);
     530:	80 ea       	ldi	r24, 0xA0	; 160
     532:	99 e0       	ldi	r25, 0x09	; 9
     534:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <usart_spi_init>
	usart_spi_setup_device(ST7565R_USART_SPI, &device, spi_flags,
     538:	c1 2c       	mov	r12, r1
     53a:	d1 2c       	mov	r13, r1
     53c:	76 01       	movw	r14, r12
     53e:	00 e4       	ldi	r16, 0x40	; 64
     540:	12 e4       	ldi	r17, 0x42	; 66
     542:	2f e0       	ldi	r18, 0x0F	; 15
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	43 e0       	ldi	r20, 0x03	; 3
     548:	be 01       	movw	r22, r28
     54a:	6f 5f       	subi	r22, 0xFF	; 255
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	80 ea       	ldi	r24, 0xA0	; 160
     550:	99 e0       	ldi	r25, 0x09	; 9
     552:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <usart_spi_setup_device>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     556:	00 e6       	ldi	r16, 0x60	; 96
     558:	16 e0       	ldi	r17, 0x06	; 6
     55a:	ff 24       	eor	r15, r15
     55c:	f3 94       	inc	r15
     55e:	f8 01       	movw	r30, r16
     560:	f6 82       	std	Z+6, r15	; 0x06
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     562:	b9 82       	std	Y+1, r11	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     564:	be 01       	movw	r22, r28
     566:	6f 5f       	subi	r22, 0xFF	; 255
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	80 ea       	ldi	r24, 0xA0	; 160
     56c:	99 e0       	ldi	r25, 0x09	; 9
     56e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     572:	f8 01       	movw	r30, r16
     574:	f6 82       	std	Z+6, r15	; 0x06
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     576:	e0 ea       	ldi	r30, 0xA0	; 160
     578:	f9 e0       	ldi	r31, 0x09	; 9
     57a:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     57c:	85 ff       	sbrs	r24, 5
     57e:	fd cf       	rjmp	.-6      	; 0x57a <st7565r_init+0x92>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     580:	80 ea       	ldi	r24, 0xA0	; 160
     582:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     586:	e0 ea       	ldi	r30, 0xA0	; 160
     588:	f9 e0       	ldi	r31, 0x09	; 9
     58a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     58c:	86 ff       	sbrs	r24, 6
     58e:	fd cf       	rjmp	.-6      	; 0x58a <st7565r_init+0xa2>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     590:	e0 ea       	ldi	r30, 0xA0	; 160
     592:	f9 e0       	ldi	r31, 0x09	; 9
     594:	80 e4       	ldi	r24, 0x40	; 64
     596:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     598:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     59a:	be 01       	movw	r22, r28
     59c:	6f 5f       	subi	r22, 0xFF	; 255
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	80 ea       	ldi	r24, 0xA0	; 160
     5a2:	99 e0       	ldi	r25, 0x09	; 9
     5a4:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5a8:	8b e2       	ldi	r24, 0x2B	; 43
     5aa:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5ac:	be 01       	movw	r22, r28
     5ae:	6f 5f       	subi	r22, 0xFF	; 255
     5b0:	7f 4f       	sbci	r23, 0xFF	; 255
     5b2:	80 ea       	ldi	r24, 0xA0	; 160
     5b4:	99 e0       	ldi	r25, 0x09	; 9
     5b6:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     5c0:	e0 ea       	ldi	r30, 0xA0	; 160
     5c2:	f9 e0       	ldi	r31, 0x09	; 9
     5c4:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     5c6:	85 ff       	sbrs	r24, 5
     5c8:	fd cf       	rjmp	.-6      	; 0x5c4 <st7565r_init+0xdc>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     5ca:	86 ea       	ldi	r24, 0xA6	; 166
     5cc:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     5d0:	e0 ea       	ldi	r30, 0xA0	; 160
     5d2:	f9 e0       	ldi	r31, 0x09	; 9
     5d4:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     5d6:	86 ff       	sbrs	r24, 6
     5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <st7565r_init+0xec>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     5da:	e0 ea       	ldi	r30, 0xA0	; 160
     5dc:	f9 e0       	ldi	r31, 0x09	; 9
     5de:	80 e4       	ldi	r24, 0x40	; 64
     5e0:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     5e2:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     5e4:	be 01       	movw	r22, r28
     5e6:	6f 5f       	subi	r22, 0xFF	; 255
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ea:	80 ea       	ldi	r24, 0xA0	; 160
     5ec:	99 e0       	ldi	r25, 0x09	; 9
     5ee:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     5f2:	8b e2       	ldi	r24, 0x2B	; 43
     5f4:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     5f6:	be 01       	movw	r22, r28
     5f8:	6f 5f       	subi	r22, 0xFF	; 255
     5fa:	7f 4f       	sbci	r23, 0xFF	; 255
     5fc:	80 ea       	ldi	r24, 0xA0	; 160
     5fe:	99 e0       	ldi	r25, 0x09	; 9
     600:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     60a:	e0 ea       	ldi	r30, 0xA0	; 160
     60c:	f9 e0       	ldi	r31, 0x09	; 9
     60e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     610:	85 ff       	sbrs	r24, 5
     612:	fd cf       	rjmp	.-6      	; 0x60e <st7565r_init+0x126>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     614:	88 ec       	ldi	r24, 0xC8	; 200
     616:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     61a:	e0 ea       	ldi	r30, 0xA0	; 160
     61c:	f9 e0       	ldi	r31, 0x09	; 9
     61e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     620:	86 ff       	sbrs	r24, 6
     622:	fd cf       	rjmp	.-6      	; 0x61e <st7565r_init+0x136>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     624:	e0 ea       	ldi	r30, 0xA0	; 160
     626:	f9 e0       	ldi	r31, 0x09	; 9
     628:	80 e4       	ldi	r24, 0x40	; 64
     62a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     62c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     62e:	be 01       	movw	r22, r28
     630:	6f 5f       	subi	r22, 0xFF	; 255
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	80 ea       	ldi	r24, 0xA0	; 160
     636:	99 e0       	ldi	r25, 0x09	; 9
     638:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     63c:	8b e2       	ldi	r24, 0x2B	; 43
     63e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     640:	be 01       	movw	r22, r28
     642:	6f 5f       	subi	r22, 0xFF	; 255
     644:	7f 4f       	sbci	r23, 0xFF	; 255
     646:	80 ea       	ldi	r24, 0xA0	; 160
     648:	99 e0       	ldi	r25, 0x09	; 9
     64a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     654:	e0 ea       	ldi	r30, 0xA0	; 160
     656:	f9 e0       	ldi	r31, 0x09	; 9
     658:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     65a:	85 ff       	sbrs	r24, 5
     65c:	fd cf       	rjmp	.-6      	; 0x658 <st7565r_init+0x170>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     65e:	82 ea       	ldi	r24, 0xA2	; 162
     660:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     664:	e0 ea       	ldi	r30, 0xA0	; 160
     666:	f9 e0       	ldi	r31, 0x09	; 9
     668:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     66a:	86 ff       	sbrs	r24, 6
     66c:	fd cf       	rjmp	.-6      	; 0x668 <st7565r_init+0x180>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     66e:	e0 ea       	ldi	r30, 0xA0	; 160
     670:	f9 e0       	ldi	r31, 0x09	; 9
     672:	80 e4       	ldi	r24, 0x40	; 64
     674:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     676:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     678:	be 01       	movw	r22, r28
     67a:	6f 5f       	subi	r22, 0xFF	; 255
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	80 ea       	ldi	r24, 0xA0	; 160
     680:	99 e0       	ldi	r25, 0x09	; 9
     682:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     686:	8b e2       	ldi	r24, 0x2B	; 43
     688:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     68a:	be 01       	movw	r22, r28
     68c:	6f 5f       	subi	r22, 0xFF	; 255
     68e:	7f 4f       	sbci	r23, 0xFF	; 255
     690:	80 ea       	ldi	r24, 0xA0	; 160
     692:	99 e0       	ldi	r25, 0x09	; 9
     694:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     69e:	e0 ea       	ldi	r30, 0xA0	; 160
     6a0:	f9 e0       	ldi	r31, 0x09	; 9
     6a2:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6a4:	85 ff       	sbrs	r24, 5
     6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <st7565r_init+0x1ba>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6a8:	8f e2       	ldi	r24, 0x2F	; 47
     6aa:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6ae:	e0 ea       	ldi	r30, 0xA0	; 160
     6b0:	f9 e0       	ldi	r31, 0x09	; 9
     6b2:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6b4:	86 ff       	sbrs	r24, 6
     6b6:	fd cf       	rjmp	.-6      	; 0x6b2 <st7565r_init+0x1ca>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     6b8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ba:	f9 e0       	ldi	r31, 0x09	; 9
     6bc:	80 e4       	ldi	r24, 0x40	; 64
     6be:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     6c0:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     6c2:	be 01       	movw	r22, r28
     6c4:	6f 5f       	subi	r22, 0xFF	; 255
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255
     6c8:	80 ea       	ldi	r24, 0xA0	; 160
     6ca:	99 e0       	ldi	r25, 0x09	; 9
     6cc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     6d0:	8b e2       	ldi	r24, 0x2B	; 43
     6d2:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     6d4:	be 01       	movw	r22, r28
     6d6:	6f 5f       	subi	r22, 0xFF	; 255
     6d8:	7f 4f       	sbci	r23, 0xFF	; 255
     6da:	80 ea       	ldi	r24, 0xA0	; 160
     6dc:	99 e0       	ldi	r25, 0x09	; 9
     6de:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     6e8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ea:	f9 e0       	ldi	r31, 0x09	; 9
     6ec:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     6ee:	85 ff       	sbrs	r24, 5
     6f0:	fd cf       	rjmp	.-6      	; 0x6ec <st7565r_init+0x204>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     6f2:	88 ef       	ldi	r24, 0xF8	; 248
     6f4:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     6f8:	e0 ea       	ldi	r30, 0xA0	; 160
     6fa:	f9 e0       	ldi	r31, 0x09	; 9
     6fc:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     6fe:	86 ff       	sbrs	r24, 6
     700:	fd cf       	rjmp	.-6      	; 0x6fc <st7565r_init+0x214>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     702:	e0 ea       	ldi	r30, 0xA0	; 160
     704:	f9 e0       	ldi	r31, 0x09	; 9
     706:	80 e4       	ldi	r24, 0x40	; 64
     708:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     70a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     70c:	be 01       	movw	r22, r28
     70e:	6f 5f       	subi	r22, 0xFF	; 255
     710:	7f 4f       	sbci	r23, 0xFF	; 255
     712:	80 ea       	ldi	r24, 0xA0	; 160
     714:	99 e0       	ldi	r25, 0x09	; 9
     716:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     71a:	8b e2       	ldi	r24, 0x2B	; 43
     71c:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     71e:	be 01       	movw	r22, r28
     720:	6f 5f       	subi	r22, 0xFF	; 255
     722:	7f 4f       	sbci	r23, 0xFF	; 255
     724:	80 ea       	ldi	r24, 0xA0	; 160
     726:	99 e0       	ldi	r25, 0x09	; 9
     728:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     732:	e0 ea       	ldi	r30, 0xA0	; 160
     734:	f9 e0       	ldi	r31, 0x09	; 9
     736:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     738:	85 ff       	sbrs	r24, 5
     73a:	fd cf       	rjmp	.-6      	; 0x736 <st7565r_init+0x24e>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     73c:	10 92 a0 09 	sts	0x09A0, r1	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     740:	e0 ea       	ldi	r30, 0xA0	; 160
     742:	f9 e0       	ldi	r31, 0x09	; 9
     744:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     746:	86 ff       	sbrs	r24, 6
     748:	fd cf       	rjmp	.-6      	; 0x744 <st7565r_init+0x25c>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     74a:	e0 ea       	ldi	r30, 0xA0	; 160
     74c:	f9 e0       	ldi	r31, 0x09	; 9
     74e:	80 e4       	ldi	r24, 0x40	; 64
     750:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     752:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     754:	be 01       	movw	r22, r28
     756:	6f 5f       	subi	r22, 0xFF	; 255
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	80 ea       	ldi	r24, 0xA0	; 160
     75c:	99 e0       	ldi	r25, 0x09	; 9
     75e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     762:	8b e2       	ldi	r24, 0x2B	; 43
     764:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     766:	be 01       	movw	r22, r28
     768:	6f 5f       	subi	r22, 0xFF	; 255
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	80 ea       	ldi	r24, 0xA0	; 160
     76e:	99 e0       	ldi	r25, 0x09	; 9
     770:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     77a:	e0 ea       	ldi	r30, 0xA0	; 160
     77c:	f9 e0       	ldi	r31, 0x09	; 9
     77e:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     780:	85 ff       	sbrs	r24, 5
     782:	fd cf       	rjmp	.-6      	; 0x77e <st7565r_init+0x296>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     784:	81 e2       	ldi	r24, 0x21	; 33
     786:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     78a:	e0 ea       	ldi	r30, 0xA0	; 160
     78c:	f9 e0       	ldi	r31, 0x09	; 9
     78e:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     790:	86 ff       	sbrs	r24, 6
     792:	fd cf       	rjmp	.-6      	; 0x78e <st7565r_init+0x2a6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     794:	e0 ea       	ldi	r30, 0xA0	; 160
     796:	f9 e0       	ldi	r31, 0x09	; 9
     798:	80 e4       	ldi	r24, 0x40	; 64
     79a:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     79c:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     79e:	be 01       	movw	r22, r28
     7a0:	6f 5f       	subi	r22, 0xFF	; 255
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	80 ea       	ldi	r24, 0xA0	; 160
     7a6:	99 e0       	ldi	r25, 0x09	; 9
     7a8:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7ac:	8b e2       	ldi	r24, 0x2B	; 43
     7ae:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7b0:	be 01       	movw	r22, r28
     7b2:	6f 5f       	subi	r22, 0xFF	; 255
     7b4:	7f 4f       	sbci	r23, 0xFF	; 255
     7b6:	80 ea       	ldi	r24, 0xA0	; 160
     7b8:	99 e0       	ldi	r25, 0x09	; 9
     7ba:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     7c4:	e0 ea       	ldi	r30, 0xA0	; 160
     7c6:	f9 e0       	ldi	r31, 0x09	; 9
     7c8:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     7ca:	85 ff       	sbrs	r24, 5
     7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <st7565r_init+0x2e0>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     7ce:	81 e8       	ldi	r24, 0x81	; 129
     7d0:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     7d4:	e0 ea       	ldi	r30, 0xA0	; 160
     7d6:	f9 e0       	ldi	r31, 0x09	; 9
     7d8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     7da:	86 ff       	sbrs	r24, 6
     7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <st7565r_init+0x2f0>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     7de:	e0 ea       	ldi	r30, 0xA0	; 160
     7e0:	f9 e0       	ldi	r31, 0x09	; 9
     7e2:	80 e4       	ldi	r24, 0x40	; 64
     7e4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     7e6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     7e8:	be 01       	movw	r22, r28
     7ea:	6f 5f       	subi	r22, 0xFF	; 255
     7ec:	7f 4f       	sbci	r23, 0xFF	; 255
     7ee:	80 ea       	ldi	r24, 0xA0	; 160
     7f0:	99 e0       	ldi	r25, 0x09	; 9
     7f2:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     7f6:	8b e2       	ldi	r24, 0x2B	; 43
     7f8:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     7fa:	be 01       	movw	r22, r28
     7fc:	6f 5f       	subi	r22, 0xFF	; 255
     7fe:	7f 4f       	sbci	r23, 0xFF	; 255
     800:	80 ea       	ldi	r24, 0xA0	; 160
     802:	99 e0       	ldi	r25, 0x09	; 9
     804:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     80e:	e0 ea       	ldi	r30, 0xA0	; 160
     810:	f9 e0       	ldi	r31, 0x09	; 9
     812:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     814:	85 ff       	sbrs	r24, 5
     816:	fd cf       	rjmp	.-6      	; 0x812 <st7565r_init+0x32a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     818:	81 e2       	ldi	r24, 0x21	; 33
     81a:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     81e:	e0 ea       	ldi	r30, 0xA0	; 160
     820:	f9 e0       	ldi	r31, 0x09	; 9
     822:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     824:	86 ff       	sbrs	r24, 6
     826:	fd cf       	rjmp	.-6      	; 0x822 <st7565r_init+0x33a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     828:	e0 ea       	ldi	r30, 0xA0	; 160
     82a:	f9 e0       	ldi	r31, 0x09	; 9
     82c:	80 e4       	ldi	r24, 0x40	; 64
     82e:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     830:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     832:	be 01       	movw	r22, r28
     834:	6f 5f       	subi	r22, 0xFF	; 255
     836:	7f 4f       	sbci	r23, 0xFF	; 255
     838:	80 ea       	ldi	r24, 0xA0	; 160
     83a:	99 e0       	ldi	r25, 0x09	; 9
     83c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     840:	8b e2       	ldi	r24, 0x2B	; 43
     842:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     844:	be 01       	movw	r22, r28
     846:	6f 5f       	subi	r22, 0xFF	; 255
     848:	7f 4f       	sbci	r23, 0xFF	; 255
     84a:	80 ea       	ldi	r24, 0xA0	; 160
     84c:	99 e0       	ldi	r25, 0x09	; 9
     84e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     858:	e0 ea       	ldi	r30, 0xA0	; 160
     85a:	f9 e0       	ldi	r31, 0x09	; 9
     85c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     85e:	85 ff       	sbrs	r24, 5
     860:	fd cf       	rjmp	.-6      	; 0x85c <st7565r_init+0x374>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     862:	8f ea       	ldi	r24, 0xAF	; 175
     864:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     868:	e0 ea       	ldi	r30, 0xA0	; 160
     86a:	f9 e0       	ldi	r31, 0x09	; 9
     86c:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     86e:	86 ff       	sbrs	r24, 6
     870:	fd cf       	rjmp	.-6      	; 0x86c <st7565r_init+0x384>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     872:	e0 ea       	ldi	r30, 0xA0	; 160
     874:	f9 e0       	ldi	r31, 0x09	; 9
     876:	80 e4       	ldi	r24, 0x40	; 64
     878:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     87a:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     87c:	be 01       	movw	r22, r28
     87e:	6f 5f       	subi	r22, 0xFF	; 255
     880:	7f 4f       	sbci	r23, 0xFF	; 255
     882:	80 ea       	ldi	r24, 0xA0	; 160
     884:	99 e0       	ldi	r25, 0x09	; 9
     886:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     88a:	0f 90       	pop	r0
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	1f 91       	pop	r17
     892:	0f 91       	pop	r16
     894:	ff 90       	pop	r15
     896:	ef 90       	pop	r14
     898:	df 90       	pop	r13
     89a:	cf 90       	pop	r12
     89c:	bf 90       	pop	r11
     89e:	08 95       	ret

000008a0 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     8a0:	ff 92       	push	r15
     8a2:	0f 93       	push	r16
     8a4:	1f 93       	push	r17
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	1f 92       	push	r1
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	08 2f       	mov	r16, r24
     8b2:	f6 2e       	mov	r15, r22
     8b4:	14 2f       	mov	r17, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     8b6:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <gfx_mono_framebuffer_put_byte>
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     8ba:	0f 70       	andi	r16, 0x0F	; 15
     8bc:	00 6b       	ori	r16, 0xB0	; 176
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     8be:	8b e2       	ldi	r24, 0x2B	; 43
     8c0:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	80 ea       	ldi	r24, 0xA0	; 160
     8ca:	99 e0       	ldi	r25, 0x09	; 9
     8cc:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     8d6:	e0 ea       	ldi	r30, 0xA0	; 160
     8d8:	f9 e0       	ldi	r31, 0x09	; 9
     8da:	91 81       	ldd	r25, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     8dc:	95 ff       	sbrs	r25, 5
     8de:	fd cf       	rjmp	.-6      	; 0x8da <gfx_mono_st7565r_put_byte+0x3a>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     8e0:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     8e4:	e0 ea       	ldi	r30, 0xA0	; 160
     8e6:	f9 e0       	ldi	r31, 0x09	; 9
     8e8:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     8ea:	86 ff       	sbrs	r24, 6
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <gfx_mono_st7565r_put_byte+0x48>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     8ee:	e0 ea       	ldi	r30, 0xA0	; 160
     8f0:	f9 e0       	ldi	r31, 0x09	; 9
     8f2:	80 e4       	ldi	r24, 0x40	; 64
     8f4:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     8f6:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     8f8:	be 01       	movw	r22, r28
     8fa:	6f 5f       	subi	r22, 0xFF	; 255
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	80 ea       	ldi	r24, 0xA0	; 160
     900:	99 e0       	ldi	r25, 0x09	; 9
     902:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     906:	0f 2d       	mov	r16, r15
     908:	0f 77       	andi	r16, 0x7F	; 127
     90a:	02 95       	swap	r16
     90c:	0f 70       	andi	r16, 0x0F	; 15
     90e:	00 61       	ori	r16, 0x10	; 16
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     910:	8b e2       	ldi	r24, 0x2B	; 43
     912:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     914:	be 01       	movw	r22, r28
     916:	6f 5f       	subi	r22, 0xFF	; 255
     918:	7f 4f       	sbci	r23, 0xFF	; 255
     91a:	80 ea       	ldi	r24, 0xA0	; 160
     91c:	99 e0       	ldi	r25, 0x09	; 9
     91e:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     928:	e0 ea       	ldi	r30, 0xA0	; 160
     92a:	f9 e0       	ldi	r31, 0x09	; 9
     92c:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     92e:	85 ff       	sbrs	r24, 5
     930:	fd cf       	rjmp	.-6      	; 0x92c <gfx_mono_st7565r_put_byte+0x8c>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     932:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     936:	e0 ea       	ldi	r30, 0xA0	; 160
     938:	f9 e0       	ldi	r31, 0x09	; 9
     93a:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     93c:	86 ff       	sbrs	r24, 6
     93e:	fd cf       	rjmp	.-6      	; 0x93a <gfx_mono_st7565r_put_byte+0x9a>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     940:	e0 ea       	ldi	r30, 0xA0	; 160
     942:	f9 e0       	ldi	r31, 0x09	; 9
     944:	80 e4       	ldi	r24, 0x40	; 64
     946:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     948:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     94a:	be 01       	movw	r22, r28
     94c:	6f 5f       	subi	r22, 0xFF	; 255
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	80 ea       	ldi	r24, 0xA0	; 160
     952:	99 e0       	ldi	r25, 0x09	; 9
     954:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     958:	0f 2d       	mov	r16, r15
     95a:	0f 70       	andi	r16, 0x0F	; 15
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     95c:	8b e2       	ldi	r24, 0x2B	; 43
     95e:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     960:	be 01       	movw	r22, r28
     962:	6f 5f       	subi	r22, 0xFF	; 255
     964:	7f 4f       	sbci	r23, 0xFF	; 255
     966:	80 ea       	ldi	r24, 0xA0	; 160
     968:	99 e0       	ldi	r25, 0x09	; 9
     96a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     974:	e0 ea       	ldi	r30, 0xA0	; 160
     976:	f9 e0       	ldi	r31, 0x09	; 9
     978:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     97a:	85 ff       	sbrs	r24, 5
     97c:	fd cf       	rjmp	.-6      	; 0x978 <gfx_mono_st7565r_put_byte+0xd8>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     97e:	00 93 a0 09 	sts	0x09A0, r16	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     982:	e0 ea       	ldi	r30, 0xA0	; 160
     984:	f9 e0       	ldi	r31, 0x09	; 9
     986:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     988:	86 ff       	sbrs	r24, 6
     98a:	fd cf       	rjmp	.-6      	; 0x986 <gfx_mono_st7565r_put_byte+0xe6>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     98c:	e0 ea       	ldi	r30, 0xA0	; 160
     98e:	f9 e0       	ldi	r31, 0x09	; 9
     990:	80 e4       	ldi	r24, 0x40	; 64
     992:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     994:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     996:	be 01       	movw	r22, r28
     998:	6f 5f       	subi	r22, 0xFF	; 255
     99a:	7f 4f       	sbci	r23, 0xFF	; 255
     99c:	80 ea       	ldi	r24, 0xA0	; 160
     99e:	99 e0       	ldi	r25, 0x09	; 9
     9a0:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     9a4:	8b e2       	ldi	r24, 0x2B	; 43
     9a6:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     9a8:	be 01       	movw	r22, r28
     9aa:	6f 5f       	subi	r22, 0xFF	; 255
     9ac:	7f 4f       	sbci	r23, 0xFF	; 255
     9ae:	80 ea       	ldi	r24, 0xA0	; 160
     9b0:	99 e0       	ldi	r25, 0x09	; 9
     9b2:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     9bc:	e0 ea       	ldi	r30, 0xA0	; 160
     9be:	f9 e0       	ldi	r31, 0x09	; 9
     9c0:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     9c2:	85 ff       	sbrs	r24, 5
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <gfx_mono_st7565r_put_byte+0x120>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     9c6:	10 93 a0 09 	sts	0x09A0, r17	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     9ca:	e0 ea       	ldi	r30, 0xA0	; 160
     9cc:	f9 e0       	ldi	r31, 0x09	; 9
     9ce:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     9d0:	86 ff       	sbrs	r24, 6
     9d2:	fd cf       	rjmp	.-6      	; 0x9ce <gfx_mono_st7565r_put_byte+0x12e>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     9d4:	e0 ea       	ldi	r30, 0xA0	; 160
     9d6:	f9 e0       	ldi	r31, 0x09	; 9
     9d8:	80 e4       	ldi	r24, 0x40	; 64
     9da:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     9dc:	80 81       	ld	r24, Z
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	ioport_set_pin_high(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, data);
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     9e4:	be 01       	movw	r22, r28
     9e6:	6f 5f       	subi	r22, 0xFF	; 255
     9e8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ea:	80 ea       	ldi	r24, 0xA0	; 160
     9ec:	99 e0       	ldi	r25, 0x09	; 9
     9ee:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     9f2:	0f 90       	pop	r0
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	ff 90       	pop	r15
     9fe:	08 95       	ret

00000a00 <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	1f 92       	push	r1
     a0a:	cd b7       	in	r28, 0x3d	; 61
     a0c:	de b7       	in	r29, 0x3e	; 62
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     a0e:	88 e1       	ldi	r24, 0x18	; 24
     a10:	90 e2       	ldi	r25, 0x20	; 32
     a12:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     a16:	68 dd       	rcall	.-1328   	; 0x4e8 <st7565r_init>
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
#if defined(ST7565R_USART_SPI_INTERFACE)
	struct usart_spi_device device = {.id = ST7565R_CS_PIN};
     a18:	8b e2       	ldi	r24, 0x2B	; 43
     a1a:	89 83       	std	Y+1, r24	; 0x01
	usart_spi_select_device(ST7565R_USART_SPI, &device);
     a1c:	be 01       	movw	r22, r28
     a1e:	6f 5f       	subi	r22, 0xFF	; 255
     a20:	7f 4f       	sbci	r23, 0xFF	; 255
     a22:	80 ea       	ldi	r24, 0xA0	; 160
     a24:	99 e0       	ldi	r25, 0x09	; 9
     a26:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <usart_spi_select_device>
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
 *
 * \param usart The USART module.
 */
static inline bool usart_data_register_is_empty(USART_t * usart)
{
	return (usart)->STATUS & USART_DREIF_bm;
     a30:	e0 ea       	ldi	r30, 0xA0	; 160
     a32:	f9 e0       	ldi	r31, 0x09	; 9
     a34:	81 81       	ldd	r24, Z+1	; 0x01
 * \return The received data
 */
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
     a36:	85 ff       	sbrs	r24, 5
     a38:	fd cf       	rjmp	.-6      	; 0xa34 <gfx_mono_st7565r_init+0x34>
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t * usart, uint8_t txdata)
{
	(usart)->DATA = txdata;
     a3a:	80 e4       	ldi	r24, 0x40	; 64
     a3c:	80 93 a0 09 	sts	0x09A0, r24	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
 *
 * \param usart The USART module.
 */
static inline bool usart_tx_is_complete(USART_t * usart)
{
	return (usart)->STATUS & USART_TXCIF_bm;
     a40:	e0 ea       	ldi	r30, 0xA0	; 160
     a42:	f9 e0       	ldi	r31, 0x09	; 9
     a44:	81 81       	ldd	r24, Z+1	; 0x01
static inline uint8_t usart_spi_transmit(USART_t * usart,
		uint8_t txdata)
{
	while (usart_data_register_is_empty(usart) == false);
	usart_put(usart, txdata);
	while (!usart_tx_is_complete(usart));
     a46:	86 ff       	sbrs	r24, 6
     a48:	fd cf       	rjmp	.-6      	; 0xa44 <gfx_mono_st7565r_init+0x44>
 *
 * \param usart The USART module.
 */
static inline void usart_clear_tx_complete(USART_t * usart)
{
	(usart)->STATUS = USART_TXCIF_bm;
     a4a:	e0 ea       	ldi	r30, 0xA0	; 160
     a4c:	f9 e0       	ldi	r31, 0x09	; 9
     a4e:	80 e4       	ldi	r24, 0x40	; 64
     a50:	81 83       	std	Z+1, r24	; 0x01
 *
 * \return The received data
 */
static inline uint8_t usart_get(USART_t * usart)
{
	return (usart)->DATA;
     a52:	80 81       	ld	r24, Z
	ioport_set_pin_low(ST7565R_A0_PIN);
	usart_spi_transmit(ST7565R_USART_SPI, command);
	usart_spi_deselect_device(ST7565R_USART_SPI, &device);
     a54:	be 01       	movw	r22, r28
     a56:	6f 5f       	subi	r22, 0xFF	; 255
     a58:	7f 4f       	sbci	r23, 0xFF	; 255
     a5a:	80 ea       	ldi	r24, 0xA0	; 160
     a5c:	99 e0       	ldi	r25, 0x09	; 9
     a5e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <usart_spi_deselect_device>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a62:	00 e0       	ldi	r16, 0x00	; 0
     a64:	0a c0       	rjmp	.+20     	; 0xa7a <gfx_mono_st7565r_init+0x7a>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	61 2f       	mov	r22, r17
     a6a:	80 2f       	mov	r24, r16
     a6c:	19 df       	rcall	.-462    	; 0x8a0 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     a6e:	1f 5f       	subi	r17, 0xFF	; 255
     a70:	10 38       	cpi	r17, 0x80	; 128
     a72:	c9 f7       	brne	.-14     	; 0xa66 <gfx_mono_st7565r_init+0x66>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     a74:	0f 5f       	subi	r16, 0xFF	; 255
     a76:	04 30       	cpi	r16, 0x04	; 4
     a78:	11 f0       	breq	.+4      	; 0xa7e <gfx_mono_st7565r_init+0x7e>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     a7a:	10 e0       	ldi	r17, 0x00	; 0
     a7c:	f4 cf       	rjmp	.-24     	; 0xa66 <gfx_mono_st7565r_init+0x66>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     a7e:	0f 90       	pop	r0
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	08 95       	ret

00000a8a <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     a94:	88 23       	and	r24, r24
     a96:	54 f1       	brlt	.+84     	; 0xaec <gfx_mono_st7565r_draw_pixel+0x62>
     a98:	60 32       	cpi	r22, 0x20	; 32
     a9a:	40 f5       	brcc	.+80     	; 0xaec <gfx_mono_st7565r_draw_pixel+0x62>
     a9c:	d4 2f       	mov	r29, r20
     a9e:	c8 2f       	mov	r28, r24
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     aa0:	f6 2e       	mov	r15, r22
     aa2:	f6 94       	lsr	r15
     aa4:	f6 94       	lsr	r15
     aa6:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	88 e0       	ldi	r24, 0x08	; 8
     aac:	f8 9e       	mul	r15, r24
     aae:	60 19       	sub	r22, r0
     ab0:	71 09       	sbc	r23, r1
     ab2:	11 24       	eor	r1, r1
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	8c 01       	movw	r16, r24
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <gfx_mono_st7565r_draw_pixel+0x36>
     abc:	00 0f       	add	r16, r16
     abe:	11 1f       	adc	r17, r17
     ac0:	6a 95       	dec	r22
     ac2:	e2 f7       	brpl	.-8      	; 0xabc <gfx_mono_st7565r_draw_pixel+0x32>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     ac4:	6c 2f       	mov	r22, r28
     ac6:	8f 2d       	mov	r24, r15
     ac8:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     acc:	d1 30       	cpi	r29, 0x01	; 1
     ace:	21 f0       	breq	.+8      	; 0xad8 <gfx_mono_st7565r_draw_pixel+0x4e>
     ad0:	28 f0       	brcs	.+10     	; 0xadc <gfx_mono_st7565r_draw_pixel+0x52>
     ad2:	d2 30       	cpi	r29, 0x02	; 2
     ad4:	31 f0       	breq	.+12     	; 0xae2 <gfx_mono_st7565r_draw_pixel+0x58>
     ad6:	06 c0       	rjmp	.+12     	; 0xae4 <gfx_mono_st7565r_draw_pixel+0x5a>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     ad8:	80 2b       	or	r24, r16
		break;
     ada:	04 c0       	rjmp	.+8      	; 0xae4 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     adc:	00 95       	com	r16
     ade:	80 23       	and	r24, r16
		break;
     ae0:	01 c0       	rjmp	.+2      	; 0xae4 <gfx_mono_st7565r_draw_pixel+0x5a>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     ae2:	80 27       	eor	r24, r16

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     ae4:	48 2f       	mov	r20, r24
     ae6:	6c 2f       	mov	r22, r28
     ae8:	8f 2d       	mov	r24, r15
     aea:	da de       	rcall	.-588    	; 0x8a0 <gfx_mono_st7565r_put_byte>
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	08 95       	ret

00000af8 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     af8:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     afc:	08 95       	ret

00000afe <__vector_14>:
	{
		cpu_irq_restore(iflags);
		return;
	}
	cpu_irq_restore(iflags);
}
     afe:	1f 92       	push	r1
     b00:	0f 92       	push	r0
     b02:	0f b6       	in	r0, 0x3f	; 63
     b04:	0f 92       	push	r0
     b06:	11 24       	eor	r1, r1
     b08:	0b b6       	in	r0, 0x3b	; 59
     b0a:	0f 92       	push	r0
     b0c:	2f 93       	push	r18
     b0e:	3f 93       	push	r19
     b10:	4f 93       	push	r20
     b12:	5f 93       	push	r21
     b14:	6f 93       	push	r22
     b16:	7f 93       	push	r23
     b18:	8f 93       	push	r24
     b1a:	9f 93       	push	r25
     b1c:	af 93       	push	r26
     b1e:	bf 93       	push	r27
     b20:	ef 93       	push	r30
     b22:	ff 93       	push	r31
     b24:	e0 91 5e 22 	lds	r30, 0x225E	; 0x80225e <tc_tcc0_ovf_callback>
     b28:	f0 91 5f 22 	lds	r31, 0x225F	; 0x80225f <tc_tcc0_ovf_callback+0x1>
     b2c:	30 97       	sbiw	r30, 0x00	; 0
     b2e:	09 f0       	breq	.+2      	; 0xb32 <__vector_14+0x34>
     b30:	19 95       	eicall
     b32:	ff 91       	pop	r31
     b34:	ef 91       	pop	r30
     b36:	bf 91       	pop	r27
     b38:	af 91       	pop	r26
     b3a:	9f 91       	pop	r25
     b3c:	8f 91       	pop	r24
     b3e:	7f 91       	pop	r23
     b40:	6f 91       	pop	r22
     b42:	5f 91       	pop	r21
     b44:	4f 91       	pop	r20
     b46:	3f 91       	pop	r19
     b48:	2f 91       	pop	r18
     b4a:	0f 90       	pop	r0
     b4c:	0b be       	out	0x3b, r0	; 59
     b4e:	0f 90       	pop	r0
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	0f 90       	pop	r0
     b54:	1f 90       	pop	r1
     b56:	18 95       	reti

00000b58 <__vector_15>:
     b58:	1f 92       	push	r1
     b5a:	0f 92       	push	r0
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	0f 92       	push	r0
     b60:	11 24       	eor	r1, r1
     b62:	0b b6       	in	r0, 0x3b	; 59
     b64:	0f 92       	push	r0
     b66:	2f 93       	push	r18
     b68:	3f 93       	push	r19
     b6a:	4f 93       	push	r20
     b6c:	5f 93       	push	r21
     b6e:	6f 93       	push	r22
     b70:	7f 93       	push	r23
     b72:	8f 93       	push	r24
     b74:	9f 93       	push	r25
     b76:	af 93       	push	r26
     b78:	bf 93       	push	r27
     b7a:	ef 93       	push	r30
     b7c:	ff 93       	push	r31
     b7e:	e0 91 5c 22 	lds	r30, 0x225C	; 0x80225c <tc_tcc0_err_callback>
     b82:	f0 91 5d 22 	lds	r31, 0x225D	; 0x80225d <tc_tcc0_err_callback+0x1>
     b86:	30 97       	sbiw	r30, 0x00	; 0
     b88:	09 f0       	breq	.+2      	; 0xb8c <__vector_15+0x34>
     b8a:	19 95       	eicall
     b8c:	ff 91       	pop	r31
     b8e:	ef 91       	pop	r30
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	0f 90       	pop	r0
     ba6:	0b be       	out	0x3b, r0	; 59
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	0f 90       	pop	r0
     bae:	1f 90       	pop	r1
     bb0:	18 95       	reti

00000bb2 <__vector_16>:
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1
     bbc:	0b b6       	in	r0, 0x3b	; 59
     bbe:	0f 92       	push	r0
     bc0:	2f 93       	push	r18
     bc2:	3f 93       	push	r19
     bc4:	4f 93       	push	r20
     bc6:	5f 93       	push	r21
     bc8:	6f 93       	push	r22
     bca:	7f 93       	push	r23
     bcc:	8f 93       	push	r24
     bce:	9f 93       	push	r25
     bd0:	af 93       	push	r26
     bd2:	bf 93       	push	r27
     bd4:	ef 93       	push	r30
     bd6:	ff 93       	push	r31
     bd8:	e0 91 5a 22 	lds	r30, 0x225A	; 0x80225a <tc_tcc0_cca_callback>
     bdc:	f0 91 5b 22 	lds	r31, 0x225B	; 0x80225b <tc_tcc0_cca_callback+0x1>
     be0:	30 97       	sbiw	r30, 0x00	; 0
     be2:	09 f0       	breq	.+2      	; 0xbe6 <__vector_16+0x34>
     be4:	19 95       	eicall
     be6:	ff 91       	pop	r31
     be8:	ef 91       	pop	r30
     bea:	bf 91       	pop	r27
     bec:	af 91       	pop	r26
     bee:	9f 91       	pop	r25
     bf0:	8f 91       	pop	r24
     bf2:	7f 91       	pop	r23
     bf4:	6f 91       	pop	r22
     bf6:	5f 91       	pop	r21
     bf8:	4f 91       	pop	r20
     bfa:	3f 91       	pop	r19
     bfc:	2f 91       	pop	r18
     bfe:	0f 90       	pop	r0
     c00:	0b be       	out	0x3b, r0	; 59
     c02:	0f 90       	pop	r0
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	0f 90       	pop	r0
     c08:	1f 90       	pop	r1
     c0a:	18 95       	reti

00000c0c <__vector_17>:
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	0b b6       	in	r0, 0x3b	; 59
     c18:	0f 92       	push	r0
     c1a:	2f 93       	push	r18
     c1c:	3f 93       	push	r19
     c1e:	4f 93       	push	r20
     c20:	5f 93       	push	r21
     c22:	6f 93       	push	r22
     c24:	7f 93       	push	r23
     c26:	8f 93       	push	r24
     c28:	9f 93       	push	r25
     c2a:	af 93       	push	r26
     c2c:	bf 93       	push	r27
     c2e:	ef 93       	push	r30
     c30:	ff 93       	push	r31
     c32:	e0 91 58 22 	lds	r30, 0x2258	; 0x802258 <tc_tcc0_ccb_callback>
     c36:	f0 91 59 22 	lds	r31, 0x2259	; 0x802259 <tc_tcc0_ccb_callback+0x1>
     c3a:	30 97       	sbiw	r30, 0x00	; 0
     c3c:	09 f0       	breq	.+2      	; 0xc40 <__vector_17+0x34>
     c3e:	19 95       	eicall
     c40:	ff 91       	pop	r31
     c42:	ef 91       	pop	r30
     c44:	bf 91       	pop	r27
     c46:	af 91       	pop	r26
     c48:	9f 91       	pop	r25
     c4a:	8f 91       	pop	r24
     c4c:	7f 91       	pop	r23
     c4e:	6f 91       	pop	r22
     c50:	5f 91       	pop	r21
     c52:	4f 91       	pop	r20
     c54:	3f 91       	pop	r19
     c56:	2f 91       	pop	r18
     c58:	0f 90       	pop	r0
     c5a:	0b be       	out	0x3b, r0	; 59
     c5c:	0f 90       	pop	r0
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	0f 90       	pop	r0
     c62:	1f 90       	pop	r1
     c64:	18 95       	reti

00000c66 <__vector_18>:
     c66:	1f 92       	push	r1
     c68:	0f 92       	push	r0
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	0f 92       	push	r0
     c6e:	11 24       	eor	r1, r1
     c70:	0b b6       	in	r0, 0x3b	; 59
     c72:	0f 92       	push	r0
     c74:	2f 93       	push	r18
     c76:	3f 93       	push	r19
     c78:	4f 93       	push	r20
     c7a:	5f 93       	push	r21
     c7c:	6f 93       	push	r22
     c7e:	7f 93       	push	r23
     c80:	8f 93       	push	r24
     c82:	9f 93       	push	r25
     c84:	af 93       	push	r26
     c86:	bf 93       	push	r27
     c88:	ef 93       	push	r30
     c8a:	ff 93       	push	r31
     c8c:	e0 91 56 22 	lds	r30, 0x2256	; 0x802256 <tc_tcc0_ccc_callback>
     c90:	f0 91 57 22 	lds	r31, 0x2257	; 0x802257 <tc_tcc0_ccc_callback+0x1>
     c94:	30 97       	sbiw	r30, 0x00	; 0
     c96:	09 f0       	breq	.+2      	; 0xc9a <__vector_18+0x34>
     c98:	19 95       	eicall
     c9a:	ff 91       	pop	r31
     c9c:	ef 91       	pop	r30
     c9e:	bf 91       	pop	r27
     ca0:	af 91       	pop	r26
     ca2:	9f 91       	pop	r25
     ca4:	8f 91       	pop	r24
     ca6:	7f 91       	pop	r23
     ca8:	6f 91       	pop	r22
     caa:	5f 91       	pop	r21
     cac:	4f 91       	pop	r20
     cae:	3f 91       	pop	r19
     cb0:	2f 91       	pop	r18
     cb2:	0f 90       	pop	r0
     cb4:	0b be       	out	0x3b, r0	; 59
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	0f 90       	pop	r0
     cbc:	1f 90       	pop	r1
     cbe:	18 95       	reti

00000cc0 <__vector_19>:
     cc0:	1f 92       	push	r1
     cc2:	0f 92       	push	r0
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	0f 92       	push	r0
     cc8:	11 24       	eor	r1, r1
     cca:	0b b6       	in	r0, 0x3b	; 59
     ccc:	0f 92       	push	r0
     cce:	2f 93       	push	r18
     cd0:	3f 93       	push	r19
     cd2:	4f 93       	push	r20
     cd4:	5f 93       	push	r21
     cd6:	6f 93       	push	r22
     cd8:	7f 93       	push	r23
     cda:	8f 93       	push	r24
     cdc:	9f 93       	push	r25
     cde:	af 93       	push	r26
     ce0:	bf 93       	push	r27
     ce2:	ef 93       	push	r30
     ce4:	ff 93       	push	r31
     ce6:	e0 91 54 22 	lds	r30, 0x2254	; 0x802254 <tc_tcc0_ccd_callback>
     cea:	f0 91 55 22 	lds	r31, 0x2255	; 0x802255 <tc_tcc0_ccd_callback+0x1>
     cee:	30 97       	sbiw	r30, 0x00	; 0
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <__vector_19+0x34>
     cf2:	19 95       	eicall
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0b be       	out	0x3b, r0	; 59
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	1f 90       	pop	r1
     d18:	18 95       	reti

00000d1a <__vector_20>:
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	0b b6       	in	r0, 0x3b	; 59
     d26:	0f 92       	push	r0
     d28:	2f 93       	push	r18
     d2a:	3f 93       	push	r19
     d2c:	4f 93       	push	r20
     d2e:	5f 93       	push	r21
     d30:	6f 93       	push	r22
     d32:	7f 93       	push	r23
     d34:	8f 93       	push	r24
     d36:	9f 93       	push	r25
     d38:	af 93       	push	r26
     d3a:	bf 93       	push	r27
     d3c:	ef 93       	push	r30
     d3e:	ff 93       	push	r31
     d40:	e0 91 52 22 	lds	r30, 0x2252	; 0x802252 <tc_tcc1_ovf_callback>
     d44:	f0 91 53 22 	lds	r31, 0x2253	; 0x802253 <tc_tcc1_ovf_callback+0x1>
     d48:	30 97       	sbiw	r30, 0x00	; 0
     d4a:	09 f0       	breq	.+2      	; 0xd4e <__vector_20+0x34>
     d4c:	19 95       	eicall
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0b be       	out	0x3b, r0	; 59
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__vector_21>:
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	0b b6       	in	r0, 0x3b	; 59
     d80:	0f 92       	push	r0
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	e0 91 50 22 	lds	r30, 0x2250	; 0x802250 <tc_tcc1_err_callback>
     d9e:	f0 91 51 22 	lds	r31, 0x2251	; 0x802251 <tc_tcc1_err_callback+0x1>
     da2:	30 97       	sbiw	r30, 0x00	; 0
     da4:	09 f0       	breq	.+2      	; 0xda8 <__vector_21+0x34>
     da6:	19 95       	eicall
     da8:	ff 91       	pop	r31
     daa:	ef 91       	pop	r30
     dac:	bf 91       	pop	r27
     dae:	af 91       	pop	r26
     db0:	9f 91       	pop	r25
     db2:	8f 91       	pop	r24
     db4:	7f 91       	pop	r23
     db6:	6f 91       	pop	r22
     db8:	5f 91       	pop	r21
     dba:	4f 91       	pop	r20
     dbc:	3f 91       	pop	r19
     dbe:	2f 91       	pop	r18
     dc0:	0f 90       	pop	r0
     dc2:	0b be       	out	0x3b, r0	; 59
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_22>:
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	0b b6       	in	r0, 0x3b	; 59
     dda:	0f 92       	push	r0
     ddc:	2f 93       	push	r18
     dde:	3f 93       	push	r19
     de0:	4f 93       	push	r20
     de2:	5f 93       	push	r21
     de4:	6f 93       	push	r22
     de6:	7f 93       	push	r23
     de8:	8f 93       	push	r24
     dea:	9f 93       	push	r25
     dec:	af 93       	push	r26
     dee:	bf 93       	push	r27
     df0:	ef 93       	push	r30
     df2:	ff 93       	push	r31
     df4:	e0 91 4e 22 	lds	r30, 0x224E	; 0x80224e <tc_tcc1_cca_callback>
     df8:	f0 91 4f 22 	lds	r31, 0x224F	; 0x80224f <tc_tcc1_cca_callback+0x1>
     dfc:	30 97       	sbiw	r30, 0x00	; 0
     dfe:	09 f0       	breq	.+2      	; 0xe02 <__vector_22+0x34>
     e00:	19 95       	eicall
     e02:	ff 91       	pop	r31
     e04:	ef 91       	pop	r30
     e06:	bf 91       	pop	r27
     e08:	af 91       	pop	r26
     e0a:	9f 91       	pop	r25
     e0c:	8f 91       	pop	r24
     e0e:	7f 91       	pop	r23
     e10:	6f 91       	pop	r22
     e12:	5f 91       	pop	r21
     e14:	4f 91       	pop	r20
     e16:	3f 91       	pop	r19
     e18:	2f 91       	pop	r18
     e1a:	0f 90       	pop	r0
     e1c:	0b be       	out	0x3b, r0	; 59
     e1e:	0f 90       	pop	r0
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	0f 90       	pop	r0
     e24:	1f 90       	pop	r1
     e26:	18 95       	reti

00000e28 <__vector_23>:
     e28:	1f 92       	push	r1
     e2a:	0f 92       	push	r0
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	0f 92       	push	r0
     e30:	11 24       	eor	r1, r1
     e32:	0b b6       	in	r0, 0x3b	; 59
     e34:	0f 92       	push	r0
     e36:	2f 93       	push	r18
     e38:	3f 93       	push	r19
     e3a:	4f 93       	push	r20
     e3c:	5f 93       	push	r21
     e3e:	6f 93       	push	r22
     e40:	7f 93       	push	r23
     e42:	8f 93       	push	r24
     e44:	9f 93       	push	r25
     e46:	af 93       	push	r26
     e48:	bf 93       	push	r27
     e4a:	ef 93       	push	r30
     e4c:	ff 93       	push	r31
     e4e:	e0 91 4c 22 	lds	r30, 0x224C	; 0x80224c <tc_tcc1_ccb_callback>
     e52:	f0 91 4d 22 	lds	r31, 0x224D	; 0x80224d <tc_tcc1_ccb_callback+0x1>
     e56:	30 97       	sbiw	r30, 0x00	; 0
     e58:	09 f0       	breq	.+2      	; 0xe5c <__vector_23+0x34>
     e5a:	19 95       	eicall
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0b be       	out	0x3b, r0	; 59
     e78:	0f 90       	pop	r0
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	0f 90       	pop	r0
     e7e:	1f 90       	pop	r1
     e80:	18 95       	reti

00000e82 <__vector_77>:
     e82:	1f 92       	push	r1
     e84:	0f 92       	push	r0
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	0f 92       	push	r0
     e8a:	11 24       	eor	r1, r1
     e8c:	0b b6       	in	r0, 0x3b	; 59
     e8e:	0f 92       	push	r0
     e90:	2f 93       	push	r18
     e92:	3f 93       	push	r19
     e94:	4f 93       	push	r20
     e96:	5f 93       	push	r21
     e98:	6f 93       	push	r22
     e9a:	7f 93       	push	r23
     e9c:	8f 93       	push	r24
     e9e:	9f 93       	push	r25
     ea0:	af 93       	push	r26
     ea2:	bf 93       	push	r27
     ea4:	ef 93       	push	r30
     ea6:	ff 93       	push	r31
     ea8:	e0 91 4a 22 	lds	r30, 0x224A	; 0x80224a <tc_tcd0_ovf_callback>
     eac:	f0 91 4b 22 	lds	r31, 0x224B	; 0x80224b <tc_tcd0_ovf_callback+0x1>
     eb0:	30 97       	sbiw	r30, 0x00	; 0
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <__vector_77+0x34>
     eb4:	19 95       	eicall
     eb6:	ff 91       	pop	r31
     eb8:	ef 91       	pop	r30
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	7f 91       	pop	r23
     ec4:	6f 91       	pop	r22
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0b be       	out	0x3b, r0	; 59
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	0f 90       	pop	r0
     ed8:	1f 90       	pop	r1
     eda:	18 95       	reti

00000edc <__vector_78>:
     edc:	1f 92       	push	r1
     ede:	0f 92       	push	r0
     ee0:	0f b6       	in	r0, 0x3f	; 63
     ee2:	0f 92       	push	r0
     ee4:	11 24       	eor	r1, r1
     ee6:	0b b6       	in	r0, 0x3b	; 59
     ee8:	0f 92       	push	r0
     eea:	2f 93       	push	r18
     eec:	3f 93       	push	r19
     eee:	4f 93       	push	r20
     ef0:	5f 93       	push	r21
     ef2:	6f 93       	push	r22
     ef4:	7f 93       	push	r23
     ef6:	8f 93       	push	r24
     ef8:	9f 93       	push	r25
     efa:	af 93       	push	r26
     efc:	bf 93       	push	r27
     efe:	ef 93       	push	r30
     f00:	ff 93       	push	r31
     f02:	e0 91 48 22 	lds	r30, 0x2248	; 0x802248 <tc_tcd0_err_callback>
     f06:	f0 91 49 22 	lds	r31, 0x2249	; 0x802249 <tc_tcd0_err_callback+0x1>
     f0a:	30 97       	sbiw	r30, 0x00	; 0
     f0c:	09 f0       	breq	.+2      	; 0xf10 <__vector_78+0x34>
     f0e:	19 95       	eicall
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	0f 90       	pop	r0
     f2a:	0b be       	out	0x3b, r0	; 59
     f2c:	0f 90       	pop	r0
     f2e:	0f be       	out	0x3f, r0	; 63
     f30:	0f 90       	pop	r0
     f32:	1f 90       	pop	r1
     f34:	18 95       	reti

00000f36 <__vector_79>:
     f36:	1f 92       	push	r1
     f38:	0f 92       	push	r0
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	0f 92       	push	r0
     f3e:	11 24       	eor	r1, r1
     f40:	0b b6       	in	r0, 0x3b	; 59
     f42:	0f 92       	push	r0
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
     f5c:	e0 91 46 22 	lds	r30, 0x2246	; 0x802246 <tc_tcd0_cca_callback>
     f60:	f0 91 47 22 	lds	r31, 0x2247	; 0x802247 <tc_tcd0_cca_callback+0x1>
     f64:	30 97       	sbiw	r30, 0x00	; 0
     f66:	09 f0       	breq	.+2      	; 0xf6a <__vector_79+0x34>
     f68:	19 95       	eicall
     f6a:	ff 91       	pop	r31
     f6c:	ef 91       	pop	r30
     f6e:	bf 91       	pop	r27
     f70:	af 91       	pop	r26
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	7f 91       	pop	r23
     f78:	6f 91       	pop	r22
     f7a:	5f 91       	pop	r21
     f7c:	4f 91       	pop	r20
     f7e:	3f 91       	pop	r19
     f80:	2f 91       	pop	r18
     f82:	0f 90       	pop	r0
     f84:	0b be       	out	0x3b, r0	; 59
     f86:	0f 90       	pop	r0
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	0f 90       	pop	r0
     f8c:	1f 90       	pop	r1
     f8e:	18 95       	reti

00000f90 <__vector_80>:
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	0b b6       	in	r0, 0x3b	; 59
     f9c:	0f 92       	push	r0
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
     fb6:	e0 91 44 22 	lds	r30, 0x2244	; 0x802244 <tc_tcd0_ccb_callback>
     fba:	f0 91 45 22 	lds	r31, 0x2245	; 0x802245 <tc_tcd0_ccb_callback+0x1>
     fbe:	30 97       	sbiw	r30, 0x00	; 0
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <__vector_80+0x34>
     fc2:	19 95       	eicall
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0b be       	out	0x3b, r0	; 59
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <__vector_81>:
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	0b b6       	in	r0, 0x3b	; 59
     ff6:	0f 92       	push	r0
     ff8:	2f 93       	push	r18
     ffa:	3f 93       	push	r19
     ffc:	4f 93       	push	r20
     ffe:	5f 93       	push	r21
    1000:	6f 93       	push	r22
    1002:	7f 93       	push	r23
    1004:	8f 93       	push	r24
    1006:	9f 93       	push	r25
    1008:	af 93       	push	r26
    100a:	bf 93       	push	r27
    100c:	ef 93       	push	r30
    100e:	ff 93       	push	r31
    1010:	e0 91 42 22 	lds	r30, 0x2242	; 0x802242 <tc_tcd0_ccc_callback>
    1014:	f0 91 43 22 	lds	r31, 0x2243	; 0x802243 <tc_tcd0_ccc_callback+0x1>
    1018:	30 97       	sbiw	r30, 0x00	; 0
    101a:	09 f0       	breq	.+2      	; 0x101e <__vector_81+0x34>
    101c:	19 95       	eicall
    101e:	ff 91       	pop	r31
    1020:	ef 91       	pop	r30
    1022:	bf 91       	pop	r27
    1024:	af 91       	pop	r26
    1026:	9f 91       	pop	r25
    1028:	8f 91       	pop	r24
    102a:	7f 91       	pop	r23
    102c:	6f 91       	pop	r22
    102e:	5f 91       	pop	r21
    1030:	4f 91       	pop	r20
    1032:	3f 91       	pop	r19
    1034:	2f 91       	pop	r18
    1036:	0f 90       	pop	r0
    1038:	0b be       	out	0x3b, r0	; 59
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <__vector_82>:
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	0b b6       	in	r0, 0x3b	; 59
    1050:	0f 92       	push	r0
    1052:	2f 93       	push	r18
    1054:	3f 93       	push	r19
    1056:	4f 93       	push	r20
    1058:	5f 93       	push	r21
    105a:	6f 93       	push	r22
    105c:	7f 93       	push	r23
    105e:	8f 93       	push	r24
    1060:	9f 93       	push	r25
    1062:	af 93       	push	r26
    1064:	bf 93       	push	r27
    1066:	ef 93       	push	r30
    1068:	ff 93       	push	r31
    106a:	e0 91 40 22 	lds	r30, 0x2240	; 0x802240 <tc_tcd0_ccd_callback>
    106e:	f0 91 41 22 	lds	r31, 0x2241	; 0x802241 <tc_tcd0_ccd_callback+0x1>
    1072:	30 97       	sbiw	r30, 0x00	; 0
    1074:	09 f0       	breq	.+2      	; 0x1078 <__vector_82+0x34>
    1076:	19 95       	eicall
    1078:	ff 91       	pop	r31
    107a:	ef 91       	pop	r30
    107c:	bf 91       	pop	r27
    107e:	af 91       	pop	r26
    1080:	9f 91       	pop	r25
    1082:	8f 91       	pop	r24
    1084:	7f 91       	pop	r23
    1086:	6f 91       	pop	r22
    1088:	5f 91       	pop	r21
    108a:	4f 91       	pop	r20
    108c:	3f 91       	pop	r19
    108e:	2f 91       	pop	r18
    1090:	0f 90       	pop	r0
    1092:	0b be       	out	0x3b, r0	; 59
    1094:	0f 90       	pop	r0
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	0f 90       	pop	r0
    109a:	1f 90       	pop	r1
    109c:	18 95       	reti

0000109e <__vector_83>:
    109e:	1f 92       	push	r1
    10a0:	0f 92       	push	r0
    10a2:	0f b6       	in	r0, 0x3f	; 63
    10a4:	0f 92       	push	r0
    10a6:	11 24       	eor	r1, r1
    10a8:	0b b6       	in	r0, 0x3b	; 59
    10aa:	0f 92       	push	r0
    10ac:	2f 93       	push	r18
    10ae:	3f 93       	push	r19
    10b0:	4f 93       	push	r20
    10b2:	5f 93       	push	r21
    10b4:	6f 93       	push	r22
    10b6:	7f 93       	push	r23
    10b8:	8f 93       	push	r24
    10ba:	9f 93       	push	r25
    10bc:	af 93       	push	r26
    10be:	bf 93       	push	r27
    10c0:	ef 93       	push	r30
    10c2:	ff 93       	push	r31
    10c4:	e0 91 3e 22 	lds	r30, 0x223E	; 0x80223e <tc_tcd1_ovf_callback>
    10c8:	f0 91 3f 22 	lds	r31, 0x223F	; 0x80223f <tc_tcd1_ovf_callback+0x1>
    10cc:	30 97       	sbiw	r30, 0x00	; 0
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <__vector_83+0x34>
    10d0:	19 95       	eicall
    10d2:	ff 91       	pop	r31
    10d4:	ef 91       	pop	r30
    10d6:	bf 91       	pop	r27
    10d8:	af 91       	pop	r26
    10da:	9f 91       	pop	r25
    10dc:	8f 91       	pop	r24
    10de:	7f 91       	pop	r23
    10e0:	6f 91       	pop	r22
    10e2:	5f 91       	pop	r21
    10e4:	4f 91       	pop	r20
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	0b be       	out	0x3b, r0	; 59
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0
    10f4:	1f 90       	pop	r1
    10f6:	18 95       	reti

000010f8 <__vector_84>:
    10f8:	1f 92       	push	r1
    10fa:	0f 92       	push	r0
    10fc:	0f b6       	in	r0, 0x3f	; 63
    10fe:	0f 92       	push	r0
    1100:	11 24       	eor	r1, r1
    1102:	0b b6       	in	r0, 0x3b	; 59
    1104:	0f 92       	push	r0
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
    111e:	e0 91 3c 22 	lds	r30, 0x223C	; 0x80223c <tc_tcd1_err_callback>
    1122:	f0 91 3d 22 	lds	r31, 0x223D	; 0x80223d <tc_tcd1_err_callback+0x1>
    1126:	30 97       	sbiw	r30, 0x00	; 0
    1128:	09 f0       	breq	.+2      	; 0x112c <__vector_84+0x34>
    112a:	19 95       	eicall
    112c:	ff 91       	pop	r31
    112e:	ef 91       	pop	r30
    1130:	bf 91       	pop	r27
    1132:	af 91       	pop	r26
    1134:	9f 91       	pop	r25
    1136:	8f 91       	pop	r24
    1138:	7f 91       	pop	r23
    113a:	6f 91       	pop	r22
    113c:	5f 91       	pop	r21
    113e:	4f 91       	pop	r20
    1140:	3f 91       	pop	r19
    1142:	2f 91       	pop	r18
    1144:	0f 90       	pop	r0
    1146:	0b be       	out	0x3b, r0	; 59
    1148:	0f 90       	pop	r0
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	0f 90       	pop	r0
    114e:	1f 90       	pop	r1
    1150:	18 95       	reti

00001152 <__vector_85>:
    1152:	1f 92       	push	r1
    1154:	0f 92       	push	r0
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	0f 92       	push	r0
    115a:	11 24       	eor	r1, r1
    115c:	0b b6       	in	r0, 0x3b	; 59
    115e:	0f 92       	push	r0
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31
    1178:	e0 91 3a 22 	lds	r30, 0x223A	; 0x80223a <tc_tcd1_cca_callback>
    117c:	f0 91 3b 22 	lds	r31, 0x223B	; 0x80223b <tc_tcd1_cca_callback+0x1>
    1180:	30 97       	sbiw	r30, 0x00	; 0
    1182:	09 f0       	breq	.+2      	; 0x1186 <__vector_85+0x34>
    1184:	19 95       	eicall
    1186:	ff 91       	pop	r31
    1188:	ef 91       	pop	r30
    118a:	bf 91       	pop	r27
    118c:	af 91       	pop	r26
    118e:	9f 91       	pop	r25
    1190:	8f 91       	pop	r24
    1192:	7f 91       	pop	r23
    1194:	6f 91       	pop	r22
    1196:	5f 91       	pop	r21
    1198:	4f 91       	pop	r20
    119a:	3f 91       	pop	r19
    119c:	2f 91       	pop	r18
    119e:	0f 90       	pop	r0
    11a0:	0b be       	out	0x3b, r0	; 59
    11a2:	0f 90       	pop	r0
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	0f 90       	pop	r0
    11a8:	1f 90       	pop	r1
    11aa:	18 95       	reti

000011ac <__vector_86>:
    11ac:	1f 92       	push	r1
    11ae:	0f 92       	push	r0
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	0f 92       	push	r0
    11b4:	11 24       	eor	r1, r1
    11b6:	0b b6       	in	r0, 0x3b	; 59
    11b8:	0f 92       	push	r0
    11ba:	2f 93       	push	r18
    11bc:	3f 93       	push	r19
    11be:	4f 93       	push	r20
    11c0:	5f 93       	push	r21
    11c2:	6f 93       	push	r22
    11c4:	7f 93       	push	r23
    11c6:	8f 93       	push	r24
    11c8:	9f 93       	push	r25
    11ca:	af 93       	push	r26
    11cc:	bf 93       	push	r27
    11ce:	ef 93       	push	r30
    11d0:	ff 93       	push	r31
    11d2:	e0 91 38 22 	lds	r30, 0x2238	; 0x802238 <tc_tcd1_ccb_callback>
    11d6:	f0 91 39 22 	lds	r31, 0x2239	; 0x802239 <tc_tcd1_ccb_callback+0x1>
    11da:	30 97       	sbiw	r30, 0x00	; 0
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <__vector_86+0x34>
    11de:	19 95       	eicall
    11e0:	ff 91       	pop	r31
    11e2:	ef 91       	pop	r30
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	9f 91       	pop	r25
    11ea:	8f 91       	pop	r24
    11ec:	7f 91       	pop	r23
    11ee:	6f 91       	pop	r22
    11f0:	5f 91       	pop	r21
    11f2:	4f 91       	pop	r20
    11f4:	3f 91       	pop	r19
    11f6:	2f 91       	pop	r18
    11f8:	0f 90       	pop	r0
    11fa:	0b be       	out	0x3b, r0	; 59
    11fc:	0f 90       	pop	r0
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	0f 90       	pop	r0
    1202:	1f 90       	pop	r1
    1204:	18 95       	reti

00001206 <__vector_47>:
    1206:	1f 92       	push	r1
    1208:	0f 92       	push	r0
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	0f 92       	push	r0
    120e:	11 24       	eor	r1, r1
    1210:	0b b6       	in	r0, 0x3b	; 59
    1212:	0f 92       	push	r0
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
    122c:	e0 91 36 22 	lds	r30, 0x2236	; 0x802236 <tc_tce0_ovf_callback>
    1230:	f0 91 37 22 	lds	r31, 0x2237	; 0x802237 <tc_tce0_ovf_callback+0x1>
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	09 f0       	breq	.+2      	; 0x123a <__vector_47+0x34>
    1238:	19 95       	eicall
    123a:	ff 91       	pop	r31
    123c:	ef 91       	pop	r30
    123e:	bf 91       	pop	r27
    1240:	af 91       	pop	r26
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	7f 91       	pop	r23
    1248:	6f 91       	pop	r22
    124a:	5f 91       	pop	r21
    124c:	4f 91       	pop	r20
    124e:	3f 91       	pop	r19
    1250:	2f 91       	pop	r18
    1252:	0f 90       	pop	r0
    1254:	0b be       	out	0x3b, r0	; 59
    1256:	0f 90       	pop	r0
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	0f 90       	pop	r0
    125c:	1f 90       	pop	r1
    125e:	18 95       	reti

00001260 <__vector_48>:
    1260:	1f 92       	push	r1
    1262:	0f 92       	push	r0
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	0f 92       	push	r0
    1268:	11 24       	eor	r1, r1
    126a:	0b b6       	in	r0, 0x3b	; 59
    126c:	0f 92       	push	r0
    126e:	2f 93       	push	r18
    1270:	3f 93       	push	r19
    1272:	4f 93       	push	r20
    1274:	5f 93       	push	r21
    1276:	6f 93       	push	r22
    1278:	7f 93       	push	r23
    127a:	8f 93       	push	r24
    127c:	9f 93       	push	r25
    127e:	af 93       	push	r26
    1280:	bf 93       	push	r27
    1282:	ef 93       	push	r30
    1284:	ff 93       	push	r31
    1286:	e0 91 34 22 	lds	r30, 0x2234	; 0x802234 <tc_tce0_err_callback>
    128a:	f0 91 35 22 	lds	r31, 0x2235	; 0x802235 <tc_tce0_err_callback+0x1>
    128e:	30 97       	sbiw	r30, 0x00	; 0
    1290:	09 f0       	breq	.+2      	; 0x1294 <__vector_48+0x34>
    1292:	19 95       	eicall
    1294:	ff 91       	pop	r31
    1296:	ef 91       	pop	r30
    1298:	bf 91       	pop	r27
    129a:	af 91       	pop	r26
    129c:	9f 91       	pop	r25
    129e:	8f 91       	pop	r24
    12a0:	7f 91       	pop	r23
    12a2:	6f 91       	pop	r22
    12a4:	5f 91       	pop	r21
    12a6:	4f 91       	pop	r20
    12a8:	3f 91       	pop	r19
    12aa:	2f 91       	pop	r18
    12ac:	0f 90       	pop	r0
    12ae:	0b be       	out	0x3b, r0	; 59
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <__vector_49>:
    12ba:	1f 92       	push	r1
    12bc:	0f 92       	push	r0
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	0f 92       	push	r0
    12c2:	11 24       	eor	r1, r1
    12c4:	0b b6       	in	r0, 0x3b	; 59
    12c6:	0f 92       	push	r0
    12c8:	2f 93       	push	r18
    12ca:	3f 93       	push	r19
    12cc:	4f 93       	push	r20
    12ce:	5f 93       	push	r21
    12d0:	6f 93       	push	r22
    12d2:	7f 93       	push	r23
    12d4:	8f 93       	push	r24
    12d6:	9f 93       	push	r25
    12d8:	af 93       	push	r26
    12da:	bf 93       	push	r27
    12dc:	ef 93       	push	r30
    12de:	ff 93       	push	r31
    12e0:	e0 91 32 22 	lds	r30, 0x2232	; 0x802232 <tc_tce0_cca_callback>
    12e4:	f0 91 33 22 	lds	r31, 0x2233	; 0x802233 <tc_tce0_cca_callback+0x1>
    12e8:	30 97       	sbiw	r30, 0x00	; 0
    12ea:	09 f0       	breq	.+2      	; 0x12ee <__vector_49+0x34>
    12ec:	19 95       	eicall
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0b be       	out	0x3b, r0	; 59
    130a:	0f 90       	pop	r0
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	0f 90       	pop	r0
    1310:	1f 90       	pop	r1
    1312:	18 95       	reti

00001314 <__vector_50>:
    1314:	1f 92       	push	r1
    1316:	0f 92       	push	r0
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	0f 92       	push	r0
    131c:	11 24       	eor	r1, r1
    131e:	0b b6       	in	r0, 0x3b	; 59
    1320:	0f 92       	push	r0
    1322:	2f 93       	push	r18
    1324:	3f 93       	push	r19
    1326:	4f 93       	push	r20
    1328:	5f 93       	push	r21
    132a:	6f 93       	push	r22
    132c:	7f 93       	push	r23
    132e:	8f 93       	push	r24
    1330:	9f 93       	push	r25
    1332:	af 93       	push	r26
    1334:	bf 93       	push	r27
    1336:	ef 93       	push	r30
    1338:	ff 93       	push	r31
    133a:	e0 91 30 22 	lds	r30, 0x2230	; 0x802230 <tc_tce0_ccb_callback>
    133e:	f0 91 31 22 	lds	r31, 0x2231	; 0x802231 <tc_tce0_ccb_callback+0x1>
    1342:	30 97       	sbiw	r30, 0x00	; 0
    1344:	09 f0       	breq	.+2      	; 0x1348 <__vector_50+0x34>
    1346:	19 95       	eicall
    1348:	ff 91       	pop	r31
    134a:	ef 91       	pop	r30
    134c:	bf 91       	pop	r27
    134e:	af 91       	pop	r26
    1350:	9f 91       	pop	r25
    1352:	8f 91       	pop	r24
    1354:	7f 91       	pop	r23
    1356:	6f 91       	pop	r22
    1358:	5f 91       	pop	r21
    135a:	4f 91       	pop	r20
    135c:	3f 91       	pop	r19
    135e:	2f 91       	pop	r18
    1360:	0f 90       	pop	r0
    1362:	0b be       	out	0x3b, r0	; 59
    1364:	0f 90       	pop	r0
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	0f 90       	pop	r0
    136a:	1f 90       	pop	r1
    136c:	18 95       	reti

0000136e <__vector_51>:
    136e:	1f 92       	push	r1
    1370:	0f 92       	push	r0
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	0f 92       	push	r0
    1376:	11 24       	eor	r1, r1
    1378:	0b b6       	in	r0, 0x3b	; 59
    137a:	0f 92       	push	r0
    137c:	2f 93       	push	r18
    137e:	3f 93       	push	r19
    1380:	4f 93       	push	r20
    1382:	5f 93       	push	r21
    1384:	6f 93       	push	r22
    1386:	7f 93       	push	r23
    1388:	8f 93       	push	r24
    138a:	9f 93       	push	r25
    138c:	af 93       	push	r26
    138e:	bf 93       	push	r27
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    1394:	e0 91 2e 22 	lds	r30, 0x222E	; 0x80222e <tc_tce0_ccc_callback>
    1398:	f0 91 2f 22 	lds	r31, 0x222F	; 0x80222f <tc_tce0_ccc_callback+0x1>
    139c:	30 97       	sbiw	r30, 0x00	; 0
    139e:	09 f0       	breq	.+2      	; 0x13a2 <__vector_51+0x34>
    13a0:	19 95       	eicall
    13a2:	ff 91       	pop	r31
    13a4:	ef 91       	pop	r30
    13a6:	bf 91       	pop	r27
    13a8:	af 91       	pop	r26
    13aa:	9f 91       	pop	r25
    13ac:	8f 91       	pop	r24
    13ae:	7f 91       	pop	r23
    13b0:	6f 91       	pop	r22
    13b2:	5f 91       	pop	r21
    13b4:	4f 91       	pop	r20
    13b6:	3f 91       	pop	r19
    13b8:	2f 91       	pop	r18
    13ba:	0f 90       	pop	r0
    13bc:	0b be       	out	0x3b, r0	; 59
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <__vector_52>:
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	0b b6       	in	r0, 0x3b	; 59
    13d4:	0f 92       	push	r0
    13d6:	2f 93       	push	r18
    13d8:	3f 93       	push	r19
    13da:	4f 93       	push	r20
    13dc:	5f 93       	push	r21
    13de:	6f 93       	push	r22
    13e0:	7f 93       	push	r23
    13e2:	8f 93       	push	r24
    13e4:	9f 93       	push	r25
    13e6:	af 93       	push	r26
    13e8:	bf 93       	push	r27
    13ea:	ef 93       	push	r30
    13ec:	ff 93       	push	r31
    13ee:	e0 91 2c 22 	lds	r30, 0x222C	; 0x80222c <tc_tce0_ccd_callback>
    13f2:	f0 91 2d 22 	lds	r31, 0x222D	; 0x80222d <tc_tce0_ccd_callback+0x1>
    13f6:	30 97       	sbiw	r30, 0x00	; 0
    13f8:	09 f0       	breq	.+2      	; 0x13fc <__vector_52+0x34>
    13fa:	19 95       	eicall
    13fc:	ff 91       	pop	r31
    13fe:	ef 91       	pop	r30
    1400:	bf 91       	pop	r27
    1402:	af 91       	pop	r26
    1404:	9f 91       	pop	r25
    1406:	8f 91       	pop	r24
    1408:	7f 91       	pop	r23
    140a:	6f 91       	pop	r22
    140c:	5f 91       	pop	r21
    140e:	4f 91       	pop	r20
    1410:	3f 91       	pop	r19
    1412:	2f 91       	pop	r18
    1414:	0f 90       	pop	r0
    1416:	0b be       	out	0x3b, r0	; 59
    1418:	0f 90       	pop	r0
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	0f 90       	pop	r0
    141e:	1f 90       	pop	r1
    1420:	18 95       	reti

00001422 <__vector_53>:
    1422:	1f 92       	push	r1
    1424:	0f 92       	push	r0
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	0f 92       	push	r0
    142a:	11 24       	eor	r1, r1
    142c:	0b b6       	in	r0, 0x3b	; 59
    142e:	0f 92       	push	r0
    1430:	2f 93       	push	r18
    1432:	3f 93       	push	r19
    1434:	4f 93       	push	r20
    1436:	5f 93       	push	r21
    1438:	6f 93       	push	r22
    143a:	7f 93       	push	r23
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	e0 91 2a 22 	lds	r30, 0x222A	; 0x80222a <tc_tce1_ovf_callback>
    144c:	f0 91 2b 22 	lds	r31, 0x222B	; 0x80222b <tc_tce1_ovf_callback+0x1>
    1450:	30 97       	sbiw	r30, 0x00	; 0
    1452:	09 f0       	breq	.+2      	; 0x1456 <__vector_53+0x34>
    1454:	19 95       	eicall
    1456:	ff 91       	pop	r31
    1458:	ef 91       	pop	r30
    145a:	bf 91       	pop	r27
    145c:	af 91       	pop	r26
    145e:	9f 91       	pop	r25
    1460:	8f 91       	pop	r24
    1462:	7f 91       	pop	r23
    1464:	6f 91       	pop	r22
    1466:	5f 91       	pop	r21
    1468:	4f 91       	pop	r20
    146a:	3f 91       	pop	r19
    146c:	2f 91       	pop	r18
    146e:	0f 90       	pop	r0
    1470:	0b be       	out	0x3b, r0	; 59
    1472:	0f 90       	pop	r0
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	0f 90       	pop	r0
    1478:	1f 90       	pop	r1
    147a:	18 95       	reti

0000147c <__vector_54>:
    147c:	1f 92       	push	r1
    147e:	0f 92       	push	r0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	0f 92       	push	r0
    1484:	11 24       	eor	r1, r1
    1486:	0b b6       	in	r0, 0x3b	; 59
    1488:	0f 92       	push	r0
    148a:	2f 93       	push	r18
    148c:	3f 93       	push	r19
    148e:	4f 93       	push	r20
    1490:	5f 93       	push	r21
    1492:	6f 93       	push	r22
    1494:	7f 93       	push	r23
    1496:	8f 93       	push	r24
    1498:	9f 93       	push	r25
    149a:	af 93       	push	r26
    149c:	bf 93       	push	r27
    149e:	ef 93       	push	r30
    14a0:	ff 93       	push	r31
    14a2:	e0 91 28 22 	lds	r30, 0x2228	; 0x802228 <tc_tce1_err_callback>
    14a6:	f0 91 29 22 	lds	r31, 0x2229	; 0x802229 <tc_tce1_err_callback+0x1>
    14aa:	30 97       	sbiw	r30, 0x00	; 0
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <__vector_54+0x34>
    14ae:	19 95       	eicall
    14b0:	ff 91       	pop	r31
    14b2:	ef 91       	pop	r30
    14b4:	bf 91       	pop	r27
    14b6:	af 91       	pop	r26
    14b8:	9f 91       	pop	r25
    14ba:	8f 91       	pop	r24
    14bc:	7f 91       	pop	r23
    14be:	6f 91       	pop	r22
    14c0:	5f 91       	pop	r21
    14c2:	4f 91       	pop	r20
    14c4:	3f 91       	pop	r19
    14c6:	2f 91       	pop	r18
    14c8:	0f 90       	pop	r0
    14ca:	0b be       	out	0x3b, r0	; 59
    14cc:	0f 90       	pop	r0
    14ce:	0f be       	out	0x3f, r0	; 63
    14d0:	0f 90       	pop	r0
    14d2:	1f 90       	pop	r1
    14d4:	18 95       	reti

000014d6 <__vector_55>:
    14d6:	1f 92       	push	r1
    14d8:	0f 92       	push	r0
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	0f 92       	push	r0
    14de:	11 24       	eor	r1, r1
    14e0:	0b b6       	in	r0, 0x3b	; 59
    14e2:	0f 92       	push	r0
    14e4:	2f 93       	push	r18
    14e6:	3f 93       	push	r19
    14e8:	4f 93       	push	r20
    14ea:	5f 93       	push	r21
    14ec:	6f 93       	push	r22
    14ee:	7f 93       	push	r23
    14f0:	8f 93       	push	r24
    14f2:	9f 93       	push	r25
    14f4:	af 93       	push	r26
    14f6:	bf 93       	push	r27
    14f8:	ef 93       	push	r30
    14fa:	ff 93       	push	r31
    14fc:	e0 91 26 22 	lds	r30, 0x2226	; 0x802226 <tc_tce1_cca_callback>
    1500:	f0 91 27 22 	lds	r31, 0x2227	; 0x802227 <tc_tce1_cca_callback+0x1>
    1504:	30 97       	sbiw	r30, 0x00	; 0
    1506:	09 f0       	breq	.+2      	; 0x150a <__vector_55+0x34>
    1508:	19 95       	eicall
    150a:	ff 91       	pop	r31
    150c:	ef 91       	pop	r30
    150e:	bf 91       	pop	r27
    1510:	af 91       	pop	r26
    1512:	9f 91       	pop	r25
    1514:	8f 91       	pop	r24
    1516:	7f 91       	pop	r23
    1518:	6f 91       	pop	r22
    151a:	5f 91       	pop	r21
    151c:	4f 91       	pop	r20
    151e:	3f 91       	pop	r19
    1520:	2f 91       	pop	r18
    1522:	0f 90       	pop	r0
    1524:	0b be       	out	0x3b, r0	; 59
    1526:	0f 90       	pop	r0
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	0f 90       	pop	r0
    152c:	1f 90       	pop	r1
    152e:	18 95       	reti

00001530 <__vector_56>:
    1530:	1f 92       	push	r1
    1532:	0f 92       	push	r0
    1534:	0f b6       	in	r0, 0x3f	; 63
    1536:	0f 92       	push	r0
    1538:	11 24       	eor	r1, r1
    153a:	0b b6       	in	r0, 0x3b	; 59
    153c:	0f 92       	push	r0
    153e:	2f 93       	push	r18
    1540:	3f 93       	push	r19
    1542:	4f 93       	push	r20
    1544:	5f 93       	push	r21
    1546:	6f 93       	push	r22
    1548:	7f 93       	push	r23
    154a:	8f 93       	push	r24
    154c:	9f 93       	push	r25
    154e:	af 93       	push	r26
    1550:	bf 93       	push	r27
    1552:	ef 93       	push	r30
    1554:	ff 93       	push	r31
    1556:	e0 91 24 22 	lds	r30, 0x2224	; 0x802224 <tc_tce1_ccb_callback>
    155a:	f0 91 25 22 	lds	r31, 0x2225	; 0x802225 <tc_tce1_ccb_callback+0x1>
    155e:	30 97       	sbiw	r30, 0x00	; 0
    1560:	09 f0       	breq	.+2      	; 0x1564 <__vector_56+0x34>
    1562:	19 95       	eicall
    1564:	ff 91       	pop	r31
    1566:	ef 91       	pop	r30
    1568:	bf 91       	pop	r27
    156a:	af 91       	pop	r26
    156c:	9f 91       	pop	r25
    156e:	8f 91       	pop	r24
    1570:	7f 91       	pop	r23
    1572:	6f 91       	pop	r22
    1574:	5f 91       	pop	r21
    1576:	4f 91       	pop	r20
    1578:	3f 91       	pop	r19
    157a:	2f 91       	pop	r18
    157c:	0f 90       	pop	r0
    157e:	0b be       	out	0x3b, r0	; 59
    1580:	0f 90       	pop	r0
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	0f 90       	pop	r0
    1586:	1f 90       	pop	r1
    1588:	18 95       	reti

0000158a <__vector_108>:
    158a:	1f 92       	push	r1
    158c:	0f 92       	push	r0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	0f 92       	push	r0
    1592:	11 24       	eor	r1, r1
    1594:	0b b6       	in	r0, 0x3b	; 59
    1596:	0f 92       	push	r0
    1598:	2f 93       	push	r18
    159a:	3f 93       	push	r19
    159c:	4f 93       	push	r20
    159e:	5f 93       	push	r21
    15a0:	6f 93       	push	r22
    15a2:	7f 93       	push	r23
    15a4:	8f 93       	push	r24
    15a6:	9f 93       	push	r25
    15a8:	af 93       	push	r26
    15aa:	bf 93       	push	r27
    15ac:	ef 93       	push	r30
    15ae:	ff 93       	push	r31
    15b0:	e0 91 22 22 	lds	r30, 0x2222	; 0x802222 <tc_tcf0_ovf_callback>
    15b4:	f0 91 23 22 	lds	r31, 0x2223	; 0x802223 <tc_tcf0_ovf_callback+0x1>
    15b8:	30 97       	sbiw	r30, 0x00	; 0
    15ba:	09 f0       	breq	.+2      	; 0x15be <__vector_108+0x34>
    15bc:	19 95       	eicall
    15be:	ff 91       	pop	r31
    15c0:	ef 91       	pop	r30
    15c2:	bf 91       	pop	r27
    15c4:	af 91       	pop	r26
    15c6:	9f 91       	pop	r25
    15c8:	8f 91       	pop	r24
    15ca:	7f 91       	pop	r23
    15cc:	6f 91       	pop	r22
    15ce:	5f 91       	pop	r21
    15d0:	4f 91       	pop	r20
    15d2:	3f 91       	pop	r19
    15d4:	2f 91       	pop	r18
    15d6:	0f 90       	pop	r0
    15d8:	0b be       	out	0x3b, r0	; 59
    15da:	0f 90       	pop	r0
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	0f 90       	pop	r0
    15e0:	1f 90       	pop	r1
    15e2:	18 95       	reti

000015e4 <__vector_109>:
    15e4:	1f 92       	push	r1
    15e6:	0f 92       	push	r0
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	0f 92       	push	r0
    15ec:	11 24       	eor	r1, r1
    15ee:	0b b6       	in	r0, 0x3b	; 59
    15f0:	0f 92       	push	r0
    15f2:	2f 93       	push	r18
    15f4:	3f 93       	push	r19
    15f6:	4f 93       	push	r20
    15f8:	5f 93       	push	r21
    15fa:	6f 93       	push	r22
    15fc:	7f 93       	push	r23
    15fe:	8f 93       	push	r24
    1600:	9f 93       	push	r25
    1602:	af 93       	push	r26
    1604:	bf 93       	push	r27
    1606:	ef 93       	push	r30
    1608:	ff 93       	push	r31
    160a:	e0 91 20 22 	lds	r30, 0x2220	; 0x802220 <tc_tcf0_err_callback>
    160e:	f0 91 21 22 	lds	r31, 0x2221	; 0x802221 <tc_tcf0_err_callback+0x1>
    1612:	30 97       	sbiw	r30, 0x00	; 0
    1614:	09 f0       	breq	.+2      	; 0x1618 <__vector_109+0x34>
    1616:	19 95       	eicall
    1618:	ff 91       	pop	r31
    161a:	ef 91       	pop	r30
    161c:	bf 91       	pop	r27
    161e:	af 91       	pop	r26
    1620:	9f 91       	pop	r25
    1622:	8f 91       	pop	r24
    1624:	7f 91       	pop	r23
    1626:	6f 91       	pop	r22
    1628:	5f 91       	pop	r21
    162a:	4f 91       	pop	r20
    162c:	3f 91       	pop	r19
    162e:	2f 91       	pop	r18
    1630:	0f 90       	pop	r0
    1632:	0b be       	out	0x3b, r0	; 59
    1634:	0f 90       	pop	r0
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	0f 90       	pop	r0
    163a:	1f 90       	pop	r1
    163c:	18 95       	reti

0000163e <__vector_110>:
    163e:	1f 92       	push	r1
    1640:	0f 92       	push	r0
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	0f 92       	push	r0
    1646:	11 24       	eor	r1, r1
    1648:	0b b6       	in	r0, 0x3b	; 59
    164a:	0f 92       	push	r0
    164c:	2f 93       	push	r18
    164e:	3f 93       	push	r19
    1650:	4f 93       	push	r20
    1652:	5f 93       	push	r21
    1654:	6f 93       	push	r22
    1656:	7f 93       	push	r23
    1658:	8f 93       	push	r24
    165a:	9f 93       	push	r25
    165c:	af 93       	push	r26
    165e:	bf 93       	push	r27
    1660:	ef 93       	push	r30
    1662:	ff 93       	push	r31
    1664:	e0 91 1e 22 	lds	r30, 0x221E	; 0x80221e <tc_tcf0_cca_callback>
    1668:	f0 91 1f 22 	lds	r31, 0x221F	; 0x80221f <tc_tcf0_cca_callback+0x1>
    166c:	30 97       	sbiw	r30, 0x00	; 0
    166e:	09 f0       	breq	.+2      	; 0x1672 <__vector_110+0x34>
    1670:	19 95       	eicall
    1672:	ff 91       	pop	r31
    1674:	ef 91       	pop	r30
    1676:	bf 91       	pop	r27
    1678:	af 91       	pop	r26
    167a:	9f 91       	pop	r25
    167c:	8f 91       	pop	r24
    167e:	7f 91       	pop	r23
    1680:	6f 91       	pop	r22
    1682:	5f 91       	pop	r21
    1684:	4f 91       	pop	r20
    1686:	3f 91       	pop	r19
    1688:	2f 91       	pop	r18
    168a:	0f 90       	pop	r0
    168c:	0b be       	out	0x3b, r0	; 59
    168e:	0f 90       	pop	r0
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	0f 90       	pop	r0
    1694:	1f 90       	pop	r1
    1696:	18 95       	reti

00001698 <__vector_111>:
    1698:	1f 92       	push	r1
    169a:	0f 92       	push	r0
    169c:	0f b6       	in	r0, 0x3f	; 63
    169e:	0f 92       	push	r0
    16a0:	11 24       	eor	r1, r1
    16a2:	0b b6       	in	r0, 0x3b	; 59
    16a4:	0f 92       	push	r0
    16a6:	2f 93       	push	r18
    16a8:	3f 93       	push	r19
    16aa:	4f 93       	push	r20
    16ac:	5f 93       	push	r21
    16ae:	6f 93       	push	r22
    16b0:	7f 93       	push	r23
    16b2:	8f 93       	push	r24
    16b4:	9f 93       	push	r25
    16b6:	af 93       	push	r26
    16b8:	bf 93       	push	r27
    16ba:	ef 93       	push	r30
    16bc:	ff 93       	push	r31
    16be:	e0 91 1c 22 	lds	r30, 0x221C	; 0x80221c <tc_tcf0_ccb_callback>
    16c2:	f0 91 1d 22 	lds	r31, 0x221D	; 0x80221d <tc_tcf0_ccb_callback+0x1>
    16c6:	30 97       	sbiw	r30, 0x00	; 0
    16c8:	09 f0       	breq	.+2      	; 0x16cc <__vector_111+0x34>
    16ca:	19 95       	eicall
    16cc:	ff 91       	pop	r31
    16ce:	ef 91       	pop	r30
    16d0:	bf 91       	pop	r27
    16d2:	af 91       	pop	r26
    16d4:	9f 91       	pop	r25
    16d6:	8f 91       	pop	r24
    16d8:	7f 91       	pop	r23
    16da:	6f 91       	pop	r22
    16dc:	5f 91       	pop	r21
    16de:	4f 91       	pop	r20
    16e0:	3f 91       	pop	r19
    16e2:	2f 91       	pop	r18
    16e4:	0f 90       	pop	r0
    16e6:	0b be       	out	0x3b, r0	; 59
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__vector_112>:
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	0b b6       	in	r0, 0x3b	; 59
    16fe:	0f 92       	push	r0
    1700:	2f 93       	push	r18
    1702:	3f 93       	push	r19
    1704:	4f 93       	push	r20
    1706:	5f 93       	push	r21
    1708:	6f 93       	push	r22
    170a:	7f 93       	push	r23
    170c:	8f 93       	push	r24
    170e:	9f 93       	push	r25
    1710:	af 93       	push	r26
    1712:	bf 93       	push	r27
    1714:	ef 93       	push	r30
    1716:	ff 93       	push	r31
    1718:	e0 91 1a 22 	lds	r30, 0x221A	; 0x80221a <tc_tcf0_ccc_callback>
    171c:	f0 91 1b 22 	lds	r31, 0x221B	; 0x80221b <tc_tcf0_ccc_callback+0x1>
    1720:	30 97       	sbiw	r30, 0x00	; 0
    1722:	09 f0       	breq	.+2      	; 0x1726 <__vector_112+0x34>
    1724:	19 95       	eicall
    1726:	ff 91       	pop	r31
    1728:	ef 91       	pop	r30
    172a:	bf 91       	pop	r27
    172c:	af 91       	pop	r26
    172e:	9f 91       	pop	r25
    1730:	8f 91       	pop	r24
    1732:	7f 91       	pop	r23
    1734:	6f 91       	pop	r22
    1736:	5f 91       	pop	r21
    1738:	4f 91       	pop	r20
    173a:	3f 91       	pop	r19
    173c:	2f 91       	pop	r18
    173e:	0f 90       	pop	r0
    1740:	0b be       	out	0x3b, r0	; 59
    1742:	0f 90       	pop	r0
    1744:	0f be       	out	0x3f, r0	; 63
    1746:	0f 90       	pop	r0
    1748:	1f 90       	pop	r1
    174a:	18 95       	reti

0000174c <__vector_113>:
    174c:	1f 92       	push	r1
    174e:	0f 92       	push	r0
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	0f 92       	push	r0
    1754:	11 24       	eor	r1, r1
    1756:	0b b6       	in	r0, 0x3b	; 59
    1758:	0f 92       	push	r0
    175a:	2f 93       	push	r18
    175c:	3f 93       	push	r19
    175e:	4f 93       	push	r20
    1760:	5f 93       	push	r21
    1762:	6f 93       	push	r22
    1764:	7f 93       	push	r23
    1766:	8f 93       	push	r24
    1768:	9f 93       	push	r25
    176a:	af 93       	push	r26
    176c:	bf 93       	push	r27
    176e:	ef 93       	push	r30
    1770:	ff 93       	push	r31
    1772:	e0 91 18 22 	lds	r30, 0x2218	; 0x802218 <tc_tcf0_ccd_callback>
    1776:	f0 91 19 22 	lds	r31, 0x2219	; 0x802219 <tc_tcf0_ccd_callback+0x1>
    177a:	30 97       	sbiw	r30, 0x00	; 0
    177c:	09 f0       	breq	.+2      	; 0x1780 <__vector_113+0x34>
    177e:	19 95       	eicall
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0b be       	out	0x3b, r0	; 59
    179c:	0f 90       	pop	r0
    179e:	0f be       	out	0x3f, r0	; 63
    17a0:	0f 90       	pop	r0
    17a2:	1f 90       	pop	r1
    17a4:	18 95       	reti

000017a6 <tc_enable>:
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	1f 92       	push	r1
    17ae:	1f 92       	push	r1
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	2f b7       	in	r18, 0x3f	; 63
    17b6:	2a 83       	std	Y+2, r18	; 0x02
    17b8:	f8 94       	cli
    17ba:	1a 81       	ldd	r17, Y+2	; 0x02
    17bc:	28 2f       	mov	r18, r24
    17be:	39 2f       	mov	r19, r25
    17c0:	21 15       	cp	r18, r1
    17c2:	88 e0       	ldi	r24, 0x08	; 8
    17c4:	38 07       	cpc	r19, r24
    17c6:	39 f4       	brne	.+14     	; 0x17d6 <tc_enable+0x30>
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	83 e0       	ldi	r24, 0x03	; 3
    17cc:	d8 d3       	rcall	.+1968   	; 0x1f7e <sysclk_enable_module>
    17ce:	64 e0       	ldi	r22, 0x04	; 4
    17d0:	83 e0       	ldi	r24, 0x03	; 3
    17d2:	d5 d3       	rcall	.+1962   	; 0x1f7e <sysclk_enable_module>
    17d4:	43 c0       	rjmp	.+134    	; 0x185c <tc_enable+0xb6>
    17d6:	20 34       	cpi	r18, 0x40	; 64
    17d8:	88 e0       	ldi	r24, 0x08	; 8
    17da:	38 07       	cpc	r19, r24
    17dc:	39 f4       	brne	.+14     	; 0x17ec <tc_enable+0x46>
    17de:	62 e0       	ldi	r22, 0x02	; 2
    17e0:	83 e0       	ldi	r24, 0x03	; 3
    17e2:	cd d3       	rcall	.+1946   	; 0x1f7e <sysclk_enable_module>
    17e4:	64 e0       	ldi	r22, 0x04	; 4
    17e6:	83 e0       	ldi	r24, 0x03	; 3
    17e8:	ca d3       	rcall	.+1940   	; 0x1f7e <sysclk_enable_module>
    17ea:	38 c0       	rjmp	.+112    	; 0x185c <tc_enable+0xb6>
    17ec:	21 15       	cp	r18, r1
    17ee:	89 e0       	ldi	r24, 0x09	; 9
    17f0:	38 07       	cpc	r19, r24
    17f2:	39 f4       	brne	.+14     	; 0x1802 <tc_enable+0x5c>
    17f4:	61 e0       	ldi	r22, 0x01	; 1
    17f6:	84 e0       	ldi	r24, 0x04	; 4
    17f8:	c2 d3       	rcall	.+1924   	; 0x1f7e <sysclk_enable_module>
    17fa:	64 e0       	ldi	r22, 0x04	; 4
    17fc:	84 e0       	ldi	r24, 0x04	; 4
    17fe:	bf d3       	rcall	.+1918   	; 0x1f7e <sysclk_enable_module>
    1800:	2d c0       	rjmp	.+90     	; 0x185c <tc_enable+0xb6>
    1802:	20 34       	cpi	r18, 0x40	; 64
    1804:	89 e0       	ldi	r24, 0x09	; 9
    1806:	38 07       	cpc	r19, r24
    1808:	39 f4       	brne	.+14     	; 0x1818 <tc_enable+0x72>
    180a:	62 e0       	ldi	r22, 0x02	; 2
    180c:	84 e0       	ldi	r24, 0x04	; 4
    180e:	b7 d3       	rcall	.+1902   	; 0x1f7e <sysclk_enable_module>
    1810:	64 e0       	ldi	r22, 0x04	; 4
    1812:	84 e0       	ldi	r24, 0x04	; 4
    1814:	b4 d3       	rcall	.+1896   	; 0x1f7e <sysclk_enable_module>
    1816:	22 c0       	rjmp	.+68     	; 0x185c <tc_enable+0xb6>
    1818:	21 15       	cp	r18, r1
    181a:	8a e0       	ldi	r24, 0x0A	; 10
    181c:	38 07       	cpc	r19, r24
    181e:	39 f4       	brne	.+14     	; 0x182e <tc_enable+0x88>
    1820:	61 e0       	ldi	r22, 0x01	; 1
    1822:	85 e0       	ldi	r24, 0x05	; 5
    1824:	ac d3       	rcall	.+1880   	; 0x1f7e <sysclk_enable_module>
    1826:	64 e0       	ldi	r22, 0x04	; 4
    1828:	85 e0       	ldi	r24, 0x05	; 5
    182a:	a9 d3       	rcall	.+1874   	; 0x1f7e <sysclk_enable_module>
    182c:	17 c0       	rjmp	.+46     	; 0x185c <tc_enable+0xb6>
    182e:	20 34       	cpi	r18, 0x40	; 64
    1830:	8a e0       	ldi	r24, 0x0A	; 10
    1832:	38 07       	cpc	r19, r24
    1834:	39 f4       	brne	.+14     	; 0x1844 <tc_enable+0x9e>
    1836:	62 e0       	ldi	r22, 0x02	; 2
    1838:	85 e0       	ldi	r24, 0x05	; 5
    183a:	a1 d3       	rcall	.+1858   	; 0x1f7e <sysclk_enable_module>
    183c:	64 e0       	ldi	r22, 0x04	; 4
    183e:	85 e0       	ldi	r24, 0x05	; 5
    1840:	9e d3       	rcall	.+1852   	; 0x1f7e <sysclk_enable_module>
    1842:	0c c0       	rjmp	.+24     	; 0x185c <tc_enable+0xb6>
    1844:	21 15       	cp	r18, r1
    1846:	3b 40       	sbci	r19, 0x0B	; 11
    1848:	39 f4       	brne	.+14     	; 0x1858 <tc_enable+0xb2>
    184a:	61 e0       	ldi	r22, 0x01	; 1
    184c:	86 e0       	ldi	r24, 0x06	; 6
    184e:	97 d3       	rcall	.+1838   	; 0x1f7e <sysclk_enable_module>
    1850:	64 e0       	ldi	r22, 0x04	; 4
    1852:	86 e0       	ldi	r24, 0x06	; 6
    1854:	94 d3       	rcall	.+1832   	; 0x1f7e <sysclk_enable_module>
    1856:	02 c0       	rjmp	.+4      	; 0x185c <tc_enable+0xb6>
    1858:	1f bf       	out	0x3f, r17	; 63
    185a:	10 c0       	rjmp	.+32     	; 0x187c <tc_enable+0xd6>
    185c:	80 91 2f 23 	lds	r24, 0x232F	; 0x80232f <sleepmgr_locks+0x1>
    1860:	8f 3f       	cpi	r24, 0xFF	; 255
    1862:	09 f4       	brne	.+2      	; 0x1866 <tc_enable+0xc0>
    1864:	ff cf       	rjmp	.-2      	; 0x1864 <tc_enable+0xbe>
    1866:	8f b7       	in	r24, 0x3f	; 63
    1868:	89 83       	std	Y+1, r24	; 0x01
    186a:	f8 94       	cli
    186c:	99 81       	ldd	r25, Y+1	; 0x01
    186e:	ee e2       	ldi	r30, 0x2E	; 46
    1870:	f3 e2       	ldi	r31, 0x23	; 35
    1872:	81 81       	ldd	r24, Z+1	; 0x01
    1874:	8f 5f       	subi	r24, 0xFF	; 255
    1876:	81 83       	std	Z+1, r24	; 0x01
    1878:	9f bf       	out	0x3f, r25	; 63
    187a:	1f bf       	out	0x3f, r17	; 63
    187c:	0f 90       	pop	r0
    187e:	0f 90       	pop	r0
    1880:	df 91       	pop	r29
    1882:	cf 91       	pop	r28
    1884:	1f 91       	pop	r17
    1886:	08 95       	ret

00001888 <tc_set_overflow_interrupt_callback>:

void tc_set_overflow_interrupt_callback(volatile void *tc,
		tc_callback_t callback)
{
#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    1888:	81 15       	cp	r24, r1
    188a:	28 e0       	ldi	r18, 0x08	; 8
    188c:	92 07       	cpc	r25, r18
    188e:	29 f4       	brne	.+10     	; 0x189a <tc_set_overflow_interrupt_callback+0x12>
		tc_tcc0_ovf_callback = callback;
    1890:	60 93 5e 22 	sts	0x225E, r22	; 0x80225e <tc_tcc0_ovf_callback>
    1894:	70 93 5f 22 	sts	0x225F, r23	; 0x80225f <tc_tcc0_ovf_callback+0x1>
    1898:	08 95       	ret
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    189a:	80 34       	cpi	r24, 0x40	; 64
    189c:	28 e0       	ldi	r18, 0x08	; 8
    189e:	92 07       	cpc	r25, r18
    18a0:	29 f4       	brne	.+10     	; 0x18ac <tc_set_overflow_interrupt_callback+0x24>
		tc_tcc1_ovf_callback = callback;
    18a2:	60 93 52 22 	sts	0x2252, r22	; 0x802252 <tc_tcc1_ovf_callback>
    18a6:	70 93 53 22 	sts	0x2253, r23	; 0x802253 <tc_tcc1_ovf_callback+0x1>
    18aa:	08 95       	ret
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    18ac:	81 15       	cp	r24, r1
    18ae:	29 e0       	ldi	r18, 0x09	; 9
    18b0:	92 07       	cpc	r25, r18
    18b2:	29 f4       	brne	.+10     	; 0x18be <tc_set_overflow_interrupt_callback+0x36>
		tc_tcd0_ovf_callback = callback;
    18b4:	60 93 4a 22 	sts	0x224A, r22	; 0x80224a <tc_tcd0_ovf_callback>
    18b8:	70 93 4b 22 	sts	0x224B, r23	; 0x80224b <tc_tcd0_ovf_callback+0x1>
    18bc:	08 95       	ret
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    18be:	80 34       	cpi	r24, 0x40	; 64
    18c0:	29 e0       	ldi	r18, 0x09	; 9
    18c2:	92 07       	cpc	r25, r18
    18c4:	29 f4       	brne	.+10     	; 0x18d0 <tc_set_overflow_interrupt_callback+0x48>
		tc_tcd1_ovf_callback = callback;
    18c6:	60 93 3e 22 	sts	0x223E, r22	; 0x80223e <tc_tcd1_ovf_callback>
    18ca:	70 93 3f 22 	sts	0x223F, r23	; 0x80223f <tc_tcd1_ovf_callback+0x1>
    18ce:	08 95       	ret
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    18d0:	81 15       	cp	r24, r1
    18d2:	2a e0       	ldi	r18, 0x0A	; 10
    18d4:	92 07       	cpc	r25, r18
    18d6:	29 f4       	brne	.+10     	; 0x18e2 <tc_set_overflow_interrupt_callback+0x5a>
		tc_tce0_ovf_callback = callback;
    18d8:	60 93 36 22 	sts	0x2236, r22	; 0x802236 <tc_tce0_ovf_callback>
    18dc:	70 93 37 22 	sts	0x2237, r23	; 0x802237 <tc_tce0_ovf_callback+0x1>
    18e0:	08 95       	ret
	} else
#endif
#ifdef TCE1
	if ((uintptr_t) tc == (uintptr_t) & TCE1) {
    18e2:	80 34       	cpi	r24, 0x40	; 64
    18e4:	2a e0       	ldi	r18, 0x0A	; 10
    18e6:	92 07       	cpc	r25, r18
    18e8:	29 f4       	brne	.+10     	; 0x18f4 <tc_set_overflow_interrupt_callback+0x6c>
		tc_tce1_ovf_callback = callback;
    18ea:	60 93 2a 22 	sts	0x222A, r22	; 0x80222a <tc_tce1_ovf_callback>
    18ee:	70 93 2b 22 	sts	0x222B, r23	; 0x80222b <tc_tce1_ovf_callback+0x1>
    18f2:	08 95       	ret
	} else
#endif
#ifdef TCF0
	if ((uintptr_t) tc == (uintptr_t) & TCF0) {
    18f4:	81 15       	cp	r24, r1
    18f6:	9b 40       	sbci	r25, 0x0B	; 11
    18f8:	21 f4       	brne	.+8      	; 0x1902 <tc_set_overflow_interrupt_callback+0x7a>
		tc_tcf0_ovf_callback = callback;
    18fa:	60 93 22 22 	sts	0x2222, r22	; 0x802222 <tc_tcf0_ovf_callback>
    18fe:	70 93 23 22 	sts	0x2223, r23	; 0x802223 <tc_tcf0_ovf_callback+0x1>
    1902:	08 95       	ret

00001904 <usart_spi_set_baudrate>:
 * \param usart The USART(SPI) module.
 * \param baud The baudrate.
 * \param cpu_hz The CPU frequency.
 */
void usart_spi_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1904:	cf 92       	push	r12
    1906:	df 92       	push	r13
    1908:	ef 92       	push	r14
    190a:	ff 92       	push	r15
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	ec 01       	movw	r28, r24
	uint16_t bsel_value;

	/* Check if baudrate is less than the maximim limit specified in
	 * datasheet */
	if (baud < (cpu_hz / 2)) {
    1916:	d9 01       	movw	r26, r18
    1918:	c8 01       	movw	r24, r16
    191a:	b6 95       	lsr	r27
    191c:	a7 95       	ror	r26
    191e:	97 95       	ror	r25
    1920:	87 95       	ror	r24
    1922:	48 17       	cp	r20, r24
    1924:	59 07       	cpc	r21, r25
    1926:	6a 07       	cpc	r22, r26
    1928:	7b 07       	cpc	r23, r27
    192a:	70 f4       	brcc	.+28     	; 0x1948 <usart_spi_set_baudrate+0x44>
		bsel_value = (cpu_hz / (baud * 2)) - 1;
    192c:	6a 01       	movw	r12, r20
    192e:	7b 01       	movw	r14, r22
    1930:	cc 0c       	add	r12, r12
    1932:	dd 1c       	adc	r13, r13
    1934:	ee 1c       	adc	r14, r14
    1936:	ff 1c       	adc	r15, r15
    1938:	c9 01       	movw	r24, r18
    193a:	b8 01       	movw	r22, r16
    193c:	a7 01       	movw	r20, r14
    193e:	96 01       	movw	r18, r12
    1940:	55 d5       	rcall	.+2730   	; 0x23ec <__udivmodsi4>
    1942:	21 50       	subi	r18, 0x01	; 1
    1944:	31 09       	sbc	r19, r1
    1946:	02 c0       	rjmp	.+4      	; 0x194c <usart_spi_set_baudrate+0x48>
	} else {
		/* If baudrate is not within the specfication in datasheet,
		 * assign maximum baudrate possible for the current CPU frequency */
		bsel_value = 0;
    1948:	20 e0       	ldi	r18, 0x00	; 0
    194a:	30 e0       	ldi	r19, 0x00	; 0
	}

	(usart)->BAUDCTRLB = (uint8_t)((~USART_BSCALE_gm) & (bsel_value >> 8));
    194c:	83 2f       	mov	r24, r19
    194e:	8f 70       	andi	r24, 0x0F	; 15
    1950:	8f 83       	std	Y+7, r24	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)(bsel_value);
    1952:	2e 83       	std	Y+6, r18	; 0x06
}
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	08 95       	ret

00001966 <usart_init_spi>:
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1966:	df 92       	push	r13
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	1f 92       	push	r1
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	7c 01       	movw	r14, r24
    197c:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    197e:	00 97       	sbiw	r24, 0x00	; 0
    1980:	09 f4       	brne	.+2      	; 0x1984 <usart_init_spi+0x1e>
    1982:	b2 c1       	rjmp	.+868    	; 0x1ce8 <usart_init_spi+0x382>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1984:	80 3c       	cpi	r24, 0xC0	; 192
    1986:	91 05       	cpc	r25, r1
    1988:	21 f4       	brne	.+8      	; 0x1992 <usart_init_spi+0x2c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    198a:	60 e1       	ldi	r22, 0x10	; 16
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	f7 d2       	rcall	.+1518   	; 0x1f7e <sysclk_enable_module>
    1990:	ab c1       	rjmp	.+854    	; 0x1ce8 <usart_init_spi+0x382>
	else if (module == &RTC) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1992:	80 e8       	ldi	r24, 0x80	; 128
    1994:	e8 16       	cp	r14, r24
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	f8 06       	cpc	r15, r24
    199a:	21 f4       	brne	.+8      	; 0x19a4 <usart_init_spi+0x3e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    199c:	62 e0       	ldi	r22, 0x02	; 2
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	ee d2       	rcall	.+1500   	; 0x1f7e <sysclk_enable_module>
    19a2:	a2 c1       	rjmp	.+836    	; 0x1ce8 <usart_init_spi+0x382>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    19a4:	e1 14       	cp	r14, r1
    19a6:	e1 e0       	ldi	r30, 0x01	; 1
    19a8:	fe 06       	cpc	r15, r30
    19aa:	21 f4       	brne	.+8      	; 0x19b4 <usart_init_spi+0x4e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    19ac:	61 e0       	ldi	r22, 0x01	; 1
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	e6 d2       	rcall	.+1484   	; 0x1f7e <sysclk_enable_module>
    19b2:	9a c1       	rjmp	.+820    	; 0x1ce8 <usart_init_spi+0x382>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    19b4:	f0 e8       	ldi	r31, 0x80	; 128
    19b6:	ef 16       	cp	r14, r31
    19b8:	f3 e0       	ldi	r31, 0x03	; 3
    19ba:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    19bc:	21 f4       	brne	.+8      	; 0x19c6 <usart_init_spi+0x60>
    19be:	61 e0       	ldi	r22, 0x01	; 1
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	dd d2       	rcall	.+1466   	; 0x1f7e <sysclk_enable_module>
    19c4:	91 c1       	rjmp	.+802    	; 0x1ce8 <usart_init_spi+0x382>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    19c6:	30 e9       	ldi	r19, 0x90	; 144
    19c8:	e3 16       	cp	r14, r19
    19ca:	33 e0       	ldi	r19, 0x03	; 3
    19cc:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    19ce:	21 f4       	brne	.+8      	; 0x19d8 <usart_init_spi+0x72>
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	d4 d2       	rcall	.+1448   	; 0x1f7e <sysclk_enable_module>
    19d6:	88 c1       	rjmp	.+784    	; 0x1ce8 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    19d8:	e1 14       	cp	r14, r1
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    19de:	21 f4       	brne	.+8      	; 0x19e8 <usart_init_spi+0x82>
    19e0:	62 e0       	ldi	r22, 0x02	; 2
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	cc d2       	rcall	.+1432   	; 0x1f7e <sysclk_enable_module>
    19e6:	80 c1       	rjmp	.+768    	; 0x1ce8 <usart_init_spi+0x382>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    19e8:	e0 e4       	ldi	r30, 0x40	; 64
    19ea:	ee 16       	cp	r14, r30
    19ec:	e2 e0       	ldi	r30, 0x02	; 2
    19ee:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    19f0:	21 f4       	brne	.+8      	; 0x19fa <usart_init_spi+0x94>
    19f2:	62 e0       	ldi	r22, 0x02	; 2
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	c3 d2       	rcall	.+1414   	; 0x1f7e <sysclk_enable_module>
    19f8:	77 c1       	rjmp	.+750    	; 0x1ce8 <usart_init_spi+0x382>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    19fa:	f0 e2       	ldi	r31, 0x20	; 32
    19fc:	ef 16       	cp	r14, r31
    19fe:	f3 e0       	ldi	r31, 0x03	; 3
    1a00:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1a02:	21 f4       	brne	.+8      	; 0x1a0c <usart_init_spi+0xa6>
    1a04:	64 e0       	ldi	r22, 0x04	; 4
    1a06:	82 e0       	ldi	r24, 0x02	; 2
    1a08:	ba d2       	rcall	.+1396   	; 0x1f7e <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1a0a:	6e c1       	rjmp	.+732    	; 0x1ce8 <usart_init_spi+0x382>
    1a0c:	e1 14       	cp	r14, r1
    1a0e:	38 e0       	ldi	r19, 0x08	; 8
    1a10:	f3 06       	cpc	r15, r19
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1a12:	21 f4       	brne	.+8      	; 0x1a1c <usart_init_spi+0xb6>
    1a14:	61 e0       	ldi	r22, 0x01	; 1
    1a16:	83 e0       	ldi	r24, 0x03	; 3
    1a18:	b2 d2       	rcall	.+1380   	; 0x1f7e <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1a1a:	66 c1       	rjmp	.+716    	; 0x1ce8 <usart_init_spi+0x382>
    1a1c:	e1 14       	cp	r14, r1
    1a1e:	89 e0       	ldi	r24, 0x09	; 9
    1a20:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1a22:	21 f4       	brne	.+8      	; 0x1a2c <usart_init_spi+0xc6>
    1a24:	61 e0       	ldi	r22, 0x01	; 1
    1a26:	84 e0       	ldi	r24, 0x04	; 4
    1a28:	aa d2       	rcall	.+1364   	; 0x1f7e <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1a2a:	5e c1       	rjmp	.+700    	; 0x1ce8 <usart_init_spi+0x382>
    1a2c:	e1 14       	cp	r14, r1
    1a2e:	ea e0       	ldi	r30, 0x0A	; 10
    1a30:	fe 06       	cpc	r15, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1a32:	21 f4       	brne	.+8      	; 0x1a3c <usart_init_spi+0xd6>
    1a34:	61 e0       	ldi	r22, 0x01	; 1
    1a36:	85 e0       	ldi	r24, 0x05	; 5
    1a38:	a2 d2       	rcall	.+1348   	; 0x1f7e <sysclk_enable_module>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1a3a:	56 c1       	rjmp	.+684    	; 0x1ce8 <usart_init_spi+0x382>
    1a3c:	e1 14       	cp	r14, r1
    1a3e:	fb e0       	ldi	r31, 0x0B	; 11
    1a40:	ff 06       	cpc	r15, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1a42:	21 f4       	brne	.+8      	; 0x1a4c <usart_init_spi+0xe6>
    1a44:	61 e0       	ldi	r22, 0x01	; 1
    1a46:	86 e0       	ldi	r24, 0x06	; 6
    1a48:	9a d2       	rcall	.+1332   	; 0x1f7e <sysclk_enable_module>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1a4a:	4e c1       	rjmp	.+668    	; 0x1ce8 <usart_init_spi+0x382>
    1a4c:	30 e4       	ldi	r19, 0x40	; 64
    1a4e:	e3 16       	cp	r14, r19
    1a50:	38 e0       	ldi	r19, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1a52:	f3 06       	cpc	r15, r19
    1a54:	21 f4       	brne	.+8      	; 0x1a5e <usart_init_spi+0xf8>
    1a56:	62 e0       	ldi	r22, 0x02	; 2
    1a58:	83 e0       	ldi	r24, 0x03	; 3
    1a5a:	91 d2       	rcall	.+1314   	; 0x1f7e <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1a5c:	45 c1       	rjmp	.+650    	; 0x1ce8 <usart_init_spi+0x382>
    1a5e:	80 e4       	ldi	r24, 0x40	; 64
    1a60:	e8 16       	cp	r14, r24
    1a62:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1a64:	f8 06       	cpc	r15, r24
    1a66:	21 f4       	brne	.+8      	; 0x1a70 <usart_init_spi+0x10a>
    1a68:	62 e0       	ldi	r22, 0x02	; 2
    1a6a:	84 e0       	ldi	r24, 0x04	; 4
    1a6c:	88 d2       	rcall	.+1296   	; 0x1f7e <sysclk_enable_module>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1a6e:	3c c1       	rjmp	.+632    	; 0x1ce8 <usart_init_spi+0x382>
    1a70:	e0 e4       	ldi	r30, 0x40	; 64
    1a72:	ee 16       	cp	r14, r30
    1a74:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1a76:	fe 06       	cpc	r15, r30
    1a78:	21 f4       	brne	.+8      	; 0x1a82 <usart_init_spi+0x11c>
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	85 e0       	ldi	r24, 0x05	; 5
    1a7e:	7f d2       	rcall	.+1278   	; 0x1f7e <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1a80:	33 c1       	rjmp	.+614    	; 0x1ce8 <usart_init_spi+0x382>
    1a82:	f0 e9       	ldi	r31, 0x90	; 144
    1a84:	ef 16       	cp	r14, r31
    1a86:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1a88:	ff 06       	cpc	r15, r31
    1a8a:	21 f4       	brne	.+8      	; 0x1a94 <usart_init_spi+0x12e>
    1a8c:	64 e0       	ldi	r22, 0x04	; 4
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	76 d2       	rcall	.+1260   	; 0x1f7e <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1a92:	2a c1       	rjmp	.+596    	; 0x1ce8 <usart_init_spi+0x382>
    1a94:	30 e9       	ldi	r19, 0x90	; 144
    1a96:	e3 16       	cp	r14, r19
    1a98:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1a9a:	f3 06       	cpc	r15, r19
    1a9c:	21 f4       	brne	.+8      	; 0x1aa6 <usart_init_spi+0x140>
    1a9e:	64 e0       	ldi	r22, 0x04	; 4
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1aa2:	6d d2       	rcall	.+1242   	; 0x1f7e <sysclk_enable_module>
    1aa4:	21 c1       	rjmp	.+578    	; 0x1ce8 <usart_init_spi+0x382>
    1aa6:	80 e9       	ldi	r24, 0x90	; 144
    1aa8:	e8 16       	cp	r14, r24
    1aaa:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1aac:	f8 06       	cpc	r15, r24
    1aae:	21 f4       	brne	.+8      	; 0x1ab8 <usart_init_spi+0x152>
    1ab0:	64 e0       	ldi	r22, 0x04	; 4
    1ab2:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1ab4:	64 d2       	rcall	.+1224   	; 0x1f7e <sysclk_enable_module>
    1ab6:	18 c1       	rjmp	.+560    	; 0x1ce8 <usart_init_spi+0x382>
    1ab8:	e0 e9       	ldi	r30, 0x90	; 144
    1aba:	ee 16       	cp	r14, r30
    1abc:	eb e0       	ldi	r30, 0x0B	; 11
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1abe:	fe 06       	cpc	r15, r30
    1ac0:	21 f4       	brne	.+8      	; 0x1aca <usart_init_spi+0x164>
    1ac2:	64 e0       	ldi	r22, 0x04	; 4
    1ac4:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1ac6:	5b d2       	rcall	.+1206   	; 0x1f7e <sysclk_enable_module>
    1ac8:	0f c1       	rjmp	.+542    	; 0x1ce8 <usart_init_spi+0x382>
    1aca:	f0 ec       	ldi	r31, 0xC0	; 192
    1acc:	ef 16       	cp	r14, r31
    1ace:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1ad0:	ff 06       	cpc	r15, r31
    1ad2:	21 f4       	brne	.+8      	; 0x1adc <usart_init_spi+0x176>
    1ad4:	68 e0       	ldi	r22, 0x08	; 8
    1ad6:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1ad8:	52 d2       	rcall	.+1188   	; 0x1f7e <sysclk_enable_module>
    1ada:	06 c1       	rjmp	.+524    	; 0x1ce8 <usart_init_spi+0x382>
    1adc:	30 ec       	ldi	r19, 0xC0	; 192
    1ade:	e3 16       	cp	r14, r19
    1ae0:	39 e0       	ldi	r19, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1ae2:	f3 06       	cpc	r15, r19
    1ae4:	21 f4       	brne	.+8      	; 0x1aee <usart_init_spi+0x188>
    1ae6:	68 e0       	ldi	r22, 0x08	; 8
    1ae8:	84 e0       	ldi	r24, 0x04	; 4
    1aea:	49 d2       	rcall	.+1170   	; 0x1f7e <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1aec:	fd c0       	rjmp	.+506    	; 0x1ce8 <usart_init_spi+0x382>
    1aee:	80 ea       	ldi	r24, 0xA0	; 160
    1af0:	e8 16       	cp	r14, r24
    1af2:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1af4:	f8 06       	cpc	r15, r24
    1af6:	61 f4       	brne	.+24     	; 0x1b10 <usart_init_spi+0x1aa>
    1af8:	60 e1       	ldi	r22, 0x10	; 16
    1afa:	83 e0       	ldi	r24, 0x03	; 3
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1afc:	40 d2       	rcall	.+1152   	; 0x1f7e <sysclk_enable_module>
    1afe:	e0 ea       	ldi	r30, 0xA0	; 160
    1b00:	f8 e0       	ldi	r31, 0x08	; 8
    1b02:	84 81       	ldd	r24, Z+4	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1b04:	8f 7e       	andi	r24, 0xEF	; 239
    1b06:	84 83       	std	Z+4, r24	; 0x04
    1b08:	f8 01       	movw	r30, r16
    1b0a:	24 81       	ldd	r18, Z+4	; 0x04
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1b0c:	22 50       	subi	r18, 0x02	; 2
    1b0e:	4c c0       	rjmp	.+152    	; 0x1ba8 <usart_init_spi+0x242>
    1b10:	f0 ea       	ldi	r31, 0xA0	; 160
    1b12:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1b14:	f9 e0       	ldi	r31, 0x09	; 9
    1b16:	ff 06       	cpc	r15, r31
    1b18:	21 f4       	brne	.+8      	; 0x1b22 <usart_init_spi+0x1bc>
    1b1a:	60 e1       	ldi	r22, 0x10	; 16
    1b1c:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1b1e:	2f d2       	rcall	.+1118   	; 0x1f7e <sysclk_enable_module>
    1b20:	e3 c0       	rjmp	.+454    	; 0x1ce8 <usart_init_spi+0x382>
    1b22:	30 ea       	ldi	r19, 0xA0	; 160
    1b24:	e3 16       	cp	r14, r19
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1b26:	3a e0       	ldi	r19, 0x0A	; 10
    1b28:	f3 06       	cpc	r15, r19
    1b2a:	21 f4       	brne	.+8      	; 0x1b34 <usart_init_spi+0x1ce>
    1b2c:	60 e1       	ldi	r22, 0x10	; 16
    1b2e:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1b30:	26 d2       	rcall	.+1100   	; 0x1f7e <sysclk_enable_module>
    1b32:	da c0       	rjmp	.+436    	; 0x1ce8 <usart_init_spi+0x382>
    1b34:	80 ea       	ldi	r24, 0xA0	; 160
    1b36:	e8 16       	cp	r14, r24
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1b38:	8b e0       	ldi	r24, 0x0B	; 11
    1b3a:	f8 06       	cpc	r15, r24
    1b3c:	21 f4       	brne	.+8      	; 0x1b46 <usart_init_spi+0x1e0>
    1b3e:	60 e1       	ldi	r22, 0x10	; 16
    1b40:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1b42:	1d d2       	rcall	.+1082   	; 0x1f7e <sysclk_enable_module>
    1b44:	d1 c0       	rjmp	.+418    	; 0x1ce8 <usart_init_spi+0x382>
    1b46:	e0 eb       	ldi	r30, 0xB0	; 176
    1b48:	ee 16       	cp	r14, r30
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1b4a:	e8 e0       	ldi	r30, 0x08	; 8
    1b4c:	fe 06       	cpc	r15, r30
    1b4e:	21 f4       	brne	.+8      	; 0x1b58 <usart_init_spi+0x1f2>
    1b50:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1b52:	83 e0       	ldi	r24, 0x03	; 3
    1b54:	14 d2       	rcall	.+1064   	; 0x1f7e <sysclk_enable_module>
    1b56:	c8 c0       	rjmp	.+400    	; 0x1ce8 <usart_init_spi+0x382>
    1b58:	f0 eb       	ldi	r31, 0xB0	; 176
    1b5a:	ef 16       	cp	r14, r31
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1b5c:	f9 e0       	ldi	r31, 0x09	; 9
    1b5e:	ff 06       	cpc	r15, r31
    1b60:	21 f4       	brne	.+8      	; 0x1b6a <usart_init_spi+0x204>
    1b62:	60 e2       	ldi	r22, 0x20	; 32
    1b64:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1b66:	0b d2       	rcall	.+1046   	; 0x1f7e <sysclk_enable_module>
    1b68:	bf c0       	rjmp	.+382    	; 0x1ce8 <usart_init_spi+0x382>
    1b6a:	30 e8       	ldi	r19, 0x80	; 128
    1b6c:	e3 16       	cp	r14, r19
    1b6e:	34 e0       	ldi	r19, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1b70:	f3 06       	cpc	r15, r19
    1b72:	21 f4       	brne	.+8      	; 0x1b7c <usart_init_spi+0x216>
    1b74:	60 e4       	ldi	r22, 0x40	; 64
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	02 d2       	rcall	.+1028   	; 0x1f7e <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1b7a:	b6 c0       	rjmp	.+364    	; 0x1ce8 <usart_init_spi+0x382>
    1b7c:	80 ea       	ldi	r24, 0xA0	; 160
    1b7e:	e8 16       	cp	r14, r24
    1b80:	84 e0       	ldi	r24, 0x04	; 4
    1b82:	f8 06       	cpc	r15, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1b84:	21 f4       	brne	.+8      	; 0x1b8e <usart_init_spi+0x228>
    1b86:	60 e4       	ldi	r22, 0x40	; 64
    1b88:	85 e0       	ldi	r24, 0x05	; 5
    1b8a:	f9 d1       	rcall	.+1010   	; 0x1f7e <sysclk_enable_module>
    1b8c:	ad c0       	rjmp	.+346    	; 0x1ce8 <usart_init_spi+0x382>
    1b8e:	f7 01       	movw	r30, r14
    1b90:	84 81       	ldd	r24, Z+4	; 0x04
    1b92:	8f 7e       	andi	r24, 0xEF	; 239
    1b94:	84 83       	std	Z+4, r24	; 0x04
    1b96:	fb 01       	movw	r30, r22
    1b98:	24 81       	ldd	r18, Z+4	; 0x04
    1b9a:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1b9c:	c7 01       	movw	r24, r14
    1b9e:	f0 ea       	ldi	r31, 0xA0	; 160
    1ba0:	ef 16       	cp	r14, r31
    1ba2:	f8 e0       	ldi	r31, 0x08	; 8
    1ba4:	ff 06       	cpc	r15, r31
    1ba6:	49 f4       	brne	.+18     	; 0x1bba <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
    1ba8:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <__TEXT_REGION_LENGTH__+0x70064e>
    1bac:	84 fd       	sbrc	r24, 4
    1bae:	a5 c0       	rjmp	.+330    	; 0x1cfa <usart_init_spi+0x394>
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
    1bb0:	0f 2e       	mov	r0, r31
    1bb2:	f1 e1       	ldi	r31, 0x11	; 17
    1bb4:	df 2e       	mov	r13, r31
    1bb6:	f0 2d       	mov	r31, r0
    1bb8:	a4 c0       	rjmp	.+328    	; 0x1d02 <usart_init_spi+0x39c>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 1);
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
    1bba:	80 3b       	cpi	r24, 0xB0	; 176
    1bbc:	38 e0       	ldi	r19, 0x08	; 8
    1bbe:	93 07       	cpc	r25, r19
    1bc0:	91 f0       	breq	.+36     	; 0x1be6 <usart_init_spi+0x280>
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
	}
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
    1bc2:	80 3a       	cpi	r24, 0xA0	; 160
    1bc4:	e9 e0       	ldi	r30, 0x09	; 9
    1bc6:	9e 07       	cpc	r25, r30
    1bc8:	49 f4       	brne	.+18     	; 0x1bdc <usart_init_spi+0x276>
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
    1bca:	30 91 6e 06 	lds	r19, 0x066E	; 0x80066e <__TEXT_REGION_LENGTH__+0x70066e>
    1bce:	34 fd       	sbrc	r19, 4
    1bd0:	9b c0       	rjmp	.+310    	; 0x1d08 <usart_init_spi+0x3a2>
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
    1bd2:	0f 2e       	mov	r0, r31
    1bd4:	f9 e1       	ldi	r31, 0x19	; 25
    1bd6:	df 2e       	mov	r13, r31
    1bd8:	f0 2d       	mov	r31, r0
    1bda:	16 c0       	rjmp	.+44     	; 0x1c08 <usart_init_spi+0x2a2>
		sck_pin = IOPORT_CREATE_PIN(PORTD, 1);
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
    1bdc:	80 3b       	cpi	r24, 0xB0	; 176
    1bde:	f9 e0       	ldi	r31, 0x09	; 9
    1be0:	9f 07       	cpc	r25, r31
    1be2:	f1 f0       	breq	.+60     	; 0x1c20 <usart_init_spi+0x2ba>
    1be4:	04 c0       	rjmp	.+8      	; 0x1bee <usart_init_spi+0x288>
#  endif
	}
#endif
#ifdef USARTC1
	if ((uint16_t)usart == (uint16_t)&USARTC1) {
		sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1be6:	0f 2e       	mov	r0, r31
    1be8:	f5 e1       	ldi	r31, 0x15	; 21
    1bea:	df 2e       	mov	r13, r31
    1bec:	f0 2d       	mov	r31, r0
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
	}
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
    1bee:	80 3a       	cpi	r24, 0xA0	; 160
    1bf0:	3a e0       	ldi	r19, 0x0A	; 10
    1bf2:	93 07       	cpc	r25, r19
    1bf4:	49 f4       	brne	.+18     	; 0x1c08 <usart_init_spi+0x2a2>
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
    1bf6:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <__TEXT_REGION_LENGTH__+0x70068e>
    1bfa:	84 fd       	sbrc	r24, 4
    1bfc:	8a c0       	rjmp	.+276    	; 0x1d12 <usart_init_spi+0x3ac>
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 1);
    1bfe:	0f 2e       	mov	r0, r31
    1c00:	f1 e2       	ldi	r31, 0x21	; 33
    1c02:	df 2e       	mov	r13, r31
    1c04:	f0 2d       	mov	r31, r0
    1c06:	15 c0       	rjmp	.+42     	; 0x1c32 <usart_init_spi+0x2cc>
	if ((uint16_t)usart == (uint16_t)&USARTE1) {
		sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
	}
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
    1c08:	80 3a       	cpi	r24, 0xA0	; 160
    1c0a:	9b 40       	sbci	r25, 0x0B	; 11
    1c0c:	91 f4       	brne	.+36     	; 0x1c32 <usart_init_spi+0x2cc>
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
    1c0e:	80 91 ae 06 	lds	r24, 0x06AE	; 0x8006ae <__TEXT_REGION_LENGTH__+0x7006ae>
    1c12:	84 fd       	sbrc	r24, 4
    1c14:	0a c0       	rjmp	.+20     	; 0x1c2a <usart_init_spi+0x2c4>
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
		} else {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 1);
    1c16:	0f 2e       	mov	r0, r31
    1c18:	f9 e2       	ldi	r31, 0x29	; 41
    1c1a:	df 2e       	mov	r13, r31
    1c1c:	f0 2d       	mov	r31, r0
    1c1e:	09 c0       	rjmp	.+18     	; 0x1c32 <usart_init_spi+0x2cc>
#  endif
	}
#endif
#ifdef USARTD1
	if ((uint16_t)usart == (uint16_t)&USARTD1) {
		sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1c20:	0f 2e       	mov	r0, r31
    1c22:	fd e1       	ldi	r31, 0x1D	; 29
    1c24:	df 2e       	mov	r13, r31
    1c26:	f0 2d       	mov	r31, r0
    1c28:	04 c0       	rjmp	.+8      	; 0x1c32 <usart_init_spi+0x2cc>
#endif
#ifdef USARTF0
	if ((uint16_t)usart == (uint16_t)&USARTF0) {
#  ifdef PORT_USART0_bm
		if(PORTF.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTF, 5);
    1c2a:	0f 2e       	mov	r0, r31
    1c2c:	fd e2       	ldi	r31, 0x2D	; 45
    1c2e:	df 2e       	mov	r13, r31
    1c30:	f0 2d       	mov	r31, r0
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1c32:	ed 2d       	mov	r30, r13
    1c34:	e6 95       	lsr	r30
    1c36:	e6 95       	lsr	r30
    1c38:	e6 95       	lsr	r30
    1c3a:	30 e2       	ldi	r19, 0x20	; 32
    1c3c:	e3 9f       	mul	r30, r19
    1c3e:	f0 01       	movw	r30, r0
    1c40:	11 24       	eor	r1, r1
    1c42:	fa 5f       	subi	r31, 0xFA	; 250
    1c44:	3d 2d       	mov	r19, r13
    1c46:	37 70       	andi	r19, 0x07	; 7
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	03 2e       	mov	r0, r19
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <usart_init_spi+0x2ee>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <usart_init_spi+0x2ea>
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIRSET = arch_ioport_pin_to_mask(pin);
    1c58:	81 83       	std	Z+1, r24	; 0x01
	}
#endif

	/* Configure the USART output pin */
	ioport_set_pin_dir(sck_pin, IOPORT_DIR_OUTPUT);
	ioport_set_pin_mode(sck_pin,
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	10 f0       	brcs	.+4      	; 0x1c62 <usart_init_spi+0x2fc>
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	01 c0       	rjmp	.+2      	; 0x1c64 <usart_init_spi+0x2fe>
    1c62:	40 e4       	ldi	r20, 0x40	; 64
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));
    1c64:	df 01       	movw	r26, r30
    1c66:	50 96       	adiw	r26, 0x10	; 16

__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	volatile uint8_t *pin_ctrl
    1c68:	a3 0f       	add	r26, r19
    1c6a:	b1 1d       	adc	r27, r1

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1c6c:	9f b7       	in	r25, 0x3f	; 63
    1c6e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1c70:	f8 94       	cli
	return flags;
    1c72:	39 81       	ldd	r19, Y+1	; 0x01
		= (&base->PIN0CTRL + arch_ioport_pin_to_index(pin));

	uint8_t flags = cpu_irq_save();

	*pin_ctrl &= PORT_ISC_gm;
    1c74:	2c 91       	ld	r18, X
    1c76:	27 70       	andi	r18, 0x07	; 7
    1c78:	2c 93       	st	X, r18
	*pin_ctrl |= mode;
    1c7a:	9c 91       	ld	r25, X
    1c7c:	94 2b       	or	r25, r20
    1c7e:	9c 93       	st	X, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1c80:	3f bf       	out	0x3f, r19	; 63
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1c82:	85 83       	std	Z+5, r24	; 0x05
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1c84:	f7 01       	movw	r30, r14
    1c86:	85 81       	ldd	r24, Z+5	; 0x05
    1c88:	80 6c       	ori	r24, 0xC0	; 192
    1c8a:	85 83       	std	Z+5, r24	; 0x05
			IOPORT_MODE_TOTEM | (invert_sck? IOPORT_MODE_INVERT_PIN : 0));
	ioport_set_pin_level(sck_pin, IOPORT_PIN_LEVEL_HIGH);

	usart_set_mode(usart, USART_CMODE_MSPI_gc);

	if (opt->spimode == 1 || opt->spimode == 3) {
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	84 81       	ldd	r24, Z+4	; 0x04
    1c90:	8d 7f       	andi	r24, 0xFD	; 253
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	29 f4       	brne	.+10     	; 0x1ca0 <usart_init_spi+0x33a>
		usart->CTRLC |= USART_UCPHA_bm;
    1c96:	f7 01       	movw	r30, r14
    1c98:	85 81       	ldd	r24, Z+5	; 0x05
    1c9a:	82 60       	ori	r24, 0x02	; 2
    1c9c:	85 83       	std	Z+5, r24	; 0x05
	} else {
		usart->CTRLC &= ~USART_UCPHA_bm;
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <usart_init_spi+0x342>
    1ca0:	f7 01       	movw	r30, r14
    1ca2:	85 81       	ldd	r24, Z+5	; 0x05
    1ca4:	8d 7f       	andi	r24, 0xFD	; 253
	}
	if (opt->data_order) {
    1ca6:	85 83       	std	Z+5, r24	; 0x05
    1ca8:	f8 01       	movw	r30, r16
    1caa:	85 81       	ldd	r24, Z+5	; 0x05
    1cac:	88 23       	and	r24, r24
		(usart)->CTRLC |= USART_DORD_bm;
    1cae:	29 f0       	breq	.+10     	; 0x1cba <usart_init_spi+0x354>
    1cb0:	f7 01       	movw	r30, r14
    1cb2:	85 81       	ldd	r24, Z+5	; 0x05
    1cb4:	84 60       	ori	r24, 0x04	; 4
    1cb6:	85 83       	std	Z+5, r24	; 0x05
	} else {
		(usart)->CTRLC &= ~USART_DORD_bm;
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <usart_init_spi+0x35c>
    1cba:	f7 01       	movw	r30, r14
    1cbc:	85 81       	ldd	r24, Z+5	; 0x05
    1cbe:	8b 7f       	andi	r24, 0xFB	; 251
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1cc0:	85 83       	std	Z+5, r24	; 0x05
    1cc2:	f8 01       	movw	r30, r16
    1cc4:	40 81       	ld	r20, Z
    1cc6:	51 81       	ldd	r21, Z+1	; 0x01
    1cc8:	62 81       	ldd	r22, Z+2	; 0x02
    1cca:	73 81       	ldd	r23, Z+3	; 0x03
    1ccc:	00 e8       	ldi	r16, 0x80	; 128
    1cce:	14 e8       	ldi	r17, 0x84	; 132
    1cd0:	2e e1       	ldi	r18, 0x1E	; 30
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	c7 01       	movw	r24, r14
    1cd6:	16 de       	rcall	.-980    	; 0x1904 <usart_spi_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1cd8:	f7 01       	movw	r30, r14
    1cda:	84 81       	ldd	r24, Z+4	; 0x04
    1cdc:	88 60       	ori	r24, 0x08	; 8
    1cde:	84 83       	std	Z+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1ce0:	84 81       	ldd	r24, Z+4	; 0x04
    1ce2:	80 61       	ori	r24, 0x10	; 16
    1ce4:	84 83       	std	Z+4, r24	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1ce6:	1a c0       	rjmp	.+52     	; 0x1d1c <usart_init_spi+0x3b6>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_rx_disable(USART_t *usart)
{
	(usart)->CTRLB &= ~USART_RXEN_bm;
    1ce8:	f7 01       	movw	r30, r14
    1cea:	84 81       	ldd	r24, Z+4	; 0x04
    1cec:	8f 7e       	andi	r24, 0xEF	; 239
    1cee:	84 83       	std	Z+4, r24	; 0x04
	sysclk_enable_peripheral_clock(usart);

	usart_rx_disable(usart);

	/* configure Clock polarity using INVEN bit of the correct SCK I/O port **/
	invert_sck = (opt->spimode == 2) || (opt->spimode == 3);
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	24 81       	ldd	r18, Z+4	; 0x04
    1cf4:	22 50       	subi	r18, 0x02	; 2
	UNUSED(invert_sck);

#ifdef USARTC0
	if ((uint16_t)usart == (uint16_t)&USARTC0) {
    1cf6:	c7 01       	movw	r24, r14
    1cf8:	60 cf       	rjmp	.-320    	; 0x1bba <usart_init_spi+0x254>
#  ifdef PORT_USART0_bm
		if (PORTC.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTC, 5);
    1cfa:	0f 2e       	mov	r0, r31
    1cfc:	f5 e1       	ldi	r31, 0x15	; 21
    1cfe:	df 2e       	mov	r13, r31
    1d00:	f0 2d       	mov	r31, r0
 *
 * \param usart The USART module.
 * \param opt The RS232 configuration option.
 */
void usart_init_spi(USART_t *usart, const usart_spi_options_t *opt)
{
    1d02:	80 ea       	ldi	r24, 0xA0	; 160
    1d04:	98 e0       	ldi	r25, 0x08	; 8
    1d06:	6a cf       	rjmp	.-300    	; 0x1bdc <usart_init_spi+0x276>
#endif
#ifdef USARTD0
	if ((uint16_t)usart == (uint16_t)&USARTD0) {
#  ifdef PORT_USART0_bm
		if (PORTD.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTD, 5);
    1d08:	0f 2e       	mov	r0, r31
    1d0a:	fd e1       	ldi	r31, 0x1D	; 29
    1d0c:	df 2e       	mov	r13, r31
    1d0e:	f0 2d       	mov	r31, r0
    1d10:	7b cf       	rjmp	.-266    	; 0x1c08 <usart_init_spi+0x2a2>
#endif
#ifdef USARTE0
	if ((uint16_t)usart == (uint16_t)&USARTE0) {
#  ifdef PORT_USART0_bm
		if(PORTE.REMAP & PORT_USART0_bm) {
			sck_pin = IOPORT_CREATE_PIN(PORTE, 5);
    1d12:	0f 2e       	mov	r0, r31
    1d14:	f5 e2       	ldi	r31, 0x25	; 37
    1d16:	df 2e       	mov	r13, r31
    1d18:	f0 2d       	mov	r31, r0
    1d1a:	8b cf       	rjmp	.-234    	; 0x1c32 <usart_init_spi+0x2cc>
	}

	usart_spi_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
    1d1c:	0f 90       	pop	r0
    1d1e:	df 91       	pop	r29
    1d20:	cf 91       	pop	r28
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	df 90       	pop	r13
    1d2c:	08 95       	ret

00001d2e <usart_spi_init>:
		*data = usart_spi_transmit(usart, CONFIG_USART_SPI_DUMMY);
		len--;
		data++;
 	}
	return STATUS_OK;
}
    1d2e:	80 3a       	cpi	r24, 0xA0	; 160
    1d30:	28 e0       	ldi	r18, 0x08	; 8
    1d32:	92 07       	cpc	r25, r18
    1d34:	21 f4       	brne	.+8      	; 0x1d3e <usart_spi_init+0x10>
    1d36:	60 e1       	ldi	r22, 0x10	; 16
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	21 c1       	rjmp	.+578    	; 0x1f7e <sysclk_enable_module>
    1d3c:	08 95       	ret
    1d3e:	80 3b       	cpi	r24, 0xB0	; 176
    1d40:	28 e0       	ldi	r18, 0x08	; 8
    1d42:	92 07       	cpc	r25, r18
    1d44:	21 f4       	brne	.+8      	; 0x1d4e <usart_spi_init+0x20>
    1d46:	60 e2       	ldi	r22, 0x20	; 32
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	19 c1       	rjmp	.+562    	; 0x1f7e <sysclk_enable_module>
    1d4c:	08 95       	ret
    1d4e:	80 3a       	cpi	r24, 0xA0	; 160
    1d50:	29 e0       	ldi	r18, 0x09	; 9
    1d52:	92 07       	cpc	r25, r18
    1d54:	21 f4       	brne	.+8      	; 0x1d5e <usart_spi_init+0x30>
    1d56:	60 e1       	ldi	r22, 0x10	; 16
    1d58:	84 e0       	ldi	r24, 0x04	; 4
    1d5a:	11 c1       	rjmp	.+546    	; 0x1f7e <sysclk_enable_module>
    1d5c:	08 95       	ret
    1d5e:	80 3b       	cpi	r24, 0xB0	; 176
    1d60:	29 e0       	ldi	r18, 0x09	; 9
    1d62:	92 07       	cpc	r25, r18
    1d64:	21 f4       	brne	.+8      	; 0x1d6e <usart_spi_init+0x40>
    1d66:	60 e2       	ldi	r22, 0x20	; 32
    1d68:	84 e0       	ldi	r24, 0x04	; 4
    1d6a:	09 c1       	rjmp	.+530    	; 0x1f7e <sysclk_enable_module>
    1d6c:	08 95       	ret
    1d6e:	80 3a       	cpi	r24, 0xA0	; 160
    1d70:	2a e0       	ldi	r18, 0x0A	; 10
    1d72:	92 07       	cpc	r25, r18
    1d74:	21 f4       	brne	.+8      	; 0x1d7e <usart_spi_init+0x50>
    1d76:	60 e1       	ldi	r22, 0x10	; 16
    1d78:	85 e0       	ldi	r24, 0x05	; 5
    1d7a:	01 c1       	rjmp	.+514    	; 0x1f7e <sysclk_enable_module>
    1d7c:	08 95       	ret
    1d7e:	80 3a       	cpi	r24, 0xA0	; 160
    1d80:	9b 40       	sbci	r25, 0x0B	; 11
    1d82:	19 f4       	brne	.+6      	; 0x1d8a <usart_spi_init+0x5c>
    1d84:	60 e1       	ldi	r22, 0x10	; 16
    1d86:	86 e0       	ldi	r24, 0x06	; 6
    1d88:	fa c0       	rjmp	.+500    	; 0x1f7e <sysclk_enable_module>
    1d8a:	08 95       	ret

00001d8c <usart_spi_setup_device>:
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	00 d0       	rcall	.+0      	; 0x1d96 <usart_spi_setup_device+0xa>
    1d96:	00 d0       	rcall	.+0      	; 0x1d98 <usart_spi_setup_device+0xc>
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62
    1d9c:	09 83       	std	Y+1, r16	; 0x01
    1d9e:	1a 83       	std	Y+2, r17	; 0x02
    1da0:	2b 83       	std	Y+3, r18	; 0x03
    1da2:	3c 83       	std	Y+4, r19	; 0x04
    1da4:	4d 83       	std	Y+5, r20	; 0x05
    1da6:	1e 82       	std	Y+6, r1	; 0x06
    1da8:	be 01       	movw	r22, r28
    1daa:	6f 5f       	subi	r22, 0xFF	; 255
    1dac:	7f 4f       	sbci	r23, 0xFF	; 255
    1dae:	db dd       	rcall	.-1098   	; 0x1966 <usart_init_spi>
    1db0:	26 96       	adiw	r28, 0x06	; 6
    1db2:	cd bf       	out	0x3d, r28	; 61
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16
    1dbe:	08 95       	ret

00001dc0 <usart_spi_select_device>:

void usart_spi_select_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_low(device->id);
    1dc0:	fb 01       	movw	r30, r22
    1dc2:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1dc4:	e8 2f       	mov	r30, r24
    1dc6:	e6 95       	lsr	r30
    1dc8:	e6 95       	lsr	r30
    1dca:	e6 95       	lsr	r30
    1dcc:	40 e2       	ldi	r20, 0x20	; 32
    1dce:	e4 9f       	mul	r30, r20
    1dd0:	f0 01       	movw	r30, r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1dd6:	87 70       	andi	r24, 0x07	; 7
    1dd8:	21 e0       	ldi	r18, 0x01	; 1
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	a9 01       	movw	r20, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <usart_spi_select_device+0x24>
    1de0:	44 0f       	add	r20, r20
    1de2:	55 1f       	adc	r21, r21
    1de4:	8a 95       	dec	r24
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <usart_spi_select_device+0x20>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1de8:	46 83       	std	Z+6, r20	; 0x06
    1dea:	08 95       	ret

00001dec <usart_spi_deselect_device>:
}

void usart_spi_deselect_device(USART_t *usart, struct usart_spi_device *device)
{
	ioport_set_pin_high(device->id);
    1dec:	fb 01       	movw	r30, r22
    1dee:	80 81       	ld	r24, Z
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1df0:	e8 2f       	mov	r30, r24
    1df2:	e6 95       	lsr	r30
    1df4:	e6 95       	lsr	r30
    1df6:	e6 95       	lsr	r30
    1df8:	40 e2       	ldi	r20, 0x20	; 32
    1dfa:	e4 9f       	mul	r30, r20
    1dfc:	f0 01       	movw	r30, r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	fa 5f       	subi	r31, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1e02:	87 70       	andi	r24, 0x07	; 7
    1e04:	21 e0       	ldi	r18, 0x01	; 1
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	a9 01       	movw	r20, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <usart_spi_deselect_device+0x24>
    1e0c:	44 0f       	add	r20, r20
    1e0e:	55 1f       	adc	r21, r21
    1e10:	8a 95       	dec	r24
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <usart_spi_deselect_device+0x20>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1e14:	45 83       	std	Z+5, r20	; 0x05
    1e16:	08 95       	ret

00001e18 <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
    1e18:	80 93 60 22 	sts	0x2260, r24	; 0x802260 <fbpointer>
    1e1c:	90 93 61 22 	sts	0x2261, r25	; 0x802261 <fbpointer+0x1>
    1e20:	08 95       	ret

00001e22 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
    1e22:	20 91 60 22 	lds	r18, 0x2260	; 0x802260 <fbpointer>
    1e26:	30 91 61 22 	lds	r19, 0x2261	; 0x802261 <fbpointer+0x1>
    1e2a:	90 e8       	ldi	r25, 0x80	; 128
    1e2c:	89 9f       	mul	r24, r25
    1e2e:	20 0d       	add	r18, r0
    1e30:	31 1d       	adc	r19, r1
    1e32:	11 24       	eor	r1, r1
    1e34:	f9 01       	movw	r30, r18
    1e36:	e6 0f       	add	r30, r22
    1e38:	f1 1d       	adc	r31, r1
    1e3a:	40 83       	st	Z, r20
    1e3c:	08 95       	ret

00001e3e <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
    1e3e:	20 91 60 22 	lds	r18, 0x2260	; 0x802260 <fbpointer>
    1e42:	30 91 61 22 	lds	r19, 0x2261	; 0x802261 <fbpointer+0x1>
    1e46:	90 e8       	ldi	r25, 0x80	; 128
    1e48:	89 9f       	mul	r24, r25
    1e4a:	20 0d       	add	r18, r0
    1e4c:	31 1d       	adc	r19, r1
    1e4e:	11 24       	eor	r1, r1
    1e50:	f9 01       	movw	r30, r18
    1e52:	e6 0f       	add	r30, r22
    1e54:	f1 1d       	adc	r31, r1
}
    1e56:	80 81       	ld	r24, Z
    1e58:	08 95       	ret

00001e5a <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
    1e5a:	ff 92       	push	r15
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	e4 2f       	mov	r30, r20
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	e8 0f       	add	r30, r24
    1e6a:	f1 1d       	adc	r31, r1
    1e6c:	e1 38       	cpi	r30, 0x81	; 129
    1e6e:	f1 05       	cpc	r31, r1
    1e70:	1c f0       	brlt	.+6      	; 0x1e78 <gfx_mono_generic_draw_horizontal_line+0x1e>
    1e72:	c0 e8       	ldi	r28, 0x80	; 128
    1e74:	4c 2f       	mov	r20, r28
    1e76:	48 1b       	sub	r20, r24
    1e78:	44 23       	and	r20, r20
    1e7a:	09 f4       	brne	.+2      	; 0x1e7e <gfx_mono_generic_draw_horizontal_line+0x24>
    1e7c:	50 c0       	rjmp	.+160    	; 0x1f1e <gfx_mono_generic_draw_horizontal_line+0xc4>
    1e7e:	d6 2f       	mov	r29, r22
    1e80:	d6 95       	lsr	r29
    1e82:	d6 95       	lsr	r29
    1e84:	d6 95       	lsr	r29
    1e86:	70 e0       	ldi	r23, 0x00	; 0
    1e88:	98 e0       	ldi	r25, 0x08	; 8
    1e8a:	d9 9f       	mul	r29, r25
    1e8c:	60 19       	sub	r22, r0
    1e8e:	71 09       	sbc	r23, r1
    1e90:	11 24       	eor	r1, r1
    1e92:	e1 e0       	ldi	r30, 0x01	; 1
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	df 01       	movw	r26, r30
    1e98:	02 c0       	rjmp	.+4      	; 0x1e9e <gfx_mono_generic_draw_horizontal_line+0x44>
    1e9a:	aa 0f       	add	r26, r26
    1e9c:	bb 1f       	adc	r27, r27
    1e9e:	6a 95       	dec	r22
    1ea0:	e2 f7       	brpl	.-8      	; 0x1e9a <gfx_mono_generic_draw_horizontal_line+0x40>
    1ea2:	fa 2e       	mov	r15, r26
    1ea4:	21 30       	cpi	r18, 0x01	; 1
    1ea6:	21 f0       	breq	.+8      	; 0x1eb0 <gfx_mono_generic_draw_horizontal_line+0x56>
    1ea8:	a8 f0       	brcs	.+42     	; 0x1ed4 <gfx_mono_generic_draw_horizontal_line+0x7a>
    1eaa:	22 30       	cpi	r18, 0x02	; 2
    1eac:	39 f1       	breq	.+78     	; 0x1efc <gfx_mono_generic_draw_horizontal_line+0xa2>
    1eae:	37 c0       	rjmp	.+110    	; 0x1f1e <gfx_mono_generic_draw_horizontal_line+0xc4>
    1eb0:	c4 2f       	mov	r28, r20
    1eb2:	1f ef       	ldi	r17, 0xFF	; 255
    1eb4:	18 0f       	add	r17, r24
    1eb6:	01 2f       	mov	r16, r17
    1eb8:	0c 0f       	add	r16, r28
    1eba:	60 2f       	mov	r22, r16
    1ebc:	8d 2f       	mov	r24, r29
    1ebe:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <gfx_mono_st7565r_get_byte>
    1ec2:	4f 2d       	mov	r20, r15
    1ec4:	48 2b       	or	r20, r24
    1ec6:	60 2f       	mov	r22, r16
    1ec8:	8d 2f       	mov	r24, r29
    1eca:	0e 94 50 04 	call	0x8a0	; 0x8a0 <gfx_mono_st7565r_put_byte>
    1ece:	c1 50       	subi	r28, 0x01	; 1
    1ed0:	91 f7       	brne	.-28     	; 0x1eb6 <gfx_mono_generic_draw_horizontal_line+0x5c>
    1ed2:	25 c0       	rjmp	.+74     	; 0x1f1e <gfx_mono_generic_draw_horizontal_line+0xc4>
    1ed4:	c4 2f       	mov	r28, r20
    1ed6:	1f ef       	ldi	r17, 0xFF	; 255
    1ed8:	18 0f       	add	r17, r24
    1eda:	fa 2e       	mov	r15, r26
    1edc:	f0 94       	com	r15
    1ede:	01 2f       	mov	r16, r17
    1ee0:	0c 0f       	add	r16, r28
    1ee2:	60 2f       	mov	r22, r16
    1ee4:	8d 2f       	mov	r24, r29
    1ee6:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <gfx_mono_st7565r_get_byte>
    1eea:	4f 2d       	mov	r20, r15
    1eec:	48 23       	and	r20, r24
    1eee:	60 2f       	mov	r22, r16
    1ef0:	8d 2f       	mov	r24, r29
    1ef2:	0e 94 50 04 	call	0x8a0	; 0x8a0 <gfx_mono_st7565r_put_byte>
    1ef6:	c1 50       	subi	r28, 0x01	; 1
    1ef8:	91 f7       	brne	.-28     	; 0x1ede <gfx_mono_generic_draw_horizontal_line+0x84>
    1efa:	11 c0       	rjmp	.+34     	; 0x1f1e <gfx_mono_generic_draw_horizontal_line+0xc4>
    1efc:	c4 2f       	mov	r28, r20
    1efe:	1f ef       	ldi	r17, 0xFF	; 255
    1f00:	18 0f       	add	r17, r24
    1f02:	01 2f       	mov	r16, r17
    1f04:	0c 0f       	add	r16, r28
    1f06:	60 2f       	mov	r22, r16
    1f08:	8d 2f       	mov	r24, r29
    1f0a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <gfx_mono_st7565r_get_byte>
    1f0e:	4f 2d       	mov	r20, r15
    1f10:	48 27       	eor	r20, r24
    1f12:	60 2f       	mov	r22, r16
    1f14:	8d 2f       	mov	r24, r29
    1f16:	0e 94 50 04 	call	0x8a0	; 0x8a0 <gfx_mono_st7565r_put_byte>
    1f1a:	c1 50       	subi	r28, 0x01	; 1
    1f1c:	91 f7       	brne	.-28     	; 0x1f02 <gfx_mono_generic_draw_horizontal_line+0xa8>
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	08 95       	ret

00001f2a <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
	if (height == 0) {
    1f34:	22 23       	and	r18, r18
    1f36:	69 f0       	breq	.+26     	; 0x1f52 <gfx_mono_generic_draw_filled_rect+0x28>
    1f38:	f4 2e       	mov	r15, r20
    1f3a:	18 2f       	mov	r17, r24
    1f3c:	c2 2f       	mov	r28, r18
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
    1f3e:	df ef       	ldi	r29, 0xFF	; 255
    1f40:	d6 0f       	add	r29, r22
    1f42:	6d 2f       	mov	r22, r29
    1f44:	6c 0f       	add	r22, r28
    1f46:	20 2f       	mov	r18, r16
    1f48:	4f 2d       	mov	r20, r15
    1f4a:	81 2f       	mov	r24, r17
    1f4c:	86 df       	rcall	.-244    	; 0x1e5a <gfx_mono_generic_draw_horizontal_line>
    1f4e:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
    1f50:	c1 f7       	brne	.-16     	; 0x1f42 <gfx_mono_generic_draw_filled_rect+0x18>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
    1f52:	df 91       	pop	r29
    1f54:	cf 91       	pop	r28
    1f56:	1f 91       	pop	r17
    1f58:	0f 91       	pop	r16
    1f5a:	ff 90       	pop	r15
    1f5c:	08 95       	ret

00001f5e <sysclk_init>:
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    1f5e:	8f ef       	ldi	r24, 0xFF	; 255
    1f60:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    1f64:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    1f68:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    1f6c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    1f70:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    1f74:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    1f78:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>
    1f7c:	08 95       	ret

00001f7e <sysclk_enable_module>:
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	1f 92       	push	r1
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1f88:	9f b7       	in	r25, 0x3f	; 63
    1f8a:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1f8c:	f8 94       	cli
	return flags;
    1f8e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1f90:	e8 2f       	mov	r30, r24
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	e0 59       	subi	r30, 0x90	; 144
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	60 95       	com	r22
    1f9a:	80 81       	ld	r24, Z
    1f9c:	68 23       	and	r22, r24
    1f9e:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1fa0:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1fa2:	0f 90       	pop	r0
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	08 95       	ret

00001faa <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
    1faa:	af 92       	push	r10
    1fac:	bf 92       	push	r11
    1fae:	cf 92       	push	r12
    1fb0:	df 92       	push	r13
    1fb2:	ef 92       	push	r14
    1fb4:	ff 92       	push	r15
    1fb6:	0f 93       	push	r16
    1fb8:	1f 93       	push	r17
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	c8 2f       	mov	r28, r24
    1fc0:	e6 2e       	mov	r14, r22
    1fc2:	b4 2e       	mov	r11, r20
    1fc4:	69 01       	movw	r12, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
    1fc6:	00 e0       	ldi	r16, 0x00	; 0
    1fc8:	f9 01       	movw	r30, r18
    1fca:	24 81       	ldd	r18, Z+4	; 0x04
    1fcc:	43 81       	ldd	r20, Z+3	; 0x03
    1fce:	6b 2d       	mov	r22, r11
    1fd0:	8e 2d       	mov	r24, r14
    1fd2:	ab df       	rcall	.-170    	; 0x1f2a <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
    1fd4:	f6 01       	movw	r30, r12
    1fd6:	80 81       	ld	r24, Z
    1fd8:	81 11       	cpse	r24, r1
    1fda:	3a c0       	rjmp	.+116    	; 0x2050 <gfx_mono_draw_char+0xa6>
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
    1fdc:	83 81       	ldd	r24, Z+3	; 0x03
    1fde:	28 2f       	mov	r18, r24
    1fe0:	26 95       	lsr	r18
    1fe2:	26 95       	lsr	r18
    1fe4:	26 95       	lsr	r18
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
    1fe6:	87 70       	andi	r24, 0x07	; 7
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <gfx_mono_draw_char+0x42>
		char_row_size++;
    1fea:	2f 5f       	subi	r18, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
    1fec:	f6 01       	movw	r30, r12
    1fee:	a4 80       	ldd	r10, Z+4	; 0x04
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
    1ff0:	8c 2f       	mov	r24, r28
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	35 81       	ldd	r19, Z+5	; 0x05
    1ff6:	83 1b       	sub	r24, r19
    1ff8:	91 09       	sbc	r25, r1
    1ffa:	2a 9d       	mul	r18, r10
    1ffc:	90 01       	movw	r18, r0
    1ffe:	11 24       	eor	r1, r1
    2000:	82 9f       	mul	r24, r18
    2002:	a0 01       	movw	r20, r0
    2004:	83 9f       	mul	r24, r19
    2006:	50 0d       	add	r21, r0
    2008:	92 9f       	mul	r25, r18
    200a:	50 0d       	add	r21, r0
    200c:	11 24       	eor	r1, r1
    200e:	01 81       	ldd	r16, Z+1	; 0x01
    2010:	12 81       	ldd	r17, Z+2	; 0x02
    2012:	04 0f       	add	r16, r20
    2014:	15 1f       	adc	r17, r21
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
    2016:	f6 01       	movw	r30, r12
    2018:	f3 80       	ldd	r15, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
    201a:	ff 20       	and	r15, r15
    201c:	a9 f0       	breq	.+42     	; 0x2048 <gfx_mono_draw_char+0x9e>
    201e:	d0 e0       	ldi	r29, 0x00	; 0
    2020:	c0 e0       	ldi	r28, 0x00	; 0
    2022:	8e 2d       	mov	r24, r14
    2024:	8c 0f       	add	r24, r28
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
    2026:	9c 2f       	mov	r25, r28
    2028:	97 70       	andi	r25, 0x07	; 7
    202a:	21 f4       	brne	.+8      	; 0x2034 <gfx_mono_draw_char+0x8a>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
    202c:	f8 01       	movw	r30, r16
    202e:	d4 91       	lpm	r29, Z
				glyph_data++;
    2030:	0f 5f       	subi	r16, 0xFF	; 255
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
			}

			if ((glyph_byte & 0x80)) {
    2034:	dd 23       	and	r29, r29
    2036:	24 f4       	brge	.+8      	; 0x2040 <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
    2038:	41 e0       	ldi	r20, 0x01	; 1
    203a:	6b 2d       	mov	r22, r11
    203c:	0e 94 45 05 	call	0xa8a	; 0xa8a <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
    2040:	dd 0f       	add	r29, r29

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
    2042:	cf 5f       	subi	r28, 0xFF	; 255
    2044:	fc 12       	cpse	r15, r28
    2046:	ed cf       	rjmp	.-38     	; 0x2022 <gfx_mono_draw_char+0x78>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
    2048:	b3 94       	inc	r11
		inc_x = x;
		rows_left--;
    204a:	aa 94       	dec	r10
	} while (rows_left > 0);
    204c:	a1 10       	cpse	r10, r1
    204e:	e3 cf       	rjmp	.-58     	; 0x2016 <gfx_mono_draw_char+0x6c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
    2050:	df 91       	pop	r29
    2052:	cf 91       	pop	r28
    2054:	1f 91       	pop	r17
    2056:	0f 91       	pop	r16
    2058:	ff 90       	pop	r15
    205a:	ef 90       	pop	r14
    205c:	df 90       	pop	r13
    205e:	cf 90       	pop	r12
    2060:	bf 90       	pop	r11
    2062:	af 90       	pop	r10
    2064:	08 95       	ret

00002066 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
    2066:	df 92       	push	r13
    2068:	ef 92       	push	r14
    206a:	ff 92       	push	r15
    206c:	0f 93       	push	r16
    206e:	1f 93       	push	r17
    2070:	cf 93       	push	r28
    2072:	df 93       	push	r29
    2074:	d6 2e       	mov	r13, r22
    2076:	04 2f       	mov	r16, r20
    2078:	79 01       	movw	r14, r18
    207a:	ec 01       	movw	r28, r24
    207c:	16 2f       	mov	r17, r22
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
    207e:	89 91       	ld	r24, Y+
    2080:	8a 30       	cpi	r24, 0x0A	; 10
    2082:	31 f4       	brne	.+12     	; 0x2090 <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
    2084:	f7 01       	movw	r30, r14
    2086:	84 81       	ldd	r24, Z+4	; 0x04
    2088:	8f 5f       	subi	r24, 0xFF	; 255
    208a:	08 0f       	add	r16, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
    208c:	1d 2d       	mov	r17, r13
    208e:	09 c0       	rjmp	.+18     	; 0x20a2 <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
    2090:	8d 30       	cpi	r24, 0x0D	; 13
    2092:	39 f0       	breq	.+14     	; 0x20a2 <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
    2094:	97 01       	movw	r18, r14
    2096:	40 2f       	mov	r20, r16
    2098:	61 2f       	mov	r22, r17
    209a:	87 df       	rcall	.-242    	; 0x1faa <gfx_mono_draw_char>
			x += font->width;
    209c:	f7 01       	movw	r30, r14
    209e:	83 81       	ldd	r24, Z+3	; 0x03
    20a0:	18 0f       	add	r17, r24
		}
	} while (*(++str));
    20a2:	88 81       	ld	r24, Y
    20a4:	81 11       	cpse	r24, r1
    20a6:	eb cf       	rjmp	.-42     	; 0x207e <gfx_mono_draw_string+0x18>
}
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	df 90       	pop	r13
    20b6:	08 95       	ret

000020b8 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    20be:	20 e0       	ldi	r18, 0x00	; 0
    20c0:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
    20c2:	c6 2f       	mov	r28, r22
    20c4:	d0 e0       	ldi	r29, 0x00	; 0
    20c6:	de 01       	movw	r26, r28
    20c8:	02 2e       	mov	r0, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <ioport_configure_port_pin+0x18>
    20cc:	b5 95       	asr	r27
    20ce:	a7 95       	ror	r26
    20d0:	0a 94       	dec	r0
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <ioport_configure_port_pin+0x14>
    20d4:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
    20d6:	50 8b       	std	Z+16, r21	; 0x10
    20d8:	2f 5f       	subi	r18, 0xFF	; 255
    20da:	3f 4f       	sbci	r19, 0xFF	; 255
    20dc:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
    20de:	28 30       	cpi	r18, 0x08	; 8
    20e0:	31 05       	cpc	r19, r1
    20e2:	89 f7       	brne	.-30     	; 0x20c6 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
    20e4:	40 ff       	sbrs	r20, 0
    20e6:	0a c0       	rjmp	.+20     	; 0x20fc <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
    20e8:	41 ff       	sbrs	r20, 1
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
    20ec:	fc 01       	movw	r30, r24
    20ee:	65 83       	std	Z+5, r22	; 0x05
    20f0:	02 c0       	rjmp	.+4      	; 0x20f6 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
    20f2:	fc 01       	movw	r30, r24
    20f4:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
    20f6:	fc 01       	movw	r30, r24
    20f8:	61 83       	std	Z+1, r22	; 0x01
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
    20fc:	fc 01       	movw	r30, r24
    20fe:	62 83       	std	Z+2, r22	; 0x02
	}
}
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	08 95       	ret

00002106 <board_init>:
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
    2106:	43 e0       	ldi	r20, 0x03	; 3
    2108:	50 e0       	ldi	r21, 0x00	; 0
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	80 ee       	ldi	r24, 0xE0	; 224
    210e:	97 e0       	ldi	r25, 0x07	; 7
    2110:	d3 df       	rcall	.-90     	; 0x20b8 <ioport_configure_port_pin>
    2112:	43 e0       	ldi	r20, 0x03	; 3
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	62 e0       	ldi	r22, 0x02	; 2
    2118:	80 ee       	ldi	r24, 0xE0	; 224
    211a:	97 e0       	ldi	r25, 0x07	; 7
    211c:	cd df       	rcall	.-102    	; 0x20b8 <ioport_configure_port_pin>
    211e:	43 e0       	ldi	r20, 0x03	; 3
    2120:	50 e0       	ldi	r21, 0x00	; 0
    2122:	60 e1       	ldi	r22, 0x10	; 16
    2124:	80 e6       	ldi	r24, 0x60	; 96
    2126:	96 e0       	ldi	r25, 0x06	; 6
    2128:	c7 df       	rcall	.-114    	; 0x20b8 <ioport_configure_port_pin>
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	50 e4       	ldi	r21, 0x40	; 64
    212e:	60 e2       	ldi	r22, 0x20	; 32
    2130:	80 e6       	ldi	r24, 0x60	; 96
    2132:	96 e0       	ldi	r25, 0x06	; 6
    2134:	c1 df       	rcall	.-126    	; 0x20b8 <ioport_configure_port_pin>
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	5b e1       	ldi	r21, 0x1B	; 27
    213a:	60 e2       	ldi	r22, 0x20	; 32
    213c:	80 e8       	ldi	r24, 0x80	; 128
    213e:	96 e0       	ldi	r25, 0x06	; 6
    2140:	bb df       	rcall	.-138    	; 0x20b8 <ioport_configure_port_pin>
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	5b e1       	ldi	r21, 0x1B	; 27
    2146:	62 e0       	ldi	r22, 0x02	; 2
    2148:	80 ea       	ldi	r24, 0xA0	; 160
    214a:	96 e0       	ldi	r25, 0x06	; 6
    214c:	b5 df       	rcall	.-150    	; 0x20b8 <ioport_configure_port_pin>
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	5b e1       	ldi	r21, 0x1B	; 27
    2152:	64 e0       	ldi	r22, 0x04	; 4
    2154:	80 ea       	ldi	r24, 0xA0	; 160
    2156:	96 e0       	ldi	r25, 0x06	; 6
    2158:	af df       	rcall	.-162    	; 0x20b8 <ioport_configure_port_pin>
    215a:	43 e0       	ldi	r20, 0x03	; 3
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	62 e0       	ldi	r22, 0x02	; 2
    2160:	80 e6       	ldi	r24, 0x60	; 96
    2162:	96 e0       	ldi	r25, 0x06	; 6
    2164:	a9 df       	rcall	.-174    	; 0x20b8 <ioport_configure_port_pin>
    2166:	43 e0       	ldi	r20, 0x03	; 3
    2168:	50 e0       	ldi	r21, 0x00	; 0
    216a:	68 e0       	ldi	r22, 0x08	; 8
    216c:	80 e6       	ldi	r24, 0x60	; 96
    216e:	96 e0       	ldi	r25, 0x06	; 6
    2170:	a3 df       	rcall	.-186    	; 0x20b8 <ioport_configure_port_pin>
    2172:	43 e0       	ldi	r20, 0x03	; 3
    2174:	50 e0       	ldi	r21, 0x00	; 0
    2176:	68 e0       	ldi	r22, 0x08	; 8
    2178:	80 ea       	ldi	r24, 0xA0	; 160
    217a:	96 e0       	ldi	r25, 0x06	; 6
    217c:	9d df       	rcall	.-198    	; 0x20b8 <ioport_configure_port_pin>
    217e:	43 e0       	ldi	r20, 0x03	; 3
    2180:	50 e0       	ldi	r21, 0x00	; 0
    2182:	61 e0       	ldi	r22, 0x01	; 1
    2184:	80 e6       	ldi	r24, 0x60	; 96
    2186:	96 e0       	ldi	r25, 0x06	; 6
    2188:	97 df       	rcall	.-210    	; 0x20b8 <ioport_configure_port_pin>
    218a:	43 e0       	ldi	r20, 0x03	; 3
    218c:	50 e0       	ldi	r21, 0x00	; 0
    218e:	68 e0       	ldi	r22, 0x08	; 8
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	96 e0       	ldi	r25, 0x06	; 6
    2194:	91 df       	rcall	.-222    	; 0x20b8 <ioport_configure_port_pin>
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	60 e1       	ldi	r22, 0x10	; 16
    219c:	80 e8       	ldi	r24, 0x80	; 128
    219e:	96 e0       	ldi	r25, 0x06	; 6
    21a0:	8b df       	rcall	.-234    	; 0x20b8 <ioport_configure_port_pin>
    21a2:	43 e0       	ldi	r20, 0x03	; 3
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	62 e0       	ldi	r22, 0x02	; 2
    21a8:	80 e6       	ldi	r24, 0x60	; 96
    21aa:	96 e0       	ldi	r25, 0x06	; 6
    21ac:	85 df       	rcall	.-246    	; 0x20b8 <ioport_configure_port_pin>
    21ae:	43 e0       	ldi	r20, 0x03	; 3
    21b0:	50 e0       	ldi	r21, 0x00	; 0
    21b2:	68 e0       	ldi	r22, 0x08	; 8
    21b4:	80 e6       	ldi	r24, 0x60	; 96
    21b6:	96 e0       	ldi	r25, 0x06	; 6
    21b8:	7f df       	rcall	.-258    	; 0x20b8 <ioport_configure_port_pin>
    21ba:	40 e0       	ldi	r20, 0x00	; 0
    21bc:	50 e0       	ldi	r21, 0x00	; 0
    21be:	64 e0       	ldi	r22, 0x04	; 4
    21c0:	80 e6       	ldi	r24, 0x60	; 96
    21c2:	96 e0       	ldi	r25, 0x06	; 6
    21c4:	79 df       	rcall	.-270    	; 0x20b8 <ioport_configure_port_pin>
    21c6:	43 e0       	ldi	r20, 0x03	; 3
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	60 e1       	ldi	r22, 0x10	; 16
    21cc:	80 ea       	ldi	r24, 0xA0	; 160
    21ce:	96 e0       	ldi	r25, 0x06	; 6
    21d0:	73 df       	rcall	.-282    	; 0x20b8 <ioport_configure_port_pin>
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	61 e0       	ldi	r22, 0x01	; 1
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	96 e0       	ldi	r25, 0x06	; 6
    21dc:	6d df       	rcall	.-294    	; 0x20b8 <ioport_configure_port_pin>
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	64 e0       	ldi	r22, 0x04	; 4
    21e4:	80 e0       	ldi	r24, 0x00	; 0
    21e6:	96 e0       	ldi	r25, 0x06	; 6
    21e8:	67 df       	rcall	.-306    	; 0x20b8 <ioport_configure_port_pin>
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	62 e0       	ldi	r22, 0x02	; 2
    21f0:	80 e2       	ldi	r24, 0x20	; 32
    21f2:	96 e0       	ldi	r25, 0x06	; 6
    21f4:	61 df       	rcall	.-318    	; 0x20b8 <ioport_configure_port_pin>
    21f6:	43 e0       	ldi	r20, 0x03	; 3
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	68 e0       	ldi	r22, 0x08	; 8
    21fc:	80 e4       	ldi	r24, 0x40	; 64
    21fe:	96 e0       	ldi	r25, 0x06	; 6
    2200:	5b df       	rcall	.-330    	; 0x20b8 <ioport_configure_port_pin>
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	64 e0       	ldi	r22, 0x04	; 4
    2208:	80 e4       	ldi	r24, 0x40	; 64
    220a:	96 e0       	ldi	r25, 0x06	; 6
    220c:	55 df       	rcall	.-342    	; 0x20b8 <ioport_configure_port_pin>
    220e:	43 e0       	ldi	r20, 0x03	; 3
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	68 e0       	ldi	r22, 0x08	; 8
    2214:	80 e6       	ldi	r24, 0x60	; 96
    2216:	96 e0       	ldi	r25, 0x06	; 6
    2218:	4f df       	rcall	.-354    	; 0x20b8 <ioport_configure_port_pin>
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	50 e0       	ldi	r21, 0x00	; 0
    221e:	64 e0       	ldi	r22, 0x04	; 4
    2220:	80 e6       	ldi	r24, 0x60	; 96
    2222:	96 e0       	ldi	r25, 0x06	; 6
    2224:	49 df       	rcall	.-366    	; 0x20b8 <ioport_configure_port_pin>
    2226:	43 e0       	ldi	r20, 0x03	; 3
    2228:	50 e0       	ldi	r21, 0x00	; 0
    222a:	68 e0       	ldi	r22, 0x08	; 8
    222c:	80 e8       	ldi	r24, 0x80	; 128
    222e:	96 e0       	ldi	r25, 0x06	; 6
    2230:	43 df       	rcall	.-378    	; 0x20b8 <ioport_configure_port_pin>
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	50 e0       	ldi	r21, 0x00	; 0
    2236:	64 e0       	ldi	r22, 0x04	; 4
    2238:	80 e8       	ldi	r24, 0x80	; 128
    223a:	96 e0       	ldi	r25, 0x06	; 6
    223c:	3d cf       	rjmp	.-390    	; 0x20b8 <ioport_configure_port_pin>
    223e:	08 95       	ret

00002240 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2240:	04 c0       	rjmp	.+8      	; 0x224a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2242:	61 50       	subi	r22, 0x01	; 1
    2244:	71 09       	sbc	r23, r1
    2246:	81 09       	sbc	r24, r1
    2248:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    224a:	61 15       	cp	r22, r1
    224c:	71 05       	cpc	r23, r1
    224e:	81 05       	cpc	r24, r1
    2250:	91 05       	cpc	r25, r1
    2252:	b9 f7       	brne	.-18     	; 0x2242 <__portable_avr_delay_cycles+0x2>
    2254:	08 95       	ret

00002256 <print_message>:
	tc_write_clock_source(&TCC0, TC_CLKSEL_DIV1_gc);	
}

//Fungsi ini bukan utk print message, tapi increment nilai variabel "increment" setiap 29us
void print_message(void){
	incremental = incremental + 1;
    2256:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <incremental>
    225a:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <incremental+0x1>
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <incremental>
    2264:	90 93 2b 23 	sts	0x232B, r25	; 0x80232b <incremental+0x1>
    2268:	08 95       	ret

0000226a <setup_timer>:
int distance = 0;
static char buffarray[200];

//Fungsi setup timer
void setup_timer(void){
	tc_enable(&TCC0);
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	98 e0       	ldi	r25, 0x08	; 8
    226e:	9b da       	rcall	.-2762   	; 0x17a6 <tc_enable>
	tc_set_overflow_interrupt_callback(&TCC0,print_message);
    2270:	6b e2       	ldi	r22, 0x2B	; 43
    2272:	71 e1       	ldi	r23, 0x11	; 17
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	98 e0       	ldi	r25, 0x08	; 8
    2278:	07 db       	rcall	.-2546   	; 0x1888 <tc_set_overflow_interrupt_callback>
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
    227a:	e0 e0       	ldi	r30, 0x00	; 0
    227c:	f8 e0       	ldi	r31, 0x08	; 8
    227e:	81 81       	ldd	r24, Z+1	; 0x01
    2280:	88 7f       	andi	r24, 0xF8	; 248
    2282:	81 83       	std	Z+1, r24	; 0x01
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
    2284:	8a e3       	ldi	r24, 0x3A	; 58
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	86 a3       	std	Z+38, r24	; 0x26
    228a:	97 a3       	std	Z+39, r25	; 0x27
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
    228c:	86 81       	ldd	r24, Z+6	; 0x06
    228e:	8c 7f       	andi	r24, 0xFC	; 252
    2290:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
    2292:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
    2294:	83 60       	ori	r24, 0x03	; 3
    2296:	86 83       	std	Z+6, r24	; 0x06
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
    2298:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
    229a:	80 7f       	andi	r24, 0xF0	; 240
    229c:	81 60       	ori	r24, 0x01	; 1
    229e:	80 83       	st	Z, r24
    22a0:	08 95       	ret

000022a2 <main>:
}

int main (void)
{
	// Insert system clock initialization code here (sysclk_init()).
	board_init();
    22a2:	31 df       	rcall	.-414    	; 0x2106 <board_init>
	sysclk_init();
    22a4:	5c de       	rcall	.-840    	; 0x1f5e <sysclk_init>
    22a6:	87 e0       	ldi	r24, 0x07	; 7
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    22a8:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
    22ac:	0e 94 00 05 	call	0xa00	; 0xa00 <gfx_mono_st7565r_init>
	pmic_init();
	gfx_mono_init();
    22b0:	80 e1       	ldi	r24, 0x10	; 16
    22b2:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    22b6:	64 e0       	ldi	r22, 0x04	; 4
	
	gpio_set_pin_high(NHD_C12832A1Z_BACKLIGHT);

	// Workaround for known issue: Enable RTC32 sysclk
	sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	61 de       	rcall	.-830    	; 0x1f7e <sysclk_enable_module>
    22bc:	e0 e2       	ldi	r30, 0x20	; 32
	while (RTC32.SYNCCTRL & RTC32_SYNCBUSY_bm) {
    22be:	f4 e0       	ldi	r31, 0x04	; 4
    22c0:	81 81       	ldd	r24, Z+1	; 0x01
    22c2:	80 fd       	sbrc	r24, 0
    22c4:	fd cf       	rjmp	.-6      	; 0x22c0 <main+0x1e>
    22c6:	66 e1       	ldi	r22, 0x16	; 22
		// Wait for RTC32 sysclk to become stable
	}
	
	delay_ms(1000);
    22c8:	76 e1       	ldi	r23, 0x16	; 22
    22ca:	85 e0       	ldi	r24, 0x05	; 5
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	b8 df       	rcall	.-144    	; 0x2240 <__portable_avr_delay_cycles>
	setup_timer();
    22d0:	cc df       	rcall	.-104    	; 0x226a <setup_timer>
    22d2:	c0 e2       	ldi	r28, 0x20	; 32
	
	// Insert application code here, after the board has been initialized.
	while(1){
		PORTB.DIR = 0b11111111; //Set output
    22d4:	d6 e0       	ldi	r29, 0x06	; 6
    22d6:	99 24       	eor	r9, r9
    22d8:	9a 94       	dec	r9
    22da:	0f 2e       	mov	r0, r31
			delay_ms(100);
			incremental = 0;
		} else {
			int inc = newinc - oldinc;
			int newscore = inc/2; //Dibagi 2 seperti rumus sonar
			snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", newscore);
    22dc:	f7 e0       	ldi	r31, 0x07	; 7
    22de:	ef 2e       	mov	r14, r31
    22e0:	f0 e2       	ldi	r31, 0x20	; 32
    22e2:	ff 2e       	mov	r15, r31
    22e4:	f0 2d       	mov	r31, r0
    22e6:	0f 2e       	mov	r0, r31
    22e8:	f8 ec       	ldi	r31, 0xC8	; 200
    22ea:	8f 2e       	mov	r8, r31
    22ec:	f0 2d       	mov	r31, r0
    22ee:	02 e6       	ldi	r16, 0x62	; 98
    22f0:	12 e2       	ldi	r17, 0x22	; 34
    22f2:	0f 2e       	mov	r0, r31
			//Tidak ada apa-apa di sini. Loop ini berfungsi untuk mendeteksi pin 0 PORT B yang berubah menjadi low
		}
		int newinc = incremental; //Catat selisih waktu antara suara dikirim hingga diterima
		cpu_irq_disable(); //Interrupt dimatikan
		if (incremental > 300){ //Jika hasil lebih dari 300 cm, dibulatkan menjadi 300 cm
			score = 300;
    22f4:	fc e2       	ldi	r31, 0x2C	; 44
    22f6:	cf 2e       	mov	r12, r31
    22f8:	dd 24       	eor	r13, r13
    22fa:	d3 94       	inc	r13
    22fc:	f0 2d       	mov	r31, r0
    22fe:	66 24       	eor	r6, r6
			snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", score);
    2300:	63 94       	inc	r6
    2302:	0f 2e       	mov	r0, r31
    2304:	fc e2       	ldi	r31, 0x2C	; 44
    2306:	7f 2e       	mov	r7, r31
    2308:	f0 2d       	mov	r31, r0
    230a:	98 82       	st	Y, r9
	delay_ms(1000);
	setup_timer();
	
	// Insert application code here, after the board has been initialized.
	while(1){
		PORTB.DIR = 0b11111111; //Set output
    230c:	1c 82       	std	Y+4, r1	; 0x04
		PORTB.OUT = 0b00000000; //Set low
    230e:	9c 82       	std	Y+4, r9	; 0x04
		PORTB.OUT = 0b11111111; //Set high selama 5us
		delay_us(5);
    2310:	62 e0       	ldi	r22, 0x02	; 2
    2312:	70 e0       	ldi	r23, 0x00	; 0
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	93 df       	rcall	.-218    	; 0x2240 <__portable_avr_delay_cycles>
    231a:	1c 82       	std	Y+4, r1	; 0x04
		PORTB.OUT = 0b00000000; //Kembali menjadi low
		PORTB.DIR = 0b00000000; //Set menjadi input
    231c:	18 82       	st	Y, r1
		delay_us(750); //Delay holdoff selama 750us
    231e:	6b ef       	ldi	r22, 0xFB	; 251
    2320:	70 e0       	ldi	r23, 0x00	; 0
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	8c df       	rcall	.-232    	; 0x2240 <__portable_avr_delay_cycles>
    2328:	a0 90 2a 23 	lds	r10, 0x232A	; 0x80232a <incremental>
		int oldinc = incremental;
    232c:	b0 90 2b 23 	lds	r11, 0x232B	; 0x80232b <incremental+0x1>
		delay_us(115); //Delay lagi, kali ini seharusnya pin menjadi high
    2330:	67 e2       	ldi	r22, 0x27	; 39
    2332:	70 e0       	ldi	r23, 0x00	; 0
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	83 df       	rcall	.-250    	; 0x2240 <__portable_avr_delay_cycles>
    233a:	78 94       	sei
		cpu_irq_enable(); //Mulai interrupt
    233c:	88 85       	ldd	r24, Y+8	; 0x08
		while(PORTB.IN & PIN0_bm){
    233e:	80 fd       	sbrc	r24, 0
    2340:	fd cf       	rjmp	.-6      	; 0x233c <main+0x9a>
    2342:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <incremental>
			//Tidak ada apa-apa di sini. Loop ini berfungsi untuk mendeteksi pin 0 PORT B yang berubah menjadi low
		}
		int newinc = incremental; //Catat selisih waktu antara suara dikirim hingga diterima
    2346:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <incremental+0x1>
    234a:	f8 94       	cli
		cpu_irq_disable(); //Interrupt dimatikan
    234c:	20 91 2a 23 	lds	r18, 0x232A	; 0x80232a <incremental>
		if (incremental > 300){ //Jika hasil lebih dari 300 cm, dibulatkan menjadi 300 cm
    2350:	30 91 2b 23 	lds	r19, 0x232B	; 0x80232b <incremental+0x1>
    2354:	2d 32       	cpi	r18, 0x2D	; 45
    2356:	31 40       	sbci	r19, 0x01	; 1
    2358:	14 f1       	brlt	.+68     	; 0x239e <main+0xfc>
    235a:	c0 92 2c 23 	sts	0x232C, r12	; 0x80232c <score>
			score = 300;
    235e:	d0 92 2d 23 	sts	0x232D, r13	; 0x80232d <score+0x1>
    2362:	6f 92       	push	r6
			snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", score);
    2364:	7f 92       	push	r7
    2366:	ff 92       	push	r15
    2368:	ef 92       	push	r14
    236a:	1f 92       	push	r1
    236c:	8f 92       	push	r8
    236e:	1f 93       	push	r17
    2370:	0f 93       	push	r16
    2372:	5e d0       	rcall	.+188    	; 0x2430 <snprintf>
			gfx_mono_draw_string(buffarray, 0, 0, &sysfont);
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e2       	ldi	r19, 0x20	; 32
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	60 e0       	ldi	r22, 0x00	; 0
    237c:	c8 01       	movw	r24, r16
    237e:	73 de       	rcall	.-794    	; 0x2066 <gfx_mono_draw_string>
			delay_ms(100);
    2380:	66 e3       	ldi	r22, 0x36	; 54
    2382:	72 e8       	ldi	r23, 0x82	; 130
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	5b df       	rcall	.-330    	; 0x2240 <__portable_avr_delay_cycles>
    238a:	10 92 2a 23 	sts	0x232A, r1	; 0x80232a <incremental>
			incremental = 0;
    238e:	10 92 2b 23 	sts	0x232B, r1	; 0x80232b <incremental+0x1>
    2392:	8d b7       	in	r24, 0x3d	; 61
    2394:	9e b7       	in	r25, 0x3e	; 62
    2396:	08 96       	adiw	r24, 0x08	; 8
    2398:	8d bf       	out	0x3d, r24	; 61
    239a:	9e bf       	out	0x3e, r25	; 62
    239c:	b6 cf       	rjmp	.-148    	; 0x230a <main+0x68>
    239e:	9c 01       	movw	r18, r24
		} else {
			int inc = newinc - oldinc;
			int newscore = inc/2; //Dibagi 2 seperti rumus sonar
			snprintf(buffarray, sizeof(buffarray), "Panjang: %d cm  ", newscore);
    23a0:	2a 19       	sub	r18, r10
    23a2:	3b 09       	sbc	r19, r11
    23a4:	c9 01       	movw	r24, r18
    23a6:	99 23       	and	r25, r25
    23a8:	0c f4       	brge	.+2      	; 0x23ac <main+0x10a>
    23aa:	01 96       	adiw	r24, 0x01	; 1
    23ac:	95 95       	asr	r25
    23ae:	87 95       	ror	r24
    23b0:	9f 93       	push	r25
    23b2:	8f 93       	push	r24
    23b4:	ff 92       	push	r15
    23b6:	ef 92       	push	r14
    23b8:	1f 92       	push	r1
    23ba:	8f 92       	push	r8
    23bc:	1f 93       	push	r17
    23be:	0f 93       	push	r16
    23c0:	37 d0       	rcall	.+110    	; 0x2430 <snprintf>
			gfx_mono_draw_string(buffarray, 0, 0, &sysfont);
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e2       	ldi	r19, 0x20	; 32
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	60 e0       	ldi	r22, 0x00	; 0
    23ca:	c8 01       	movw	r24, r16
    23cc:	4c de       	rcall	.-872    	; 0x2066 <gfx_mono_draw_string>
    23ce:	66 e3       	ldi	r22, 0x36	; 54
			delay_ms(100);
    23d0:	72 e8       	ldi	r23, 0x82	; 130
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	34 df       	rcall	.-408    	; 0x2240 <__portable_avr_delay_cycles>
    23d8:	10 92 2a 23 	sts	0x232A, r1	; 0x80232a <incremental>
			incremental = 0; //reset nilai variable incremental
    23dc:	10 92 2b 23 	sts	0x232B, r1	; 0x80232b <incremental+0x1>
    23e0:	8d b7       	in	r24, 0x3d	; 61
    23e2:	9e b7       	in	r25, 0x3e	; 62
    23e4:	08 96       	adiw	r24, 0x08	; 8
    23e6:	8d bf       	out	0x3d, r24	; 61
    23e8:	9e bf       	out	0x3e, r25	; 62
    23ea:	8f cf       	rjmp	.-226    	; 0x230a <main+0x68>

000023ec <__udivmodsi4>:
    23ec:	a1 e2       	ldi	r26, 0x21	; 33
    23ee:	1a 2e       	mov	r1, r26
    23f0:	aa 1b       	sub	r26, r26
    23f2:	bb 1b       	sub	r27, r27
    23f4:	fd 01       	movw	r30, r26
    23f6:	0d c0       	rjmp	.+26     	; 0x2412 <__udivmodsi4_ep>

000023f8 <__udivmodsi4_loop>:
    23f8:	aa 1f       	adc	r26, r26
    23fa:	bb 1f       	adc	r27, r27
    23fc:	ee 1f       	adc	r30, r30
    23fe:	ff 1f       	adc	r31, r31
    2400:	a2 17       	cp	r26, r18
    2402:	b3 07       	cpc	r27, r19
    2404:	e4 07       	cpc	r30, r20
    2406:	f5 07       	cpc	r31, r21
    2408:	20 f0       	brcs	.+8      	; 0x2412 <__udivmodsi4_ep>
    240a:	a2 1b       	sub	r26, r18
    240c:	b3 0b       	sbc	r27, r19
    240e:	e4 0b       	sbc	r30, r20
    2410:	f5 0b       	sbc	r31, r21

00002412 <__udivmodsi4_ep>:
    2412:	66 1f       	adc	r22, r22
    2414:	77 1f       	adc	r23, r23
    2416:	88 1f       	adc	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	1a 94       	dec	r1
    241c:	69 f7       	brne	.-38     	; 0x23f8 <__udivmodsi4_loop>
    241e:	60 95       	com	r22
    2420:	70 95       	com	r23
    2422:	80 95       	com	r24
    2424:	90 95       	com	r25
    2426:	9b 01       	movw	r18, r22
    2428:	ac 01       	movw	r20, r24
    242a:	bd 01       	movw	r22, r26
    242c:	cf 01       	movw	r24, r30
    242e:	08 95       	ret

00002430 <snprintf>:
    2430:	0f 93       	push	r16
    2432:	1f 93       	push	r17
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	cd b7       	in	r28, 0x3d	; 61
    243a:	de b7       	in	r29, 0x3e	; 62
    243c:	2e 97       	sbiw	r28, 0x0e	; 14
    243e:	cd bf       	out	0x3d, r28	; 61
    2440:	de bf       	out	0x3e, r29	; 62
    2442:	0e 89       	ldd	r16, Y+22	; 0x16
    2444:	1f 89       	ldd	r17, Y+23	; 0x17
    2446:	88 8d       	ldd	r24, Y+24	; 0x18
    2448:	99 8d       	ldd	r25, Y+25	; 0x19
    244a:	26 e0       	ldi	r18, 0x06	; 6
    244c:	2c 83       	std	Y+4, r18	; 0x04
    244e:	09 83       	std	Y+1, r16	; 0x01
    2450:	1a 83       	std	Y+2, r17	; 0x02
    2452:	97 ff       	sbrs	r25, 7
    2454:	02 c0       	rjmp	.+4      	; 0x245a <snprintf+0x2a>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e8       	ldi	r25, 0x80	; 128
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	8d 83       	std	Y+5, r24	; 0x05
    245e:	9e 83       	std	Y+6, r25	; 0x06
    2460:	ae 01       	movw	r20, r28
    2462:	44 5e       	subi	r20, 0xE4	; 228
    2464:	5f 4f       	sbci	r21, 0xFF	; 255
    2466:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2468:	7b 8d       	ldd	r23, Y+27	; 0x1b
    246a:	ce 01       	movw	r24, r28
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	16 d0       	rcall	.+44     	; 0x249c <vfprintf>
    2470:	4d 81       	ldd	r20, Y+5	; 0x05
    2472:	5e 81       	ldd	r21, Y+6	; 0x06
    2474:	57 fd       	sbrc	r21, 7
    2476:	0a c0       	rjmp	.+20     	; 0x248c <snprintf+0x5c>
    2478:	2f 81       	ldd	r18, Y+7	; 0x07
    247a:	38 85       	ldd	r19, Y+8	; 0x08
    247c:	42 17       	cp	r20, r18
    247e:	53 07       	cpc	r21, r19
    2480:	0c f4       	brge	.+2      	; 0x2484 <snprintf+0x54>
    2482:	9a 01       	movw	r18, r20
    2484:	f8 01       	movw	r30, r16
    2486:	e2 0f       	add	r30, r18
    2488:	f3 1f       	adc	r31, r19
    248a:	10 82       	st	Z, r1
    248c:	2e 96       	adiw	r28, 0x0e	; 14
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	08 95       	ret

0000249c <vfprintf>:
    249c:	2f 92       	push	r2
    249e:	3f 92       	push	r3
    24a0:	4f 92       	push	r4
    24a2:	5f 92       	push	r5
    24a4:	6f 92       	push	r6
    24a6:	7f 92       	push	r7
    24a8:	8f 92       	push	r8
    24aa:	9f 92       	push	r9
    24ac:	af 92       	push	r10
    24ae:	bf 92       	push	r11
    24b0:	cf 92       	push	r12
    24b2:	df 92       	push	r13
    24b4:	ef 92       	push	r14
    24b6:	ff 92       	push	r15
    24b8:	0f 93       	push	r16
    24ba:	1f 93       	push	r17
    24bc:	cf 93       	push	r28
    24be:	df 93       	push	r29
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
    24c4:	2b 97       	sbiw	r28, 0x0b	; 11
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	6c 01       	movw	r12, r24
    24cc:	7b 01       	movw	r14, r22
    24ce:	8a 01       	movw	r16, r20
    24d0:	fc 01       	movw	r30, r24
    24d2:	16 82       	std	Z+6, r1	; 0x06
    24d4:	17 82       	std	Z+7, r1	; 0x07
    24d6:	83 81       	ldd	r24, Z+3	; 0x03
    24d8:	81 ff       	sbrs	r24, 1
    24da:	bf c1       	rjmp	.+894    	; 0x285a <vfprintf+0x3be>
    24dc:	ce 01       	movw	r24, r28
    24de:	01 96       	adiw	r24, 0x01	; 1
    24e0:	3c 01       	movw	r6, r24
    24e2:	f6 01       	movw	r30, r12
    24e4:	93 81       	ldd	r25, Z+3	; 0x03
    24e6:	f7 01       	movw	r30, r14
    24e8:	93 fd       	sbrc	r25, 3
    24ea:	85 91       	lpm	r24, Z+
    24ec:	93 ff       	sbrs	r25, 3
    24ee:	81 91       	ld	r24, Z+
    24f0:	7f 01       	movw	r14, r30
    24f2:	88 23       	and	r24, r24
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <vfprintf+0x5c>
    24f6:	ad c1       	rjmp	.+858    	; 0x2852 <vfprintf+0x3b6>
    24f8:	85 32       	cpi	r24, 0x25	; 37
    24fa:	39 f4       	brne	.+14     	; 0x250a <vfprintf+0x6e>
    24fc:	93 fd       	sbrc	r25, 3
    24fe:	85 91       	lpm	r24, Z+
    2500:	93 ff       	sbrs	r25, 3
    2502:	81 91       	ld	r24, Z+
    2504:	7f 01       	movw	r14, r30
    2506:	85 32       	cpi	r24, 0x25	; 37
    2508:	21 f4       	brne	.+8      	; 0x2512 <vfprintf+0x76>
    250a:	b6 01       	movw	r22, r12
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	d3 d1       	rcall	.+934    	; 0x28b6 <fputc>
    2510:	e8 cf       	rjmp	.-48     	; 0x24e2 <vfprintf+0x46>
    2512:	91 2c       	mov	r9, r1
    2514:	21 2c       	mov	r2, r1
    2516:	31 2c       	mov	r3, r1
    2518:	ff e1       	ldi	r31, 0x1F	; 31
    251a:	f3 15       	cp	r31, r3
    251c:	d8 f0       	brcs	.+54     	; 0x2554 <vfprintf+0xb8>
    251e:	8b 32       	cpi	r24, 0x2B	; 43
    2520:	79 f0       	breq	.+30     	; 0x2540 <vfprintf+0xa4>
    2522:	38 f4       	brcc	.+14     	; 0x2532 <vfprintf+0x96>
    2524:	80 32       	cpi	r24, 0x20	; 32
    2526:	79 f0       	breq	.+30     	; 0x2546 <vfprintf+0xaa>
    2528:	83 32       	cpi	r24, 0x23	; 35
    252a:	a1 f4       	brne	.+40     	; 0x2554 <vfprintf+0xb8>
    252c:	23 2d       	mov	r18, r3
    252e:	20 61       	ori	r18, 0x10	; 16
    2530:	1d c0       	rjmp	.+58     	; 0x256c <vfprintf+0xd0>
    2532:	8d 32       	cpi	r24, 0x2D	; 45
    2534:	61 f0       	breq	.+24     	; 0x254e <vfprintf+0xb2>
    2536:	80 33       	cpi	r24, 0x30	; 48
    2538:	69 f4       	brne	.+26     	; 0x2554 <vfprintf+0xb8>
    253a:	23 2d       	mov	r18, r3
    253c:	21 60       	ori	r18, 0x01	; 1
    253e:	16 c0       	rjmp	.+44     	; 0x256c <vfprintf+0xd0>
    2540:	83 2d       	mov	r24, r3
    2542:	82 60       	ori	r24, 0x02	; 2
    2544:	38 2e       	mov	r3, r24
    2546:	e3 2d       	mov	r30, r3
    2548:	e4 60       	ori	r30, 0x04	; 4
    254a:	3e 2e       	mov	r3, r30
    254c:	2a c0       	rjmp	.+84     	; 0x25a2 <vfprintf+0x106>
    254e:	f3 2d       	mov	r31, r3
    2550:	f8 60       	ori	r31, 0x08	; 8
    2552:	1d c0       	rjmp	.+58     	; 0x258e <vfprintf+0xf2>
    2554:	37 fc       	sbrc	r3, 7
    2556:	2d c0       	rjmp	.+90     	; 0x25b2 <vfprintf+0x116>
    2558:	20 ed       	ldi	r18, 0xD0	; 208
    255a:	28 0f       	add	r18, r24
    255c:	2a 30       	cpi	r18, 0x0A	; 10
    255e:	40 f0       	brcs	.+16     	; 0x2570 <vfprintf+0xd4>
    2560:	8e 32       	cpi	r24, 0x2E	; 46
    2562:	b9 f4       	brne	.+46     	; 0x2592 <vfprintf+0xf6>
    2564:	36 fc       	sbrc	r3, 6
    2566:	75 c1       	rjmp	.+746    	; 0x2852 <vfprintf+0x3b6>
    2568:	23 2d       	mov	r18, r3
    256a:	20 64       	ori	r18, 0x40	; 64
    256c:	32 2e       	mov	r3, r18
    256e:	19 c0       	rjmp	.+50     	; 0x25a2 <vfprintf+0x106>
    2570:	36 fe       	sbrs	r3, 6
    2572:	06 c0       	rjmp	.+12     	; 0x2580 <vfprintf+0xe4>
    2574:	8a e0       	ldi	r24, 0x0A	; 10
    2576:	98 9e       	mul	r9, r24
    2578:	20 0d       	add	r18, r0
    257a:	11 24       	eor	r1, r1
    257c:	92 2e       	mov	r9, r18
    257e:	11 c0       	rjmp	.+34     	; 0x25a2 <vfprintf+0x106>
    2580:	ea e0       	ldi	r30, 0x0A	; 10
    2582:	2e 9e       	mul	r2, r30
    2584:	20 0d       	add	r18, r0
    2586:	11 24       	eor	r1, r1
    2588:	22 2e       	mov	r2, r18
    258a:	f3 2d       	mov	r31, r3
    258c:	f0 62       	ori	r31, 0x20	; 32
    258e:	3f 2e       	mov	r3, r31
    2590:	08 c0       	rjmp	.+16     	; 0x25a2 <vfprintf+0x106>
    2592:	8c 36       	cpi	r24, 0x6C	; 108
    2594:	21 f4       	brne	.+8      	; 0x259e <vfprintf+0x102>
    2596:	83 2d       	mov	r24, r3
    2598:	80 68       	ori	r24, 0x80	; 128
    259a:	38 2e       	mov	r3, r24
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <vfprintf+0x106>
    259e:	88 36       	cpi	r24, 0x68	; 104
    25a0:	41 f4       	brne	.+16     	; 0x25b2 <vfprintf+0x116>
    25a2:	f7 01       	movw	r30, r14
    25a4:	93 fd       	sbrc	r25, 3
    25a6:	85 91       	lpm	r24, Z+
    25a8:	93 ff       	sbrs	r25, 3
    25aa:	81 91       	ld	r24, Z+
    25ac:	7f 01       	movw	r14, r30
    25ae:	81 11       	cpse	r24, r1
    25b0:	b3 cf       	rjmp	.-154    	; 0x2518 <vfprintf+0x7c>
    25b2:	98 2f       	mov	r25, r24
    25b4:	9f 7d       	andi	r25, 0xDF	; 223
    25b6:	95 54       	subi	r25, 0x45	; 69
    25b8:	93 30       	cpi	r25, 0x03	; 3
    25ba:	28 f4       	brcc	.+10     	; 0x25c6 <vfprintf+0x12a>
    25bc:	0c 5f       	subi	r16, 0xFC	; 252
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	9f e3       	ldi	r25, 0x3F	; 63
    25c2:	99 83       	std	Y+1, r25	; 0x01
    25c4:	0d c0       	rjmp	.+26     	; 0x25e0 <vfprintf+0x144>
    25c6:	83 36       	cpi	r24, 0x63	; 99
    25c8:	31 f0       	breq	.+12     	; 0x25d6 <vfprintf+0x13a>
    25ca:	83 37       	cpi	r24, 0x73	; 115
    25cc:	71 f0       	breq	.+28     	; 0x25ea <vfprintf+0x14e>
    25ce:	83 35       	cpi	r24, 0x53	; 83
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <vfprintf+0x138>
    25d2:	55 c0       	rjmp	.+170    	; 0x267e <vfprintf+0x1e2>
    25d4:	20 c0       	rjmp	.+64     	; 0x2616 <vfprintf+0x17a>
    25d6:	f8 01       	movw	r30, r16
    25d8:	80 81       	ld	r24, Z
    25da:	89 83       	std	Y+1, r24	; 0x01
    25dc:	0e 5f       	subi	r16, 0xFE	; 254
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	88 24       	eor	r8, r8
    25e2:	83 94       	inc	r8
    25e4:	91 2c       	mov	r9, r1
    25e6:	53 01       	movw	r10, r6
    25e8:	12 c0       	rjmp	.+36     	; 0x260e <vfprintf+0x172>
    25ea:	28 01       	movw	r4, r16
    25ec:	f2 e0       	ldi	r31, 0x02	; 2
    25ee:	4f 0e       	add	r4, r31
    25f0:	51 1c       	adc	r5, r1
    25f2:	f8 01       	movw	r30, r16
    25f4:	a0 80       	ld	r10, Z
    25f6:	b1 80       	ldd	r11, Z+1	; 0x01
    25f8:	36 fe       	sbrs	r3, 6
    25fa:	03 c0       	rjmp	.+6      	; 0x2602 <vfprintf+0x166>
    25fc:	69 2d       	mov	r22, r9
    25fe:	70 e0       	ldi	r23, 0x00	; 0
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <vfprintf+0x16a>
    2602:	6f ef       	ldi	r22, 0xFF	; 255
    2604:	7f ef       	ldi	r23, 0xFF	; 255
    2606:	c5 01       	movw	r24, r10
    2608:	4b d1       	rcall	.+662    	; 0x28a0 <strnlen>
    260a:	4c 01       	movw	r8, r24
    260c:	82 01       	movw	r16, r4
    260e:	f3 2d       	mov	r31, r3
    2610:	ff 77       	andi	r31, 0x7F	; 127
    2612:	3f 2e       	mov	r3, r31
    2614:	15 c0       	rjmp	.+42     	; 0x2640 <vfprintf+0x1a4>
    2616:	28 01       	movw	r4, r16
    2618:	22 e0       	ldi	r18, 0x02	; 2
    261a:	42 0e       	add	r4, r18
    261c:	51 1c       	adc	r5, r1
    261e:	f8 01       	movw	r30, r16
    2620:	a0 80       	ld	r10, Z
    2622:	b1 80       	ldd	r11, Z+1	; 0x01
    2624:	36 fe       	sbrs	r3, 6
    2626:	03 c0       	rjmp	.+6      	; 0x262e <vfprintf+0x192>
    2628:	69 2d       	mov	r22, r9
    262a:	70 e0       	ldi	r23, 0x00	; 0
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <vfprintf+0x196>
    262e:	6f ef       	ldi	r22, 0xFF	; 255
    2630:	7f ef       	ldi	r23, 0xFF	; 255
    2632:	c5 01       	movw	r24, r10
    2634:	2a d1       	rcall	.+596    	; 0x288a <strnlen_P>
    2636:	4c 01       	movw	r8, r24
    2638:	f3 2d       	mov	r31, r3
    263a:	f0 68       	ori	r31, 0x80	; 128
    263c:	3f 2e       	mov	r3, r31
    263e:	82 01       	movw	r16, r4
    2640:	33 fc       	sbrc	r3, 3
    2642:	19 c0       	rjmp	.+50     	; 0x2676 <vfprintf+0x1da>
    2644:	82 2d       	mov	r24, r2
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	88 16       	cp	r8, r24
    264a:	99 06       	cpc	r9, r25
    264c:	a0 f4       	brcc	.+40     	; 0x2676 <vfprintf+0x1da>
    264e:	b6 01       	movw	r22, r12
    2650:	80 e2       	ldi	r24, 0x20	; 32
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	30 d1       	rcall	.+608    	; 0x28b6 <fputc>
    2656:	2a 94       	dec	r2
    2658:	f5 cf       	rjmp	.-22     	; 0x2644 <vfprintf+0x1a8>
    265a:	f5 01       	movw	r30, r10
    265c:	37 fc       	sbrc	r3, 7
    265e:	85 91       	lpm	r24, Z+
    2660:	37 fe       	sbrs	r3, 7
    2662:	81 91       	ld	r24, Z+
    2664:	5f 01       	movw	r10, r30
    2666:	b6 01       	movw	r22, r12
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	25 d1       	rcall	.+586    	; 0x28b6 <fputc>
    266c:	21 10       	cpse	r2, r1
    266e:	2a 94       	dec	r2
    2670:	21 e0       	ldi	r18, 0x01	; 1
    2672:	82 1a       	sub	r8, r18
    2674:	91 08       	sbc	r9, r1
    2676:	81 14       	cp	r8, r1
    2678:	91 04       	cpc	r9, r1
    267a:	79 f7       	brne	.-34     	; 0x265a <vfprintf+0x1be>
    267c:	e1 c0       	rjmp	.+450    	; 0x2840 <vfprintf+0x3a4>
    267e:	84 36       	cpi	r24, 0x64	; 100
    2680:	11 f0       	breq	.+4      	; 0x2686 <vfprintf+0x1ea>
    2682:	89 36       	cpi	r24, 0x69	; 105
    2684:	39 f5       	brne	.+78     	; 0x26d4 <vfprintf+0x238>
    2686:	f8 01       	movw	r30, r16
    2688:	37 fe       	sbrs	r3, 7
    268a:	07 c0       	rjmp	.+14     	; 0x269a <vfprintf+0x1fe>
    268c:	60 81       	ld	r22, Z
    268e:	71 81       	ldd	r23, Z+1	; 0x01
    2690:	82 81       	ldd	r24, Z+2	; 0x02
    2692:	93 81       	ldd	r25, Z+3	; 0x03
    2694:	0c 5f       	subi	r16, 0xFC	; 252
    2696:	1f 4f       	sbci	r17, 0xFF	; 255
    2698:	08 c0       	rjmp	.+16     	; 0x26aa <vfprintf+0x20e>
    269a:	60 81       	ld	r22, Z
    269c:	71 81       	ldd	r23, Z+1	; 0x01
    269e:	07 2e       	mov	r0, r23
    26a0:	00 0c       	add	r0, r0
    26a2:	88 0b       	sbc	r24, r24
    26a4:	99 0b       	sbc	r25, r25
    26a6:	0e 5f       	subi	r16, 0xFE	; 254
    26a8:	1f 4f       	sbci	r17, 0xFF	; 255
    26aa:	f3 2d       	mov	r31, r3
    26ac:	ff 76       	andi	r31, 0x6F	; 111
    26ae:	3f 2e       	mov	r3, r31
    26b0:	97 ff       	sbrs	r25, 7
    26b2:	09 c0       	rjmp	.+18     	; 0x26c6 <vfprintf+0x22a>
    26b4:	90 95       	com	r25
    26b6:	80 95       	com	r24
    26b8:	70 95       	com	r23
    26ba:	61 95       	neg	r22
    26bc:	7f 4f       	sbci	r23, 0xFF	; 255
    26be:	8f 4f       	sbci	r24, 0xFF	; 255
    26c0:	9f 4f       	sbci	r25, 0xFF	; 255
    26c2:	f0 68       	ori	r31, 0x80	; 128
    26c4:	3f 2e       	mov	r3, r31
    26c6:	2a e0       	ldi	r18, 0x0A	; 10
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	a3 01       	movw	r20, r6
    26cc:	30 d1       	rcall	.+608    	; 0x292e <__ultoa_invert>
    26ce:	88 2e       	mov	r8, r24
    26d0:	86 18       	sub	r8, r6
    26d2:	44 c0       	rjmp	.+136    	; 0x275c <vfprintf+0x2c0>
    26d4:	85 37       	cpi	r24, 0x75	; 117
    26d6:	31 f4       	brne	.+12     	; 0x26e4 <vfprintf+0x248>
    26d8:	23 2d       	mov	r18, r3
    26da:	2f 7e       	andi	r18, 0xEF	; 239
    26dc:	b2 2e       	mov	r11, r18
    26de:	2a e0       	ldi	r18, 0x0A	; 10
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	25 c0       	rjmp	.+74     	; 0x272e <vfprintf+0x292>
    26e4:	93 2d       	mov	r25, r3
    26e6:	99 7f       	andi	r25, 0xF9	; 249
    26e8:	b9 2e       	mov	r11, r25
    26ea:	8f 36       	cpi	r24, 0x6F	; 111
    26ec:	c1 f0       	breq	.+48     	; 0x271e <vfprintf+0x282>
    26ee:	18 f4       	brcc	.+6      	; 0x26f6 <vfprintf+0x25a>
    26f0:	88 35       	cpi	r24, 0x58	; 88
    26f2:	79 f0       	breq	.+30     	; 0x2712 <vfprintf+0x276>
    26f4:	ae c0       	rjmp	.+348    	; 0x2852 <vfprintf+0x3b6>
    26f6:	80 37       	cpi	r24, 0x70	; 112
    26f8:	19 f0       	breq	.+6      	; 0x2700 <vfprintf+0x264>
    26fa:	88 37       	cpi	r24, 0x78	; 120
    26fc:	21 f0       	breq	.+8      	; 0x2706 <vfprintf+0x26a>
    26fe:	a9 c0       	rjmp	.+338    	; 0x2852 <vfprintf+0x3b6>
    2700:	e9 2f       	mov	r30, r25
    2702:	e0 61       	ori	r30, 0x10	; 16
    2704:	be 2e       	mov	r11, r30
    2706:	b4 fe       	sbrs	r11, 4
    2708:	0d c0       	rjmp	.+26     	; 0x2724 <vfprintf+0x288>
    270a:	fb 2d       	mov	r31, r11
    270c:	f4 60       	ori	r31, 0x04	; 4
    270e:	bf 2e       	mov	r11, r31
    2710:	09 c0       	rjmp	.+18     	; 0x2724 <vfprintf+0x288>
    2712:	34 fe       	sbrs	r3, 4
    2714:	0a c0       	rjmp	.+20     	; 0x272a <vfprintf+0x28e>
    2716:	29 2f       	mov	r18, r25
    2718:	26 60       	ori	r18, 0x06	; 6
    271a:	b2 2e       	mov	r11, r18
    271c:	06 c0       	rjmp	.+12     	; 0x272a <vfprintf+0x28e>
    271e:	28 e0       	ldi	r18, 0x08	; 8
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	05 c0       	rjmp	.+10     	; 0x272e <vfprintf+0x292>
    2724:	20 e1       	ldi	r18, 0x10	; 16
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	02 c0       	rjmp	.+4      	; 0x272e <vfprintf+0x292>
    272a:	20 e1       	ldi	r18, 0x10	; 16
    272c:	32 e0       	ldi	r19, 0x02	; 2
    272e:	f8 01       	movw	r30, r16
    2730:	b7 fe       	sbrs	r11, 7
    2732:	07 c0       	rjmp	.+14     	; 0x2742 <vfprintf+0x2a6>
    2734:	60 81       	ld	r22, Z
    2736:	71 81       	ldd	r23, Z+1	; 0x01
    2738:	82 81       	ldd	r24, Z+2	; 0x02
    273a:	93 81       	ldd	r25, Z+3	; 0x03
    273c:	0c 5f       	subi	r16, 0xFC	; 252
    273e:	1f 4f       	sbci	r17, 0xFF	; 255
    2740:	06 c0       	rjmp	.+12     	; 0x274e <vfprintf+0x2b2>
    2742:	60 81       	ld	r22, Z
    2744:	71 81       	ldd	r23, Z+1	; 0x01
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	0e 5f       	subi	r16, 0xFE	; 254
    274c:	1f 4f       	sbci	r17, 0xFF	; 255
    274e:	a3 01       	movw	r20, r6
    2750:	ee d0       	rcall	.+476    	; 0x292e <__ultoa_invert>
    2752:	88 2e       	mov	r8, r24
    2754:	86 18       	sub	r8, r6
    2756:	fb 2d       	mov	r31, r11
    2758:	ff 77       	andi	r31, 0x7F	; 127
    275a:	3f 2e       	mov	r3, r31
    275c:	36 fe       	sbrs	r3, 6
    275e:	0d c0       	rjmp	.+26     	; 0x277a <vfprintf+0x2de>
    2760:	23 2d       	mov	r18, r3
    2762:	2e 7f       	andi	r18, 0xFE	; 254
    2764:	a2 2e       	mov	r10, r18
    2766:	89 14       	cp	r8, r9
    2768:	58 f4       	brcc	.+22     	; 0x2780 <vfprintf+0x2e4>
    276a:	34 fe       	sbrs	r3, 4
    276c:	0b c0       	rjmp	.+22     	; 0x2784 <vfprintf+0x2e8>
    276e:	32 fc       	sbrc	r3, 2
    2770:	09 c0       	rjmp	.+18     	; 0x2784 <vfprintf+0x2e8>
    2772:	83 2d       	mov	r24, r3
    2774:	8e 7e       	andi	r24, 0xEE	; 238
    2776:	a8 2e       	mov	r10, r24
    2778:	05 c0       	rjmp	.+10     	; 0x2784 <vfprintf+0x2e8>
    277a:	b8 2c       	mov	r11, r8
    277c:	a3 2c       	mov	r10, r3
    277e:	03 c0       	rjmp	.+6      	; 0x2786 <vfprintf+0x2ea>
    2780:	b8 2c       	mov	r11, r8
    2782:	01 c0       	rjmp	.+2      	; 0x2786 <vfprintf+0x2ea>
    2784:	b9 2c       	mov	r11, r9
    2786:	a4 fe       	sbrs	r10, 4
    2788:	0f c0       	rjmp	.+30     	; 0x27a8 <vfprintf+0x30c>
    278a:	fe 01       	movw	r30, r28
    278c:	e8 0d       	add	r30, r8
    278e:	f1 1d       	adc	r31, r1
    2790:	80 81       	ld	r24, Z
    2792:	80 33       	cpi	r24, 0x30	; 48
    2794:	21 f4       	brne	.+8      	; 0x279e <vfprintf+0x302>
    2796:	9a 2d       	mov	r25, r10
    2798:	99 7e       	andi	r25, 0xE9	; 233
    279a:	a9 2e       	mov	r10, r25
    279c:	09 c0       	rjmp	.+18     	; 0x27b0 <vfprintf+0x314>
    279e:	a2 fe       	sbrs	r10, 2
    27a0:	06 c0       	rjmp	.+12     	; 0x27ae <vfprintf+0x312>
    27a2:	b3 94       	inc	r11
    27a4:	b3 94       	inc	r11
    27a6:	04 c0       	rjmp	.+8      	; 0x27b0 <vfprintf+0x314>
    27a8:	8a 2d       	mov	r24, r10
    27aa:	86 78       	andi	r24, 0x86	; 134
    27ac:	09 f0       	breq	.+2      	; 0x27b0 <vfprintf+0x314>
    27ae:	b3 94       	inc	r11
    27b0:	a3 fc       	sbrc	r10, 3
    27b2:	10 c0       	rjmp	.+32     	; 0x27d4 <vfprintf+0x338>
    27b4:	a0 fe       	sbrs	r10, 0
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <vfprintf+0x328>
    27b8:	b2 14       	cp	r11, r2
    27ba:	80 f4       	brcc	.+32     	; 0x27dc <vfprintf+0x340>
    27bc:	28 0c       	add	r2, r8
    27be:	92 2c       	mov	r9, r2
    27c0:	9b 18       	sub	r9, r11
    27c2:	0d c0       	rjmp	.+26     	; 0x27de <vfprintf+0x342>
    27c4:	b2 14       	cp	r11, r2
    27c6:	58 f4       	brcc	.+22     	; 0x27de <vfprintf+0x342>
    27c8:	b6 01       	movw	r22, r12
    27ca:	80 e2       	ldi	r24, 0x20	; 32
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	73 d0       	rcall	.+230    	; 0x28b6 <fputc>
    27d0:	b3 94       	inc	r11
    27d2:	f8 cf       	rjmp	.-16     	; 0x27c4 <vfprintf+0x328>
    27d4:	b2 14       	cp	r11, r2
    27d6:	18 f4       	brcc	.+6      	; 0x27de <vfprintf+0x342>
    27d8:	2b 18       	sub	r2, r11
    27da:	02 c0       	rjmp	.+4      	; 0x27e0 <vfprintf+0x344>
    27dc:	98 2c       	mov	r9, r8
    27de:	21 2c       	mov	r2, r1
    27e0:	a4 fe       	sbrs	r10, 4
    27e2:	0f c0       	rjmp	.+30     	; 0x2802 <vfprintf+0x366>
    27e4:	b6 01       	movw	r22, r12
    27e6:	80 e3       	ldi	r24, 0x30	; 48
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	65 d0       	rcall	.+202    	; 0x28b6 <fputc>
    27ec:	a2 fe       	sbrs	r10, 2
    27ee:	16 c0       	rjmp	.+44     	; 0x281c <vfprintf+0x380>
    27f0:	a1 fc       	sbrc	r10, 1
    27f2:	03 c0       	rjmp	.+6      	; 0x27fa <vfprintf+0x35e>
    27f4:	88 e7       	ldi	r24, 0x78	; 120
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	02 c0       	rjmp	.+4      	; 0x27fe <vfprintf+0x362>
    27fa:	88 e5       	ldi	r24, 0x58	; 88
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	b6 01       	movw	r22, r12
    2800:	0c c0       	rjmp	.+24     	; 0x281a <vfprintf+0x37e>
    2802:	8a 2d       	mov	r24, r10
    2804:	86 78       	andi	r24, 0x86	; 134
    2806:	51 f0       	breq	.+20     	; 0x281c <vfprintf+0x380>
    2808:	a1 fe       	sbrs	r10, 1
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <vfprintf+0x374>
    280c:	8b e2       	ldi	r24, 0x2B	; 43
    280e:	01 c0       	rjmp	.+2      	; 0x2812 <vfprintf+0x376>
    2810:	80 e2       	ldi	r24, 0x20	; 32
    2812:	a7 fc       	sbrc	r10, 7
    2814:	8d e2       	ldi	r24, 0x2D	; 45
    2816:	b6 01       	movw	r22, r12
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	4d d0       	rcall	.+154    	; 0x28b6 <fputc>
    281c:	89 14       	cp	r8, r9
    281e:	30 f4       	brcc	.+12     	; 0x282c <vfprintf+0x390>
    2820:	b6 01       	movw	r22, r12
    2822:	80 e3       	ldi	r24, 0x30	; 48
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	47 d0       	rcall	.+142    	; 0x28b6 <fputc>
    2828:	9a 94       	dec	r9
    282a:	f8 cf       	rjmp	.-16     	; 0x281c <vfprintf+0x380>
    282c:	8a 94       	dec	r8
    282e:	f3 01       	movw	r30, r6
    2830:	e8 0d       	add	r30, r8
    2832:	f1 1d       	adc	r31, r1
    2834:	80 81       	ld	r24, Z
    2836:	b6 01       	movw	r22, r12
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	3d d0       	rcall	.+122    	; 0x28b6 <fputc>
    283c:	81 10       	cpse	r8, r1
    283e:	f6 cf       	rjmp	.-20     	; 0x282c <vfprintf+0x390>
    2840:	22 20       	and	r2, r2
    2842:	09 f4       	brne	.+2      	; 0x2846 <vfprintf+0x3aa>
    2844:	4e ce       	rjmp	.-868    	; 0x24e2 <vfprintf+0x46>
    2846:	b6 01       	movw	r22, r12
    2848:	80 e2       	ldi	r24, 0x20	; 32
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	34 d0       	rcall	.+104    	; 0x28b6 <fputc>
    284e:	2a 94       	dec	r2
    2850:	f7 cf       	rjmp	.-18     	; 0x2840 <vfprintf+0x3a4>
    2852:	f6 01       	movw	r30, r12
    2854:	86 81       	ldd	r24, Z+6	; 0x06
    2856:	97 81       	ldd	r25, Z+7	; 0x07
    2858:	02 c0       	rjmp	.+4      	; 0x285e <vfprintf+0x3c2>
    285a:	8f ef       	ldi	r24, 0xFF	; 255
    285c:	9f ef       	ldi	r25, 0xFF	; 255
    285e:	2b 96       	adiw	r28, 0x0b	; 11
    2860:	cd bf       	out	0x3d, r28	; 61
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	df 91       	pop	r29
    2866:	cf 91       	pop	r28
    2868:	1f 91       	pop	r17
    286a:	0f 91       	pop	r16
    286c:	ff 90       	pop	r15
    286e:	ef 90       	pop	r14
    2870:	df 90       	pop	r13
    2872:	cf 90       	pop	r12
    2874:	bf 90       	pop	r11
    2876:	af 90       	pop	r10
    2878:	9f 90       	pop	r9
    287a:	8f 90       	pop	r8
    287c:	7f 90       	pop	r7
    287e:	6f 90       	pop	r6
    2880:	5f 90       	pop	r5
    2882:	4f 90       	pop	r4
    2884:	3f 90       	pop	r3
    2886:	2f 90       	pop	r2
    2888:	08 95       	ret

0000288a <strnlen_P>:
    288a:	fc 01       	movw	r30, r24
    288c:	05 90       	lpm	r0, Z+
    288e:	61 50       	subi	r22, 0x01	; 1
    2890:	70 40       	sbci	r23, 0x00	; 0
    2892:	01 10       	cpse	r0, r1
    2894:	d8 f7       	brcc	.-10     	; 0x288c <strnlen_P+0x2>
    2896:	80 95       	com	r24
    2898:	90 95       	com	r25
    289a:	8e 0f       	add	r24, r30
    289c:	9f 1f       	adc	r25, r31
    289e:	08 95       	ret

000028a0 <strnlen>:
    28a0:	fc 01       	movw	r30, r24
    28a2:	61 50       	subi	r22, 0x01	; 1
    28a4:	70 40       	sbci	r23, 0x00	; 0
    28a6:	01 90       	ld	r0, Z+
    28a8:	01 10       	cpse	r0, r1
    28aa:	d8 f7       	brcc	.-10     	; 0x28a2 <strnlen+0x2>
    28ac:	80 95       	com	r24
    28ae:	90 95       	com	r25
    28b0:	8e 0f       	add	r24, r30
    28b2:	9f 1f       	adc	r25, r31
    28b4:	08 95       	ret

000028b6 <fputc>:
    28b6:	0f 93       	push	r16
    28b8:	1f 93       	push	r17
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	fb 01       	movw	r30, r22
    28c0:	23 81       	ldd	r18, Z+3	; 0x03
    28c2:	21 fd       	sbrc	r18, 1
    28c4:	03 c0       	rjmp	.+6      	; 0x28cc <fputc+0x16>
    28c6:	8f ef       	ldi	r24, 0xFF	; 255
    28c8:	9f ef       	ldi	r25, 0xFF	; 255
    28ca:	2c c0       	rjmp	.+88     	; 0x2924 <fputc+0x6e>
    28cc:	22 ff       	sbrs	r18, 2
    28ce:	16 c0       	rjmp	.+44     	; 0x28fc <fputc+0x46>
    28d0:	46 81       	ldd	r20, Z+6	; 0x06
    28d2:	57 81       	ldd	r21, Z+7	; 0x07
    28d4:	24 81       	ldd	r18, Z+4	; 0x04
    28d6:	35 81       	ldd	r19, Z+5	; 0x05
    28d8:	42 17       	cp	r20, r18
    28da:	53 07       	cpc	r21, r19
    28dc:	44 f4       	brge	.+16     	; 0x28ee <fputc+0x38>
    28de:	a0 81       	ld	r26, Z
    28e0:	b1 81       	ldd	r27, Z+1	; 0x01
    28e2:	9d 01       	movw	r18, r26
    28e4:	2f 5f       	subi	r18, 0xFF	; 255
    28e6:	3f 4f       	sbci	r19, 0xFF	; 255
    28e8:	20 83       	st	Z, r18
    28ea:	31 83       	std	Z+1, r19	; 0x01
    28ec:	8c 93       	st	X, r24
    28ee:	26 81       	ldd	r18, Z+6	; 0x06
    28f0:	37 81       	ldd	r19, Z+7	; 0x07
    28f2:	2f 5f       	subi	r18, 0xFF	; 255
    28f4:	3f 4f       	sbci	r19, 0xFF	; 255
    28f6:	26 83       	std	Z+6, r18	; 0x06
    28f8:	37 83       	std	Z+7, r19	; 0x07
    28fa:	14 c0       	rjmp	.+40     	; 0x2924 <fputc+0x6e>
    28fc:	8b 01       	movw	r16, r22
    28fe:	ec 01       	movw	r28, r24
    2900:	fb 01       	movw	r30, r22
    2902:	00 84       	ldd	r0, Z+8	; 0x08
    2904:	f1 85       	ldd	r31, Z+9	; 0x09
    2906:	e0 2d       	mov	r30, r0
    2908:	19 95       	eicall
    290a:	89 2b       	or	r24, r25
    290c:	e1 f6       	brne	.-72     	; 0x28c6 <fputc+0x10>
    290e:	d8 01       	movw	r26, r16
    2910:	16 96       	adiw	r26, 0x06	; 6
    2912:	8d 91       	ld	r24, X+
    2914:	9c 91       	ld	r25, X
    2916:	17 97       	sbiw	r26, 0x07	; 7
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	16 96       	adiw	r26, 0x06	; 6
    291c:	8d 93       	st	X+, r24
    291e:	9c 93       	st	X, r25
    2920:	17 97       	sbiw	r26, 0x07	; 7
    2922:	ce 01       	movw	r24, r28
    2924:	df 91       	pop	r29
    2926:	cf 91       	pop	r28
    2928:	1f 91       	pop	r17
    292a:	0f 91       	pop	r16
    292c:	08 95       	ret

0000292e <__ultoa_invert>:
    292e:	fa 01       	movw	r30, r20
    2930:	aa 27       	eor	r26, r26
    2932:	28 30       	cpi	r18, 0x08	; 8
    2934:	51 f1       	breq	.+84     	; 0x298a <__ultoa_invert+0x5c>
    2936:	20 31       	cpi	r18, 0x10	; 16
    2938:	81 f1       	breq	.+96     	; 0x299a <__ultoa_invert+0x6c>
    293a:	e8 94       	clt
    293c:	6f 93       	push	r22
    293e:	6e 7f       	andi	r22, 0xFE	; 254
    2940:	6e 5f       	subi	r22, 0xFE	; 254
    2942:	7f 4f       	sbci	r23, 0xFF	; 255
    2944:	8f 4f       	sbci	r24, 0xFF	; 255
    2946:	9f 4f       	sbci	r25, 0xFF	; 255
    2948:	af 4f       	sbci	r26, 0xFF	; 255
    294a:	b1 e0       	ldi	r27, 0x01	; 1
    294c:	3e d0       	rcall	.+124    	; 0x29ca <__ultoa_invert+0x9c>
    294e:	b4 e0       	ldi	r27, 0x04	; 4
    2950:	3c d0       	rcall	.+120    	; 0x29ca <__ultoa_invert+0x9c>
    2952:	67 0f       	add	r22, r23
    2954:	78 1f       	adc	r23, r24
    2956:	89 1f       	adc	r24, r25
    2958:	9a 1f       	adc	r25, r26
    295a:	a1 1d       	adc	r26, r1
    295c:	68 0f       	add	r22, r24
    295e:	79 1f       	adc	r23, r25
    2960:	8a 1f       	adc	r24, r26
    2962:	91 1d       	adc	r25, r1
    2964:	a1 1d       	adc	r26, r1
    2966:	6a 0f       	add	r22, r26
    2968:	71 1d       	adc	r23, r1
    296a:	81 1d       	adc	r24, r1
    296c:	91 1d       	adc	r25, r1
    296e:	a1 1d       	adc	r26, r1
    2970:	20 d0       	rcall	.+64     	; 0x29b2 <__ultoa_invert+0x84>
    2972:	09 f4       	brne	.+2      	; 0x2976 <__ultoa_invert+0x48>
    2974:	68 94       	set
    2976:	3f 91       	pop	r19
    2978:	2a e0       	ldi	r18, 0x0A	; 10
    297a:	26 9f       	mul	r18, r22
    297c:	11 24       	eor	r1, r1
    297e:	30 19       	sub	r19, r0
    2980:	30 5d       	subi	r19, 0xD0	; 208
    2982:	31 93       	st	Z+, r19
    2984:	de f6       	brtc	.-74     	; 0x293c <__ultoa_invert+0xe>
    2986:	cf 01       	movw	r24, r30
    2988:	08 95       	ret
    298a:	46 2f       	mov	r20, r22
    298c:	47 70       	andi	r20, 0x07	; 7
    298e:	40 5d       	subi	r20, 0xD0	; 208
    2990:	41 93       	st	Z+, r20
    2992:	b3 e0       	ldi	r27, 0x03	; 3
    2994:	0f d0       	rcall	.+30     	; 0x29b4 <__ultoa_invert+0x86>
    2996:	c9 f7       	brne	.-14     	; 0x298a <__ultoa_invert+0x5c>
    2998:	f6 cf       	rjmp	.-20     	; 0x2986 <__ultoa_invert+0x58>
    299a:	46 2f       	mov	r20, r22
    299c:	4f 70       	andi	r20, 0x0F	; 15
    299e:	40 5d       	subi	r20, 0xD0	; 208
    29a0:	4a 33       	cpi	r20, 0x3A	; 58
    29a2:	18 f0       	brcs	.+6      	; 0x29aa <__ultoa_invert+0x7c>
    29a4:	49 5d       	subi	r20, 0xD9	; 217
    29a6:	31 fd       	sbrc	r19, 1
    29a8:	40 52       	subi	r20, 0x20	; 32
    29aa:	41 93       	st	Z+, r20
    29ac:	02 d0       	rcall	.+4      	; 0x29b2 <__ultoa_invert+0x84>
    29ae:	a9 f7       	brne	.-22     	; 0x299a <__ultoa_invert+0x6c>
    29b0:	ea cf       	rjmp	.-44     	; 0x2986 <__ultoa_invert+0x58>
    29b2:	b4 e0       	ldi	r27, 0x04	; 4
    29b4:	a6 95       	lsr	r26
    29b6:	97 95       	ror	r25
    29b8:	87 95       	ror	r24
    29ba:	77 95       	ror	r23
    29bc:	67 95       	ror	r22
    29be:	ba 95       	dec	r27
    29c0:	c9 f7       	brne	.-14     	; 0x29b4 <__ultoa_invert+0x86>
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	61 05       	cpc	r22, r1
    29c6:	71 05       	cpc	r23, r1
    29c8:	08 95       	ret
    29ca:	9b 01       	movw	r18, r22
    29cc:	ac 01       	movw	r20, r24
    29ce:	0a 2e       	mov	r0, r26
    29d0:	06 94       	lsr	r0
    29d2:	57 95       	ror	r21
    29d4:	47 95       	ror	r20
    29d6:	37 95       	ror	r19
    29d8:	27 95       	ror	r18
    29da:	ba 95       	dec	r27
    29dc:	c9 f7       	brne	.-14     	; 0x29d0 <__ultoa_invert+0xa2>
    29de:	62 0f       	add	r22, r18
    29e0:	73 1f       	adc	r23, r19
    29e2:	84 1f       	adc	r24, r20
    29e4:	95 1f       	adc	r25, r21
    29e6:	a0 1d       	adc	r26, r0
    29e8:	08 95       	ret

000029ea <_exit>:
    29ea:	f8 94       	cli

000029ec <__stop_program>:
    29ec:	ff cf       	rjmp	.-2      	; 0x29ec <__stop_program>
